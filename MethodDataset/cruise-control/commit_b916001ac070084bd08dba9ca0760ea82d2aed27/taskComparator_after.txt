  public Comparator<ExecutionTask> taskComparator(StrategyOptions strategyOptions) {
    return (task1, task2) -> {
      boolean isTask1PartitionUnderReplicated = false;
      boolean isTask2PartitionUnderReplicated = false;
      boolean task1PartitionExists = false;
      boolean task2PartitionExists = false;
      try {
        isTask1PartitionUnderReplicated = isPartitionUnderReplicated(strategyOptions.cluster(),
            task1.proposal().topicPartition());
        task1PartitionExists = true;
      } catch (PartitionNotExistsException e) {
        LOG.warn("Task {} skipped comparison since partition {} does not exist in cluster.",
            task1, task1.proposal().topicPartition());
      }
      try {
        isTask2PartitionUnderReplicated = isPartitionUnderReplicated(strategyOptions.cluster(),
            task2.proposal().topicPartition());
        task2PartitionExists = true;
      } catch (PartitionNotExistsException e) {
        LOG.warn("Task {} skipped comparison since partition {} does not exist in cluster.",
            task2, task2.proposal().topicPartition());
      }

      if (task1PartitionExists && task2PartitionExists) {
        return isTask1PartitionUnderReplicated
            ? (isTask2PartitionUnderReplicated ? PRIORITIZE_NONE : PRIORITIZE_TASK_2)
            : (isTask2PartitionUnderReplicated ? PRIORITIZE_TASK_1 : PRIORITIZE_NONE);
      } else if (task1PartitionExists) {
        return isTask1PartitionUnderReplicated ? PRIORITIZE_NONE : PRIORITIZE_TASK_1;
      } else if (task2PartitionExists) {
        return isTask2PartitionUnderReplicated ? PRIORITIZE_NONE : PRIORITIZE_TASK_2;
      } else {
        return PRIORITIZE_NONE;
      }
    };
  }