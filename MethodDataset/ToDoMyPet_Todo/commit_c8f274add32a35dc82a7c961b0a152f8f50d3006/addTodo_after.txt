    public List<AddTodoResDTO> addTodo(String userId, AddTodoReqDTO todoInfoReqDTO) {

        List<AddTodoResDTO> response = new ArrayList<>();
        RepeatType repeatType = todoInfoReqDTO.getRepeatInfo().getRepeatType();
        List<Integer> repeatData = todoInfoReqDTO.getRepeatInfo().getRepeatData();

        StringBuilder repeatCode = new StringBuilder();
        Random rnd = new Random();

        while (true) {
            for (int i = 0; i < 2; i++) {
                repeatCode.append((char) (rnd.nextInt(26) + 65));
            }
            for (int i = 0; i < 9; i++) {
                repeatCode.append(rnd.nextInt(10));
            }

            if (todoRepository.getTodoByRepeatCode(repeatCode.toString()).isEmpty()) {
                break;
            }
        }

        for (TodoInfoReqDTO req : todoInfoReqDTO.getTodoInfos()) {
            if (haveRepository.existsHaveRelationshipBetweenUserAndCategory(userId, req.getCategoryId()) == null) {
                throw new CustomException(ErrorCode.WRONG_CATEGORY_ID);
            };

            Todo.TodoBuilder todoBuilder = Todo.builder().id(UlidCreator.getUlid().toString())
                .content(req.getContent())
                .startedAtDate(LocalDate.parse(req.getStartedAtDate()))
                .receiveAlert(req.isReceiveAlert()).clearYN(false)
                .getExperiencePointOrNot(false).markOnTheCalenderOrNot(req.isMarkOnTheCalenderOrNot())
                .alertAt(req.getAlertAt())
                .alertType(req.getAlertType())
                .repeatType(repeatType)
                .repeatData(repeatData)
                .repeatCode(repeatCode.toString());

            if (req.getStartedAtTime() != null) {
                todoBuilder.startedAtTime(LocalTime.parse(req.getStartedAtTime()));
            }
            if (req.getEndedAtTime() != null) {
                todoBuilder.endedAtDate(LocalDate.parse(req.getEndedAtDate()))
                        .endedAtTime(LocalTime.parse(req.getEndedAtTime()));
            }
            if (todoInfoReqDTO.getRepeatInfo().getRepeatEndDate() != null) {
                todoBuilder.repeatStartDate(todoInfoReqDTO.getRepeatInfo().getRepeatEndDate());
            }
            if (todoInfoReqDTO.getRepeatInfo().getRepeatStartDate() != null) {
                todoBuilder.repeatEndDate(todoInfoReqDTO.getRepeatInfo().getRepeatStartDate());
            }

            Todo todo = todoBuilder.build();

            String todoId = todoRepository.save(todo).getId();

            includeRepository.createIncludeRelationshipBetweenCategoryAndTodo(todoId, req.getCategoryId());
            response.add(AddTodoResDTO.builder().todoId(todoId).build());
        }

        return response;
    }