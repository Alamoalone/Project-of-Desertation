                    public Mono<Mono<XMessage>> apply(FormManagerParams previousMeta) {
                        final ServiceResponse[] response = new ServiceResponse[1];
                        MenuManager mm;
                        ObjectMapper mapper = new ObjectMapper();
                        JSONObject camp = null; //  is not being used in menumanager, only being added in constructor
                        // Remove camp from MenuManager construction
                        User user2 = userService.findByPhone(xMessage.getTo().getUserID());

                        JSONObject user = userService.getUserByPhoneFromFederatedServers(
                                getTransformerMetaDataValue(transformer, "botId"),
                                xMessage.getTo().getUserID()
                        );
                        log.info("Federated User by phone : " + user);
//                        try {
//                            camp = new JSONObject(mapper.writeValueAsString(campaign));
//                        } catch (JsonProcessingException e) {
//                            e.printStackTrace();
//                        }
                        String hiddenFieldsStr = getTransformerMetaDataValue(transformer, "hiddenFields");
                        ArrayNode hiddenFields = null;
                        try {
                            hiddenFields = (ArrayNode) mapper.readTree(hiddenFieldsStr);
                            log.info("hiddenFields: " + hiddenFields);
                        } catch (Exception ex) {
                            log.error("Exception in hidden fields read: " + ex.getMessage());
//                            ex.printStackTrace();
                        }

                        String instanceXMlPrevious = "";
                        Boolean prefilled;
                        String answer;
                        if (previousMeta.instanceXMlPrevious == null || previousMeta.currentAnswer.equals(assesGoToStartChar) || isStartingMessage) {
//                                            if (!lastFormID.equals(formID) || previousMeta.instanceXMlPrevious == null || previousMeta.currentAnswer.equals(assesGoToStartChar) || isStartingMessage) {
                            /* If bot restarted - create new session id */
                            if (previousMeta.currentAnswer.equals(assesGoToStartChar)) {
                                xMessage.setSessionId(UUID.randomUUID());
                            }
                            previousMeta.currentAnswer = assesGoToStartChar;
                            ServiceResponse serviceResponse = new MenuManager(null,
                                    null, null, formPath, formID, false,
                                    questionRepo, redisCacheService, xMessage.getTo().getUserID(), xMessage.getApp(), null).start();
                            FormInstanceUpdation ss = FormInstanceUpdation.builder().build();
                            ss.parse(serviceResponse.currentResponseState);
                            ss.updateAdapterProperties(xMessage.getChannel(), xMessage.getProvider());
                            ss.updateParams("phone_number", xMessage.getTo().getUserID());
                            instanceXMlPrevious = ss.updateHiddenFields(hiddenFields, (JSONObject) user).getXML();
                            prefilled = false;
                            answer = null;
                            log.info("Condition 1 - xpath: null, answer: null, instanceXMlPrevious: "
                                    + instanceXMlPrevious + ", formPath: " + formPath + ", formID: " + formID);
                            mm = new MenuManager(null, null, instanceXMlPrevious,
                                    formPath, formID, redisCacheService, xMessage.getTo().getUserID(), xMessage.getApp(), xMessage.getPayload(), fileCdnFactory.getFileCdnProvider());
                            response[0] = mm.start();
                        } else {
                            FormInstanceUpdation ss = FormInstanceUpdation.builder().build();
                            if (previousMeta.previousPath.equals("question./data/group_matched_vacancies[1]/initial_interest[1]")) {
                                ss.parse(previousMeta.instanceXMlPrevious);
                                ss.updateAdapterProperties(xMessage.getChannel(), xMessage.getProvider());

                                JSONObject vacancyDetails = null;
                                for (int j = 0; j < user.getJSONArray("matched").length(); j++) {
                                    String vacancyID = String.valueOf(user.getJSONArray("matched").getJSONObject(j).getJSONObject("vacancy_detail").getInt("id"));
                                    if (previousMeta.currentAnswer.equals(vacancyID)) {
                                        vacancyDetails = user.getJSONArray("matched").getJSONObject(j).getJSONObject("vacancy_detail");
                                    }
                                }
                                ss.updateHiddenFields(hiddenFields, user);
                                int idToBeDeleted = -1;
                                for (int i = 0; i < hiddenFields.size(); i++) {
                                    JsonNode object = hiddenFields.get(i);
                                    String userField = object.findValue("name").asText();
                                    if (userField.equals("candidate_id")) {
                                        idToBeDeleted = i;
                                    }
                                }
                                if (idToBeDeleted > -1) hiddenFields.remove(idToBeDeleted);
                                instanceXMlPrevious = instanceXMlPrevious + ss.updateHiddenFields(hiddenFields, (JSONObject) vacancyDetails).getXML();
                                prefilled = false;
                                answer = previousMeta.currentAnswer;
                                log.info("Condition 1 - xpath: " + previousMeta.previousPath + ", answer: " + answer + ", instanceXMlPrevious: "
                                        + instanceXMlPrevious + ", formPath: " + formPath + ", formID: " + formID + ", prefilled: " + prefilled
                                        + ", questionRepo: " + questionRepo + ", user: " + user + ", shouldUpdateFormXML: true, campaign: " + camp);
                                mm = new MenuManager(previousMeta.previousPath, answer,
                                        instanceXMlPrevious, formPath, formID,
                                        prefilled, questionRepo, user, true, redisCacheService, xMessage, fileCdnFactory.getFileCdnProvider());
                            } else {
                                prefilled = false;
                                answer = previousMeta.currentAnswer;
                                instanceXMlPrevious = previousMeta.instanceXMlPrevious;
                                log.info("Condition 1 - xpath: " + previousMeta.previousPath + ", answer: " + answer + ", instanceXMlPrevious: "
                                        + instanceXMlPrevious + ", formPath: " + formPath + ", formID: " + formID + ", prefilled: " + prefilled
                                        + ", questionRepo: " + questionRepo + ", user: " + user + ", shouldUpdateFormXML: true, campaign: " + camp);
                                mm = new MenuManager(previousMeta.previousPath, answer,
                                        instanceXMlPrevious, formPath, formID,
                                        prefilled, questionRepo, user, true, redisCacheService, xMessage, fileCdnFactory.getFileCdnProvider());
                            }
                            response[0] = mm.start();
                        }

                        log.info("next question xpath:" + response[0].question.getXPath());

                        /* To use with previous question & question payload methods */
//                                            log.info("menu manager instanceXMlPrevious: "+instanceXMlPrevious);
                        menuManager = mm;

                        /* Previous Question Data */
                        Question prevQuestion = null;
                        if (!isStartingMessage) {
                            prevQuestion = menuManager.getQuestionFromXPath(previousMeta.previousPath);
                        }

                        // Save answerData => PreviousQuestion + CurrentAnswer
                        Mono<Pair<Boolean, List<Question>>> updateQuestionAndAssessment =
                                updateQuestionAndAssessment(
                                        previousMeta,
                                        getPreviousQuestions(
                                                previousMeta.previousPath,
                                                formID,
                                                response[0].formVersion),
                                        formID,
                                        transformer,
                                        xMessage,
                                        response[0].question,
                                        prevQuestion,
                                        response[0].currentIndex,
                                        response[0].validResponse
                                );



                        /** This is for doubtnut hop bot hardcode
                            TODO set transformer as we have done in orchestrator, owner id, owner orgid
                         **/
                        if (response[0].currentIndex.contains("eof__") && response[0].currentIndex.contains("doubtnut")) {
                            String nextBotID = mm.getNextBotID(response[0].currentIndex);
                            return campaignService.getCampaignFromID(nextBotID).map(new Function<JsonNode, Mono<XMessage>>() {
                                @Override
                                public Mono<XMessage> apply(JsonNode jsonNode) {
                                    JsonNode data = jsonNode.get("data");
                                    XMessagePayload payload = xMessage.getPayload();
                                    payload.setText(data.path("startingMessage").asText());
                                    xMessage.setPayload(payload);
                                    xMessage.setApp(data.path("name").asText());
                                    xMessage.setTransformers(null);
                                    xMessage.setBotId(UUID.fromString(data.path("id").asText()));
                                    xMessage.setSessionId(UUID.randomUUID());
                                    try {
                                        kafkaProducer.send(genericTransformer, xMessage.toXML());
                                    } catch (JAXBException e) {
                                        throw new RuntimeException(e);
                                    }
                                    return null;
                                }
                            });
                        }
                        /* If form contains eof__, then process next bot by id addded with eof__bot_id, else process message */
                        else if (response[0].currentIndex.contains("eof__")) {
                            String nextBotID = mm.getNextBotID(response[0].currentIndex);

                            return Mono.zip(
                                    campaignService.getBotNameByBotID(nextBotID),
                                    campaignService.getFirstFormByBotID(nextBotID)
                            ).map(new Function<Tuple2<String, String>, Mono<XMessage>>() {
                                @Override
                                public Mono<XMessage> apply(Tuple2<String, String> objects) {
                                    String nextFormID = objects.getT2();
                                    String nextAppName = objects.getT1();

                                    ServiceResponse serviceResponse = new MenuManager(
                                            null, null, null,
                                            getFormPath(nextFormID), nextFormID,
                                            false, questionRepo, redisCacheService, xMessage.getTo().getUserID(), xMessage.getApp(), null)
                                            .start();
                                    FormInstanceUpdation ss = FormInstanceUpdation.builder().build();
                                    ss.parse(serviceResponse.currentResponseState);
                                    ss.updateAdapterProperties(xMessage.getChannel(), xMessage.getProvider());
//                                                        String instanceXMlPrevious = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
//                                                                ss.getXML();
                                    String instanceXMlPrevious = ss.getXML();
                                    log.debug("Instance value >> " + instanceXMlPrevious);
                                    MenuManager mm2 = new MenuManager(null, null,
                                            instanceXMlPrevious, getFormPath(nextFormID), nextFormID, true,
                                            questionRepo, redisCacheService, xMessage.getTo().getUserID(), xMessage.getApp(), null);
                                    ServiceResponse response = mm2.start();
                                    xMessage.setApp(nextAppName);
                                    return decodeXMessage(xMessage, response, nextFormID, updateQuestionAndAssessment);
                                }
                            });
                        } else {
                            return Mono.just(decodeXMessage(xMessage, response[0], formID, updateQuestionAndAssessment));
                        }
                    }
                }).flatMap(new Function<Mono<Mono<XMessage>>, Mono<XMessage>>() {
                    @Override
                    public Mono<XMessage> apply(Mono<Mono<XMessage>> m) {
                        log.info("Level 1");
                        return m.flatMap(new Function<Mono<XMessage>, Mono<? extends XMessage>>() {
                            @Override
                            public Mono<? extends XMessage> apply(Mono<XMessage> n) {
                                log.info("Level 2");
                                return n;
                            }
                        });
                    }
                });