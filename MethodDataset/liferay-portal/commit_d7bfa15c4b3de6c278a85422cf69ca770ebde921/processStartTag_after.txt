	protected int processStartTag() throws Exception {
		super.processStartTag();

		Boolean showDesignImprovementsFF = FeatureFlagManagerUtil.isEnabled(
			"LPS-144527");

		JspWriter jspWriter = pageContext.getOut();

		Boolean active = !getCheckboxStatus().equals("unchecked");

		jspWriter.write("<nav class=\"management-bar navbar navbar-expand-md");

		if (active) {
			jspWriter.write(" management-bar-primary navbar-nowrap");
		}
		else {
			jspWriter.write(" management-bar-light");
		}

		jspWriter.write("\"><div class=\"container-fluid");
		jspWriter.write(" container-fluid-max-xl\"><ul class=\"navbar-nav\">");

		ResourceBundle resourceBundle = TagResourceBundleUtil.getResourceBundle(
			pageContext);

		Boolean disabled = isDisabled();
		Integer itemsTotal = getItemsTotal();
		String localizedItemsType = _getLocalizedItemsType();
		Integer selectedItems = getSelectedItems();

		if (isSelectable()) {
			jspWriter.write("<li class=\"nav-item\"><div class=\"");
			jspWriter.write("custom-control custom-checkbox\"><label><input");

			if (active) {
				jspWriter.write(" checked");
			}

			if (disabled) {
				jspWriter.write(" disabled");
			}

			jspWriter.write(" aria-label=\"");

			if (active) {
				jspWriter.write(
					LanguageUtil.format(
						resourceBundle,
						"clear-selection.-there-are-currently-x-of-x-x-" +
							"selected",
						new Object[] {
							selectedItems, itemsTotal, localizedItemsType
						}));
			}
			else {
				jspWriter.write(
					LanguageUtil.format(
						resourceBundle, "select-all-x-on-the-page",
						new Object[] {localizedItemsType}));
			}

			jspWriter.write(
				"\" class=\"custom-control-input\" type=\"checkbox");
			jspWriter.write("\" /><span class=\"custom-control-label\">");
			jspWriter.write("</span></label></div></li>");
		}

		IconTag iconTag;

		if (active) {
			jspWriter.write("<li class=\"nav-item\"><span class=\"navbar-text");
			jspWriter.write("\">");

			String selectedItemslabel = LanguageUtil.format(
				resourceBundle, "x-of-x-x-selected",
				new Object[] {selectedItems, itemsTotal, localizedItemsType});

			if (itemsTotal == selectedItems) {
				jspWriter.write(
					LanguageUtil.get(resourceBundle, "all-selected"));
				jspWriter.write(" (");
				jspWriter.write(selectedItemslabel);
				jspWriter.write(")");
			}
			else {
				jspWriter.write(selectedItemslabel);
			}

			jspWriter.write("</span></li>");

			if (isSupportsBulkActions()) {
				jspWriter.write("<li class=\"nav-item nav-item-shrink\">");

				String clearSelectionURL = getClearSelectionURL();

				if (clearSelectionURL == null) {
					jspWriter.write("<button class=\"btn btn-unstyled");
					jspWriter.write(" nav-link\" type=\"button\"><span class=");
					jspWriter.write("\"text-truncate-inline\"><span class=\"");
					jspWriter.write("text-truncate\">");

					jspWriter.write(LanguageUtil.get(resourceBundle, "clear"));

					jspWriter.write("</span></span></button>");
				}
				else {
					LinkTag linkTag = new LinkTag();

					linkTag.setCssClass("nav-link");
					linkTag.setHref(clearSelectionURL);
					linkTag.setLabel("clear");

					linkTag.doTag(pageContext);
				}

				jspWriter.write("</li>");

				if (isShowSelectAllButton()) {
					jspWriter.write("<li class=\"nav-item nav-item-shrink\">");

					String selectAllURL = getSelectAllURL();

					if (selectAllURL == null) {
						jspWriter.write("<button class=\"btn btn-unstyled");
						jspWriter.write(" nav-link\" type=\"button\"><span");
						jspWriter.write(" class=\"text-truncate-inline\"><");
						jspWriter.write("span class=\"text-truncate\">");

						jspWriter.write(
							LanguageUtil.get(resourceBundle, "select-all"));

						jspWriter.write("</span></span></button>");
					}
					else {
						LinkTag linkTag = new LinkTag();

						linkTag.setCssClass("nav-link");
						linkTag.setHref(selectAllURL);
						linkTag.setLabel("select-all");

						linkTag.doTag(pageContext);
					}

					jspWriter.write("</li>");
				}
			}
		}

		if (!active && (getFilterDropdownItems() != null)) {
			jspWriter.write("<li class=\"nav-item\"><div class=\"dropdown\">");
			jspWriter.write("<button class=\"btn btn-unstyled dropdown-toggle");

			if (showDesignImprovementsFF) {
				jspWriter.write(" ml-2 mr-2");
			}

			jspWriter.write(" nav-link\"");

			if (disabled) {
				jspWriter.write(" disabled");
			}

			jspWriter.write(" type=\"button\"><span class=\"");
			jspWriter.write("navbar-breakpoint-down-d-none\"><span class=\"");

			if (showDesignImprovementsFF) {
				jspWriter.write("inline-item inline-item-before\">");

				iconTag = new IconTag();

				iconTag.setSymbol("filter");

				iconTag.doTag(pageContext);

				jspWriter.write("</span><span class=\"");
			}

			jspWriter.write("navbar-text-truncate\">");

			if (showDesignImprovementsFF) {
				jspWriter.write(LanguageUtil.get(resourceBundle, "filter"));
			}
			else {
				jspWriter.write(
					LanguageUtil.get(resourceBundle, "filter-and-order"));
			}

			jspWriter.write("</span>");

			iconTag = new IconTag();

			iconTag.setCssClass("inline-item inline-item-after");
			iconTag.setSymbol("caret-bottom");

			iconTag.doTag(pageContext);

			jspWriter.write("</span><span class=\"navbar-breakpoint-d-none\">");

			iconTag = new IconTag();

			iconTag.setSymbol("filter");

			iconTag.doTag(pageContext);

			jspWriter.write("</span></button></div></li>");
		}

		List<DropdownItem> orderDropdownItems = getOrderDropdownItems();

		if (showDesignImprovementsFF && !active &&
			(orderDropdownItems != null) && (orderDropdownItems.size() > 1)) {

			jspWriter.write("<li class=\"nav-item\"><div class=\"dropdown\">");
			jspWriter.write("<button class=\"btn btn-unstyled dropdown-toggle");
			jspWriter.write(" ml-2 mr-2 nav-link\"");

			if (disabled) {
				jspWriter.write(" disabled");
			}

			jspWriter.write(" type=\"button\"><span class=\"");
			jspWriter.write("navbar-breakpoint-down-d-none\"><span class=\"");
			jspWriter.write("inline-item inline-item-before\">");

			iconTag = new IconTag();

			String orderSymbol = "order-list-down";

			if (Objects.equals(getSortingOrder(), "asc")) {
				orderSymbol = "order-list-up";
			}

			iconTag.setSymbol(orderSymbol);

			iconTag.doTag(pageContext);

			jspWriter.write("</span><span class=\"navbar-text-truncate\">");
			jspWriter.write(LanguageUtil.get(resourceBundle, "order"));
			jspWriter.write("</span>");

			iconTag = new IconTag();

			iconTag.setCssClass("inline-item inline-item-after");
			iconTag.setSymbol("caret-bottom");

			iconTag.doTag(pageContext);

			jspWriter.write("</span><span class=\"navbar-breakpoint-d-none\">");

			iconTag = new IconTag();

			iconTag.setSymbol(orderSymbol);

			iconTag.doTag(pageContext);

			jspWriter.write("</span></button></div></li>");
		}

		Boolean showOrderToggle =
			((orderDropdownItems != null) &&
			 (orderDropdownItems.size() == 1)) ||
			ListUtil.isEmpty(orderDropdownItems);

		if ((!showDesignImprovementsFF && (getSortingURL() != null)) ||
			(showDesignImprovementsFF && (getSortingURL() != null) &&
			 showOrderToggle)) {

			jspWriter.write("<li class=\"nav-item\">");

			LinkTag linkTag = new LinkTag();

			linkTag.setCssClass("nav-link nav-link-monospaced");
			linkTag.setDisplayType("unstyled");

			if (Objects.equals(getSortingOrder(), "desc")) {
				linkTag.setIcon("order-list-down");
			}
			else {
				linkTag.setIcon("order-list-up");
			}

			linkTag.doTag(pageContext);

			jspWriter.write("</li>");
		}

		jspWriter.write("</ul>");

		List<DropdownItem> actionDropdownItems = getActionDropdownItems();

		if (active && (actionDropdownItems != null) &&
			!actionDropdownItems.isEmpty()) {

			jspWriter.write("<ul class=\"navbar-nav\">");

			for (DropdownItem actionDropdownItem : actionDropdownItems) {
				jspWriter.write(
					"<li class=\"nav-item navbar-breakpoint-down-d-none\">");

				LinkTag linkTag = new LinkTag();

				linkTag.setCssClass("nav-link nav-link-monospaced");
				linkTag.setDisplayType("unstyled");
				linkTag.setIcon((String)actionDropdownItem.get("icon"));

				linkTag.doTag(pageContext);

				jspWriter.write("</li>");
			}

			jspWriter.write("<li class=\"nav-item\"><div class=\"dropdown\">");
			jspWriter.write("<button class=\"dropdown-toggle nav-link");
			jspWriter.write(" nav-link-monospaced btn btn-monospaced");
			jspWriter.write(" btn-unstyled\" type=\"button\">");

			IconTag icon = new IconTag();

			icon.setSymbol("ellipsis-v");

			icon.doTag(pageContext);

			jspWriter.write("</div></li></ul>");
		}

		String searchValue = getSearchValue();

		if (!active && isShowSearch()) {
			jspWriter.write("<div class=\"navbar-form navbar-form-autofit ");
			jspWriter.write(" navbar-overlay navbar-overlay-sm-down\"><div");
			jspWriter.write(" class=\"container-fluid container-fluid-max-xl");
			jspWriter.write("\"><form");

			String searchActionURL = getSearchActionURL();

			if (searchActionURL != null) {
				jspWriter.write(" action=\"");
				jspWriter.write(HtmlUtil.escapeAttribute(searchActionURL));
				jspWriter.write("\"");
			}

			String searchFormMethod = getSearchFormMethod();

			if (searchFormMethod != null) {
				jspWriter.write(" method=\"");
				jspWriter.write(searchFormMethod);
				jspWriter.write("\"");
			}

			String searchFormName = getSearchFormName();
			String namespace = getNamespace();

			if (searchFormName != null) {
				jspWriter.write(" name=\"");
				jspWriter.write(namespace + searchFormName);
				jspWriter.write("\"");
			}

			jspWriter.write("role=\"search\"><div class=\"input-group\"><div");
			jspWriter.write(" class=\"input-group-item\"><input class=\"");
			jspWriter.write("form-control form-control input-group-inset");
			jspWriter.write(" input-group-inset-after\"");

			if (disabled) {
				jspWriter.write(" disabled");
			}

			String searchInputName = getSearchInputName();

			if (searchInputName != null) {
				jspWriter.write(" name=\"");
				jspWriter.write(namespace + searchInputName);
				jspWriter.write("\"");
			}

			jspWriter.write(" placeholder=\"");
			jspWriter.write(LanguageUtil.get(resourceBundle, "search-for"));
			jspWriter.write("\" type=\"text\"");

			if (searchValue != null) {
				jspWriter.write(" value=\"");
				jspWriter.write(HtmlUtil.escapeAttribute(searchValue));
				jspWriter.write("\"");
			}

			jspWriter.write(" /><span class=\"input-group-inset-item");
			jspWriter.write(" input-group-inset-item-after\"><button class=\"");
			jspWriter.write(" navbar-breakpoint-d-none btn btn-monospaced");
			jspWriter.write(" btn-unstyled\" disabled type=\"button\">");

			iconTag = new IconTag();

			iconTag.setSymbol("times");

			iconTag.doTag(pageContext);

			jspWriter.write("</button><button aria-label=\"");
			jspWriter.write(LanguageUtil.get(resourceBundle, "search"));
			jspWriter.write("\" class=\"btn btn-monospaced");
			jspWriter.write(" btn-unstyled\" disabled type=\"submit\">");

			iconTag = new IconTag();

			iconTag.setSymbol("search");

			iconTag.doTag(pageContext);

			jspWriter.write("</button></span></div></div></form></div></div>");
		}

		if (!active) {
			jspWriter.write("<ul class=\"navbar-nav\"><li class=\"nav-item");
			jspWriter.write(" navbar-breakpoint-d-none\"><button class=\"");
			jspWriter.write("nav-link nav-link-monospaced btn btn-monospaced");
			jspWriter.write(" btn-unstyled\" type=\"button\">");

			iconTag = new IconTag();

			iconTag.setSymbol("search");

			iconTag.doTag(pageContext);

			jspWriter.write("</button></li>");

			if (!showDesignImprovementsFF && isShowInfoButton()) {
				jspWriter.write("<li class=\"nav-item\"><button class=\"");
				jspWriter.write(" nav-link nav-link-monospaced btn");
				jspWriter.write(" btn-monospaced btn-unstyled\" type=\"button");
				jspWriter.write("\">");

				iconTag = new IconTag();

				iconTag.setSymbol("info-circle-open");

				iconTag.doTag(pageContext);

				jspWriter.write("</button></li>");
			}

			if (getViewTypeItems() != null) {
				jspWriter.write("<li class=\"nav-item\"><div class=\"dropdown");
				jspWriter.write("\"><button aria-label=\"");
				jspWriter.write(
					LanguageUtil.get(resourceBundle, "show-view-options"));
				jspWriter.write("\" class=\"dropdown-toggle nav-link");

				if (!showDesignImprovementsFF) {
					jspWriter.write(" nav-link-monospaced btn btn-monospaced");
				}

				jspWriter.write(" btn btn-unstyled\" type=\"button\">");

				for (ViewTypeItem viewTypeItem : getViewTypeItems()) {
					if ((Boolean)viewTypeItem.get("active")) {
						iconTag = new IconTag();

						iconTag.setSymbol((String)viewTypeItem.get("icon"));

						iconTag.doTag(pageContext);

						if (showDesignImprovementsFF) {
							iconTag = new IconTag();

							iconTag.setCssClass(
								"inline-item inline-item-after");
							iconTag.setSymbol("caret-double-l");

							iconTag.doTag(pageContext);
						}

						break;
					}
				}

				jspWriter.write("</button></div></li>");
			}

			if (isShowCreationMenu()) {
				jspWriter.write("<li class=\"nav-item\">");

				LinkTag linkTag = new LinkTag();

				if (showDesignImprovementsFF) {
					linkTag.setCssClass(
						"d-md-none nav-btn nav-btn-monospaced btn btn-primary");
				}
				else {
					linkTag.setCssClass(
						"nav-btn nav-btn-monospaced btn btn-primary");
				}

				linkTag.setIcon("plus");

				linkTag.doTag(pageContext);

				jspWriter.write("</li>");

				if (showDesignImprovementsFF) {
					jspWriter.write("<li class=\"nav-item\">");

					linkTag = new LinkTag();

					linkTag.setCssClass(
						"nav-btn d-md-flex d-none pl-4 pr-4 btn btn-primary");
					linkTag.setLabel(LanguageUtil.get(resourceBundle, "new"));

					linkTag.doTag(pageContext);

					jspWriter.write("</li>");
				}
			}

			if (showDesignImprovementsFF && isShowInfoButton()) {
				jspWriter.write("<li class=\"nav-item\"><button class=\"");
				jspWriter.write(" nav-link nav-link-monospaced btn");
				jspWriter.write(" btn-monospaced btn-unstyled\" type=\"button");
				jspWriter.write("\">");

				iconTag = new IconTag();

				iconTag.setSymbol("info-circle-open");

				iconTag.doTag(pageContext);

				jspWriter.write("</button></li>");
			}

			jspWriter.write("</ul>");
		}

		jspWriter.write("</div></nav>");

		if (isShowResultsBar()) {
			jspWriter.write("<nav class=\"subnav-tbar subnav-tbar-primary");
			jspWriter.write(" tbar tbar-inline-xs-down\"><div class=\"");
			jspWriter.write("container-fluid container-fluid-max-xl\">");
			jspWriter.write("<ul class=\"tbar-nav tbar-nav-wrap\">");
			jspWriter.write("<li class=\"tbar-item");

			List<LabelItem> filterLabelItems = getFilterLabelItems();

			if (ListUtil.isEmpty(filterLabelItems)) {
				jspWriter.write(" tbar-item-expand");
			}

			jspWriter.write("\"><div class=\"tbar-section\"><span class=\"");
			jspWriter.write("component-text text-truncate-inline\"><span");
			jspWriter.write(" class=\"text-truncate\">");
			jspWriter.write(
				LanguageUtil.format(
					resourceBundle,
					(getItemsTotal() == 1) ? "x-result-for" : "x-results-for",
					new Object[] {getItemsTotal()}));

			if (searchValue != null) {
				jspWriter.write("<strong> \"");
				jspWriter.write(HtmlUtil.escape(searchValue));
				jspWriter.write("\"</strong>");
			}

			jspWriter.write("</span></span></div></li>");

			if (filterLabelItems != null) {
				for (int i = 0; i < filterLabelItems.size(); i++) {
					_writeLabelItem(
						jspWriter, filterLabelItems.get(i),
						i == (filterLabelItems.size() - 1));
				}
			}

			jspWriter.write("<li class=\"tbar-item\"><div class=\"");
			jspWriter.write("tbar-section\">");

			LinkTag linkTag = new LinkTag();

			linkTag.setCssClass("component-link tbar-link");
			linkTag.setHref(HtmlUtil.escapeAttribute(getClearResultsURL()));
			linkTag.setLabel(LanguageUtil.get(resourceBundle, "clear"));

			linkTag.doTag(pageContext);

			jspWriter.write("</div></li></ul></div></nav>");
		}

		return SKIP_BODY;
	}