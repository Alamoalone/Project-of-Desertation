    public Pdu createPdu(ByteBuffer buff) {
        int pos = buff.position();
        if (pos + 2 > buff.limit()) {
            return null;
        } else {
            buff.position(pos + 2);
            int pduType = buff.get() & 255;
            buff.position(pos);
            PduType pduTypeEnum = PduType.lookup[pduType];
            Pdu aPdu = null;
            switch (pduTypeEnum) {
                case ENTITY_STATE:
                    aPdu = new EntityStatePdu();
                    break;
                case FIRE:
                    aPdu = new FirePdu();
                    break;
                case DETONATION:
                    aPdu = new DetonationPdu();
                    break;
                case COLLISION:
                    aPdu = new CollisionPdu();
                    break;
                case SERVICE_REQUEST:
                    aPdu = new ServiceRequestPdu();
                    break;
                case RESUPPLY_OFFER:
                    aPdu = new ResupplyOfferPdu();
                    break;
                case RESUPPLY_RECEIVED:
                    aPdu = new ResupplyReceivedPdu();
                    break;
                case REPAIR_COMPLETE:
                    aPdu = new RepairCompletePdu();
                    break;
                case REPAIR_RESPONSE:
                    aPdu = new RepairResponsePdu();
                    break;
                case CREATE_ENTITY:
                    aPdu = new CreateEntityPdu();
                    break;
                case REMOVE_ENTITY:
                    aPdu = new RemoveEntityPdu();
                    break;
                case START_RESUME:
                    aPdu = new StartResumePdu();
                    break;
                case STOP_FREEZE:
                    aPdu = new StopFreezePdu();
                    break;
                case ACKNOWLEDGE:
                    aPdu = new AcknowledgePdu();
                    break;
                case ACTION_REQUEST:
                    aPdu = new ActionRequestPdu();
                    break;
                case ACTION_RESPONSE:
                    aPdu = new ActionResponsePdu();
                    break;
                case DATA_QUERY:
                    aPdu = new DataQueryPdu();
                    break;
                case SET_DATA:
                    aPdu = new SetDataPdu();
                    break;
                case DATA:
                    aPdu = new DataPdu();
                    break;
                case EVENT_REPORT:
                    aPdu = new EventReportPdu();
                    break;
                case COMMENT:
                    aPdu = new CommentPdu();
                    break;
                case ELECTROMAGNETIC_EMISSION:
                    aPdu = new ElectronicEmissionsPdu();
                    break;
                case DESIGNATOR:
                    aPdu = new DesignatorPdu();
                    break;
                case TRANSMITTER:
                    aPdu = new TransmitterPdu();
                    break;
                case SIGNAL:
                    aPdu = new SignalPdu();
                    break;
                case RECEIVER:
                    aPdu = new ReceiverPdu();
                    break;
                case UNDERWATER_ACOUSTIC:
                    aPdu = new UaPdu();
                    break;
                case SUPPLEMENTAL_EMISSION_ENTITY_STATE:
                    aPdu = new SeesPdu();
                    break;
                case INTERCOM_SIGNAL:
                    aPdu = new IntercomSignalPdu();
                    break;
                case INTERCOM_CONTROL:
                    aPdu = new IntercomControlPdu();
                    break;
                case ISPARTOF:
                    aPdu = new IsPartOfPdu();
                    break;
                case MINEFIELD_STATE:
                    aPdu = new MinefieldStatePdu();
                    break;
                case MINEFIELD_RESPONSE_NAK:
                    aPdu = new MinefieldResponseNackPdu();
                    break;
                case POINT_OBJECT_STATE:
                    aPdu = new PointObjectStatePdu();
                    break;
                case LINEAR_OBJECT_STATE:
                    aPdu = new LinearObjectStatePdu();
                    break;
                case AREAL_OBJECT_STATE:
                    aPdu = new ArealObjectStatePdu();
                    break;
                case CREATE_ENTITY_R:
                    aPdu = new CreateEntityReliablePdu();
                    break;
                case REMOVE_ENTITY_R:
                    aPdu = new RemoveEntityReliablePdu();
                    break;
                case START_RESUME_R:
                    aPdu = new StartResumeReliablePdu();
                    break;
                case STOP_FREEZE_R:
                    aPdu = new StopFreezeReliablePdu();
                    break;
                case ACKNOWLEDGE_R:
                    aPdu = new AcknowledgeReliablePdu();
                    break;
                case ACTION_REQUEST_R:
                    aPdu = new ActionRequestReliablePdu();
                    break;
                case ACTION_RESPONSE_R:
                    aPdu = new ActionResponseReliablePdu();
                    break;
                case DATA_QUERY_R:
                    aPdu = new DataQueryReliablePdu();
                    break;
                case SET_DATA_R:
                    aPdu = new SetDataReliablePdu();
                    break;
                case DATA_R:
                    aPdu = new DataReliablePdu();
                    break;
                case EVENT_REPORT_R:
                    aPdu = new EventReportReliablePdu();
                    break;
                case COMMENT_R:
                    aPdu = new CommentReliablePdu();
                    break;
                case RECORD_QUERY_R:
                    aPdu = new RecordQueryReliablePdu();
                    break;
                case COLLISION_ELASTIC:
                    aPdu = new CollisionElasticPdu();
                    break;
                case ENTITY_STATE_UPDATE:
                    aPdu = new EntityStateUpdatePdu();
                    break;
                default:
                    this.logger.log(Level.INFO, "PDU not implemented. Type = " + pduType + "\n");
                    if (pduTypeEnum != null) {
                        this.logger.log(Level.INFO, "  PDU  name is: " + pduTypeEnum.getDescription());
                    }
            }

            if (aPdu != null) {
                ((Pdu) aPdu).unmarshal(buff);
            }

            return (Pdu) aPdu;
        }
    }