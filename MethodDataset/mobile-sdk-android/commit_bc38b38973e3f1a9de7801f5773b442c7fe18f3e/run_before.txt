                public void run() {
                    // Client suggested change for memory leak in VisibilityDetector,
                    // Stopping further execution if the AdView has already been destroyed.
                    if (isDestroyed) {
                        return;
                    }
                    if (ad.getDisplayable() != null && ad.getResponseData().getAdType().equalsIgnoreCase(UTConstants.AD_TYPE_BANNER)) {
                        BaseAdResponse baseAdResponse = ad.getResponseData();
                        ImpressionType impressionType = baseAdResponse == null? null: baseAdResponse.getImpressionType();
                        if (ad.getMediaType() == MediaType.INTERSTITIAL) {
                            if (baseAdResponse.getImpressionURLs() != null && baseAdResponse.getImpressionURLs().size() > 0) {
                                setImpressionTrackerVariables(baseAdResponse);
                            }
                        } else if (ImpressionType.VIEWABLE_IMPRESSION == impressionType && ad.getMediaType().equals(MediaType.BANNER)) {
                            if (baseAdResponse.getImpressionURLs() != null && baseAdResponse.getImpressionURLs().size() > 0) {
                                setImpressionTrackerVariables(baseAdResponse);
                            }
                            VisibilityDetector visibilityDetector = VisibilityDetector.getInstance();
                            if (visibilityDetector != null) {
                                visibilityDetector.destroy(AdView.this);
                                visibilityDetector.addVisibilityListener(AdView.this);
                            }
                        }
                    }
                    setCreativeWidth(ad.getDisplayable().getCreativeWidth());
                    setCreativeHeight(ad.getDisplayable().getCreativeHeight());
                    setAdResponseInfo(ad.getResponseData().getAdResponseInfo());
                    if (ad.isMediated() && ad.getResponseData().getContentSource() == UTConstants.CSM) {
                        try {
                            displayMediated((MediatedDisplayable) ad.getDisplayable());
                        } catch (ClassCastException cce) {
                            Clog.e(Clog.baseLogTag, "The SDK shouldn't fail downcasts to MediatedDisplayable in AdView");
                        }
                    } else {
                        setFriendlyObstruction(ad.getDisplayable());
                        display(ad.getDisplayable());
                    }
                    if (ad.getMediaType() == MediaType.BANNER && ImpressionType.BEGIN_TO_RENDER == ad.getResponseData().getImpressionType()) {
                        fireOmidImpression();
                    }
                    if (ad.getResponseData().getAdType().equalsIgnoreCase(UTConstants.AD_TYPE_VIDEO)) {
                        setAdType(AdType.VIDEO);
                        if (mAdFetcher.getState() == AdFetcher.STATE.AUTO_REFRESH) {
                            mAdFetcher.stop();
                        }
                    } else if (ad.getResponseData().getAdType().equalsIgnoreCase(UTConstants.AD_TYPE_BANNER)) {
                        setAdType(AdType.BANNER);
                    }
                    recordFinishTime();
                    if (adListener != null) {
                        adListener.onAdLoaded(AdView.this);
                    }
                    if (ad.getNativeAdResponse() != null) {
                        AdView.this.ad = ad;
                        NativeAdSDK.registerTracking(ad.getNativeAdResponse(), ad.getDisplayable().getView(), new NativeAdEventListener() {
                            @Override
                            public void onAdWasClicked() {

                            }

                            @Override
                            public void onAdWillLeaveApplication() {

                            }

                            @Override
                            public void onAdWasClicked(String clickUrl, String fallbackURL) {

                            }

                            @Override
                            public void onAdImpression() {
                                if (dispatcher != null) {
                                    dispatcher.onAdImpression();
                                }
                            }

                            @Override
                            public void onAdAboutToExpire() {

                            }

                            @Override
                            public void onAdExpired() {

                            }
                        }, getFriendlyObstructionViewsList());
                    }
                }