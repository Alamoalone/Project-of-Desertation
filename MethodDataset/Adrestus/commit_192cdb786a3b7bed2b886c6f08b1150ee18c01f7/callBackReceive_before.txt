    public void callBackReceive() {
        this.receive = x -> {
            Receipt receipt = recep.decode(x);
            if(receipt.getReceiptBlock()==null){
                return "";
            }
            if(receipt.getReceiptBlock().getBlock_hash().equals("")){
                return "";
            }
            List<String> ips = CachedLatestBlocks.getInstance().getCommitteeBlock().getStructureMap().get(receipt.getZoneFrom()).values().stream().collect(Collectors.toList());
            ips.remove(IPFinder.getLocalIP());
            int RPCTransactionZonePort = ZoneDatabaseFactory.getDatabaseRPCPort(receipt.getZoneFrom());
            ArrayList<InetSocketAddress> toConnectTransaction = new ArrayList<>();
            ips.stream().forEach(ip -> {
                try {
                    toConnectTransaction.add(new InetSocketAddress(InetAddress.getByName(ip), RPCTransactionZonePort));
                } catch (UnknownHostException e) {
                    throw new RuntimeException(e);
                }
            });
            RpcAdrestusClient client = new RpcAdrestusClient(new TransactionBlock(), toConnectTransaction, CachedEventLoop.getInstance().getEventloop());
            client.connect();

            ArrayList<String> to_search = new ArrayList<>();
            to_search.add(String.valueOf(receipt.getReceiptBlock().getHeight()));

            List<TransactionBlock> currentblock = client.getBlock(to_search);
            if (currentblock.isEmpty()) {
                return "";
            }

            int index = Collections.binarySearch(currentblock.get(currentblock.size() - 1).getTransactionList(), receipt.getTransaction());
            Transaction trx = currentblock.get(currentblock.size() - 1).getTransactionList().get(index);

            ReceiptBlock receiptBlock1 = new ReceiptBlock(StatusType.PENDING, receipt, currentblock.get(currentblock.size() - 1), trx);


            publisher.publish(receiptBlock1);

            return "";
        };
    }