    private void fetchAndDisplayCourses() {
        FirebaseUser currentUser = mAuth.getCurrentUser();
        if (currentUser != null) {
            String userEmail = currentUser.getEmail().toLowerCase();
            Date currentDate = Calendar.getInstance().getTime();
            FirebaseFirestore db = FirebaseFirestore.getInstance();
            CollectionReference classesRef = db.collection("Classes");

            classesRef.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                @Override
                public void onComplete(@NonNull Task<QuerySnapshot> task) {
                    if (task.isSuccessful()) {
                        for (QueryDocumentSnapshot classDocument : task.getResult()) {
                            // Access the class data
                            String classDocumentId = classDocument.getId();
                            String className = classDocument.getString("course_name");
                            List<String> daysOfWeek = (List<String>) classDocument.get("days_of_week");
                            Log.d("DAYS OF WEEK", daysOfWeek.toString());
                            Timestamp timeStart = classDocument.getTimestamp("time_start");
                            Timestamp timeEnd = classDocument.getTimestamp("time_end");
                            String startTime = formatTime(timeStart);
                            String endTime = formatTime(timeEnd);
                            Date startDate = formatDate(timeStart);
                            Date endDate = formatDate(timeEnd);
                            String timeRange = startTime + " - " + endTime;

                            List<String> studentEmails = new ArrayList<>();
                            classDocument.getReference().collection("Students").get()
                                    .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                                        @Override
                                        public void onComplete(@NonNull Task<QuerySnapshot> studentTask) {
                                            if (studentTask.isSuccessful()) {
                                                for (QueryDocumentSnapshot studentDocument : studentTask.getResult()) {
                                                    studentEmails.add(studentDocument.getId());
                                                }
                                                Course course = new Course(className, timeRange, classDocumentId, daysOfWeek, startDate, endDate);
                                                if (studentEmails.contains(userEmail)) {
                                                    classListAll.add(course);
                                                    adapter_all.notifyDataSetChanged();

                                                    // Check if the class is scheduled for the current day
                                                    if (course.isCourseScheduledToday()) {
                                                            classList.add(course);
                                                            adapter.notifyDataSetChanged(); // Notify the adapter that data has changed
                                                        }
                                                }
                                              }
                                            }
                                    });
                        }
                    } else {
                        // Handle errors
                        Log.e("FirestoreQuery", "Error getting documents: " + task.getException());
                    }
                }
            });
        }
    }