    public static void connectEquivalentGeneratorsAndLoads(Network network, HvdcCreationParameters creationParameters,  HvdcLine hvdcLine) {

        Load load1 = getLoadOrThrow(network, creationParameters.getEquivalentLoadId(HvdcLine.Side.ONE));
        Generator gen1 = getGeneratorOrThrow(network, creationParameters.getEquivalentGeneratorId(HvdcLine.Side.ONE));
        Load load2 = getLoadOrThrow(network, creationParameters.getEquivalentLoadId(HvdcLine.Side.TWO));
        Generator gen2 = getGeneratorOrThrow(network, creationParameters.getEquivalentGeneratorId(HvdcLine.Side.TWO));

        load1.getTerminal().connect();
        gen1.getTerminal().connect();
        load2.getTerminal().connect();
        gen2.getTerminal().connect();

        HvdcAngleDroopActivePowerControl angleDroopActivePowerControl = hvdcLine.getExtension(HvdcAngleDroopActivePowerControl.class);
        if (angleDroopActivePowerControl != null && angleDroopActivePowerControl.isEnabled()) {
            load1.setP0(0);
            gen1.setTargetP(0);
            load2.setP0(0);
            gen2.setTargetP(0);
        } else {
            double setpoint = hvdcLine.getActivePowerSetpoint();
            if (hvdcLine.getConvertersMode().equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER)) {
                // If power flow is from Side1 -> Side2 : set power on load1 & gen2
                load1.setP0(setpoint);
                gen2.setTargetP(setpoint);
                load2.setP0(0);
                gen1.setTargetP(0);
            } else {
                // If power flow is from Side2 -> Side1 : set power on load2 & gen1
                load2.setP0(setpoint);
                gen1.setTargetP(setpoint);
                load1.setP0(0);
                gen2.setTargetP(0);
            }
        }
    }