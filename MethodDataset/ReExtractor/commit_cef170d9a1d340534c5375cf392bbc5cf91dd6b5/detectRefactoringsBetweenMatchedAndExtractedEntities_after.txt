    private void detectRefactoringsBetweenMatchedAndExtractedEntities(Set<Pair<DeclarationNodeTree, DeclarationNodeTree>> matchedEntities,
                                                                      Set<DeclarationNodeTree> extractedEntities, Set<DeclarationNodeTree> addedEntities,
                                                                      List<Refactoring> refactorings) {
        for (DeclarationNodeTree extractedEntity : extractedEntities) {
            if (extractedEntity.getType() == EntityType.METHOD) {
                List<EntityInfo> dependencies = extractedEntity.getDependencies();
                for (Pair<DeclarationNodeTree, DeclarationNodeTree> pair : matchedEntities) {
                    DeclarationNodeTree oldEntity = pair.getLeft();
                    DeclarationNodeTree newEntity = pair.getRight();
                    if (oldEntity.getType() == EntityType.METHOD && newEntity.getType() == EntityType.METHOD) {
                        if (!dependencies.contains(newEntity.getEntity()))
                            continue;
                        if (MethodUtils.isNewFunction(oldEntity.getDeclaration(), newEntity.getDeclaration()))
                            continue;
                        if (MethodUtils.isGetter((MethodDeclaration) extractedEntity.getDeclaration()) || MethodUtils.isSetter((MethodDeclaration) extractedEntity.getDeclaration()))
                            continue;
                        MethodNode methodNode = extractedEntity.getMethodNode();
                        int totalLOC = methodNode.getAllControls().size() + methodNode.getAllBlocks().size() + methodNode.getAllOperations().size() - 1;
                        int unmatchedLOC = methodNode.getUnmatchedStatements().size();
                        int matchedLOC = totalLOC - unmatchedLOC;
                        double dice = DiceFunction.calculateBodyDice((LeafNode) extractedEntity, (LeafNode) newEntity, (LeafNode) oldEntity);
                        if (dice < DiceFunction.minSimilarity && matchedLOC <= unmatchedLOC)
                            continue;
                        boolean isMove = !oldEntity.getNamespace().equals(extractedEntity.getNamespace()) &&
                                !matchedEntities.contains(Pair.of(oldEntity.getParent(), extractedEntity.getParent()));
                        if (isMove) {
                            ExtractAndMoveOperationRefactoring refactoring = new ExtractAndMoveOperationRefactoring(oldEntity, newEntity, extractedEntity);
                            refactorings.add(refactoring);
                        } else {
                            ExtractOperationRefactoring refactoring = new ExtractOperationRefactoring(oldEntity, newEntity, extractedEntity);
                            refactorings.add(refactoring);
                        }
                    }
                }
            }
        }
        for (DeclarationNodeTree addedEntity : addedEntities) {
            if (addedEntity.getType() == EntityType.CLASS || addedEntity.getType() == EntityType.INTERFACE) {
                Set<DeclarationNodeTree> mapping = new HashSet<>();
                Map<DeclarationNodeTree, DeclarationNodeTree> extractedOperations = new TreeMap<>(Comparator.comparingInt(startLine -> startLine.getLocationInfo().getStartLine()));
                Map<DeclarationNodeTree, DeclarationNodeTree> extractedAttributes = new TreeMap<>(Comparator.comparingInt(startLine -> startLine.getLocationInfo().getStartLine()));
                for (Pair<DeclarationNodeTree, DeclarationNodeTree> pair : matchedEntities) {
                    DeclarationNodeTree oldEntity = pair.getLeft();
                    DeclarationNodeTree newEntity = pair.getRight();
                    if (oldEntity.getType() == EntityType.METHOD && newEntity.getType() == EntityType.METHOD && newEntity.getParent() == addedEntity) {
                        mapping.add(oldEntity.getParent());
                        extractedOperations.put(oldEntity, newEntity);
                    }
                    if (oldEntity.getType() == EntityType.FIELD && newEntity.getType() == EntityType.FIELD && newEntity.getParent() == addedEntity) {
                        mapping.add(oldEntity.getParent());
                        extractedAttributes.put(oldEntity, newEntity);
                    }
                }
                Set<DeclarationNodeTree> subclassSetBefore = new LinkedHashSet<>();
                Set<DeclarationNodeTree> subclassSetAfter = new LinkedHashSet<>();
                for (Pair<DeclarationNodeTree, DeclarationNodeTree> pair : matchedEntities) {
                    DeclarationNodeTree oldEntity = pair.getLeft();
                    if (mapping.contains(oldEntity)) {
                        DeclarationNodeTree newEntity = pair.getRight();
                        if (newEntity.getType() == EntityType.CLASS || newEntity.getType() == EntityType.INTERFACE) {
                            TypeDeclaration newClass = (TypeDeclaration) newEntity.getDeclaration();
                            TypeDeclaration addedClass = (TypeDeclaration) addedEntity.getDeclaration();
                            if (!isSubTypeOf(newClass, addedClass) && !isSubTypeOf(addedClass, newClass)) {
                                ExtractClassRefactoring refactoring = new ExtractClassRefactoring(oldEntity, newEntity, addedEntity, extractedOperations, extractedAttributes);
                                refactorings.add(refactoring);
                            }
                            if (isSubTypeOf(newClass, addedClass)) {
                                subclassSetBefore.add(oldEntity);
                                subclassSetAfter.add(newEntity);
                            } else if (isSubTypeOf(addedClass, newClass)) {
                                ExtractSubClassRefactoring refactoring = new ExtractSubClassRefactoring(oldEntity, newEntity, addedEntity, extractedOperations, extractedAttributes);
                                refactorings.add(refactoring);
                            }
                        }
                    }
                }
                if (!subclassSetBefore.isEmpty()) {
                    if (addedEntity.getType() == EntityType.INTERFACE) {
                        ExtractInterfaceRefactoring refactoring = new ExtractInterfaceRefactoring(addedEntity, subclassSetBefore, subclassSetAfter);
                        refactorings.add(refactoring);
                    } else {
                        ExtractSuperClassRefactoring refactoring = new ExtractSuperClassRefactoring(addedEntity, subclassSetBefore, subclassSetAfter);
                        refactorings.add(refactoring);
                    }
                }
            }
        }
    }