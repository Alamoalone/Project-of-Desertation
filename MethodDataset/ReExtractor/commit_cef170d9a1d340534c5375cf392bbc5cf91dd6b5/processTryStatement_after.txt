    private void processTryStatement(StatementNodeTree oldStatement, StatementNodeTree newStatement, DeclarationNodeTree oldEntity,
                                     DeclarationNodeTree newEntity, List<Refactoring> refactorings) {
        TryStatement statement1 = (TryStatement) oldStatement.getStatement();
        TryStatement statement2 = (TryStatement) newStatement.getStatement();
        List<Object> resources1 = statement1.resources();
        List<Object> resources2 = statement2.resources();
        for (int i = 0; i < Math.min(resources1.size(), resources2.size()); i++) {
            Object resource1 = resources1.get(i);
            Object resource2 = resources2.get(i);
            if (resource1 instanceof VariableDeclarationExpression && resource2 instanceof VariableDeclarationExpression) {
                VariableDeclarationExpression expression1 = (VariableDeclarationExpression) resource1;
                VariableDeclarationExpression expression2 = (VariableDeclarationExpression) resource2;
                List<VariableDeclarationFragment> fragments1 = expression1.fragments();
                List<VariableDeclarationFragment> fragments2 = expression2.fragments();
                Type type1 = expression1.getType();
                Type type2 = expression2.getType();
                for (int j = 0; j < Math.min(fragments1.size(), fragments2.size()); j++) {
                    VariableDeclarationFragment fragment1 = fragments1.get(j);
                    VariableDeclarationFragment fragment2 = fragments2.get(j);
                    if (!fragment1.getName().getIdentifier().equals(fragment2.getName().getIdentifier())) {
                        RenameVariableRefactoring refactoring = new RenameVariableRefactoring(fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    if (!type1.toString().equals(type2.toString())) {
                        ChangeVariableTypeRefactoring refactoring = new ChangeVariableTypeRefactoring(fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    List<IExtendedModifier> modifiers1 = expression1.modifiers();
                    List<IExtendedModifier> modifiers2 = expression2.modifiers();
                    AnnotationListDiff annotationListDiff = new AnnotationListDiff(modifiers1, modifiers2);
                    for (Annotation annotation : annotationListDiff.getAddedAnnotations()) {
                        AddVariableAnnotationRefactoring refactoring = new AddVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    for (Annotation annotation : annotationListDiff.getRemovedAnnotations()) {
                        RemoveVariableAnnotationRefactoring refactoring = new RemoveVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    for (Pair<Annotation, Annotation> annotationDiff : annotationListDiff.getAnnotationDiffs()) {
                        ModifyVariableAnnotationRefactoring refactoring = new ModifyVariableAnnotationRefactoring(annotationDiff.getLeft(), annotationDiff.getRight(), fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    int variableModifiers1 = expression1.getModifiers();
                    int variableModifiers2 = expression2.getModifiers();
                    if (!Flags.isFinal(variableModifiers1) && Flags.isFinal(variableModifiers2)) {
                        AddVariableModifierRefactoring refactoring = new AddVariableModifierRefactoring("final", fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                    if (Flags.isFinal(variableModifiers1) && !Flags.isFinal(variableModifiers2)) {
                        RemoveVariableModifierRefactoring refactoring = new RemoveVariableModifierRefactoring("final", fragment1, fragment2, oldEntity, newEntity);
                        refactorings.add(refactoring);
                    }
                }
            }
        }
    }