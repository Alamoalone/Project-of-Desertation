    public void GetProductById_ValidId_ReturnsOk() {
        LoginDTO login = new LoginDTO("admin", "Password123!");

        ResponseEntity<LoginResponseDTO> loginResponse = restTemplate.postForEntity(
                "http://localhost:" + port + "/auth/login",
                login,
                LoginResponseDTO.class);

        assertEquals(HttpStatus.OK, loginResponse.getStatusCode());
        assertNotNull(loginResponse.getBody());
        String jwt = loginResponse.getBody().getJwt();

        // Create a ProductDTO for testing
        ProductRegistrationDTO validInput = new ProductRegistrationDTO(
                "Test Brand",
                "Test Name",
                "Test Description",
                10,
                new BigDecimal("19.99")
        );

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwt);

        HttpEntity<ProductRegistrationDTO> requestEntity = new HttpEntity<>(validInput, headers);


        ResponseEntity<ProductDTO> createResponse = restTemplate.postForEntity(
                "http://localhost:" + port + "/product/register",
                requestEntity,
                ProductDTO.class);

        assertEquals(HttpStatus.OK, createResponse.getStatusCode());

        ProductDTO createdProduct = createResponse.getBody();
        assertNotNull(createdProduct);

        Long productId = createdProduct.getProductId();

        ResponseEntity<ProductDTO> response = restTemplate.getForEntity(
                "http://localhost:" + port + "/product/" + productId,
                ProductDTO.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());

        ProductDTO responseBody = response.getBody();
        assertNotNull(responseBody);
        assertEquals("Test Brand", responseBody.getBrand());
        assertEquals("Test Name", responseBody.getName());
        assertEquals("Test Description", responseBody.getDescription());
        assertEquals(10, responseBody.getQuantity());
        assertEquals(new BigDecimal("19.99"), responseBody.getPrice());
    }