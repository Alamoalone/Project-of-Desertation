    public void UpdateProduct_InvalidInput_ReturnsBadRequest() {
        LoginDTO login = new LoginDTO("admin", "Password123!");

        ResponseEntity<LoginResponseDTO> loginResponse = restTemplate.postForEntity(
                "http://localhost:" + port + "/auth/login",
                login,
                LoginResponseDTO.class);

        assertEquals(HttpStatus.OK, loginResponse.getStatusCode());

        String jwt = loginResponse.getBody().getJwt();

        // Create a ProductDTO for testing
        ProductRegistrationDTO validInput = new ProductRegistrationDTO(
                "Test Brand",
                "Test Name",
                "Test Description",
                10,
                new BigDecimal("19.99")
        );

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwt);

        HttpEntity<ProductRegistrationDTO> requestEntity = new HttpEntity<>(validInput, headers);

        ResponseEntity<ProductDTO> createResponse = restTemplate.postForEntity(
                "http://localhost:" + port + "/product/register",
                requestEntity,
                ProductDTO.class);

        assertEquals(HttpStatus.OK, createResponse.getStatusCode());

        ProductDTO createdProduct = createResponse.getBody();
        assertNotNull(createdProduct);

        Long productId = createdProduct.getProductId();

        // Attempt to update the product with invalid input
        ProductUpdateDTO invalidInput = new ProductUpdateDTO(
                productId,
                "Test Brand Updated",
                "Test Name Updated",
                "Test Description Updated",
                -5,
                new BigDecimal("-39.99")
        );

        HttpEntity<ProductUpdateDTO> requestEntityUpdate = new HttpEntity<>(invalidInput, headers);

        restTemplate.exchange(
                "http://localhost:" + port + "/product/update",
                HttpMethod.PUT,
                requestEntityUpdate,
                ProductDTO.class
        );

        // Verify that the product was not updated due to invalid input
        ResponseEntity<ProductDTO> response = restTemplate.getForEntity(
                "http://localhost:" + port + "/product/" + productId,
                ProductDTO.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());

        ProductDTO updatedProduct = response.getBody();
        assertNotNull(updatedProduct);

        // Assert that the product details are still the same as before the update
        // In this example only the invalid quantity should be ignored. The rest should be updated
        assertNotEquals(createdProduct.getBrand(), updatedProduct.getBrand());
        assertNotEquals(createdProduct.getName(), updatedProduct.getName());
        assertNotEquals(createdProduct.getDescription(), updatedProduct.getDescription());
        assertEquals(createdProduct.getQuantity(), updatedProduct.getQuantity());
        assertEquals(createdProduct.getPrice(), updatedProduct.getPrice());

    }