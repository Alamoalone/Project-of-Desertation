    public List<Book> search(BookSearchRqDto bookSearchRqDto) {
        int offset = bookSearchRqDto.getPageNumber() * BOOK_PER_PAGE;
        SearchSession searchSession = Search.session(entityManager);

        LocalDate dateFrom = LocalDate.parse(bookSearchRqDto.getDateOfBirthFrom());
        LocalDate dateTo = LocalDate.parse(bookSearchRqDto.getDateOfBirthTo());

        runIndexing(searchSession);

        SearchResult<BookModel> searchResult = searchSession
                .search(BookModel.class)
                .where(f->f.bool(b-> {
                    b.must(f.matchAll());
                    if (bookSearchRqDto.getSearchText() != null && !bookSearchRqDto.getSearchText().isEmpty()) {
                        b.must(f.match().fields().fields("name", "authors.fullName").matching(bookSearchRqDto.getSearchText()).fuzzy());
                    }
                    if (bookSearchRqDto.getDateOfBirthFrom() != null) {
                        b.must(f.range().field("authors.dateOfBirth").atLeast(dateFrom));
                    }
                    if (bookSearchRqDto.getDateOfBirthTo() != null) {
                        b.must(f.range().field("authors.dateOfBirth").atMost(dateTo));
                    }
                } ))
                .fetch(offset, BOOK_PER_PAGE);

        return searchResult.hits().stream()
                .map(bookModelMapper::modelToObject)
                .toList();
    }