    public void onScrollArrowPressed() {
        view.runBackground(() -> {
            final int NOT_FOUND = -1;
            final int START_VAL = -2;
            int position = START_VAL;

            if (messageList.size() == 0) return;

            MessageDao messageDao = view.getMessagesDatabase().getMessageDao();
            if (lastReadMessage == null) {
                String lastReadMessageId;
                if (room.getUnreadMessagesIds().size() > 0) {
                    lastReadMessageId = room.getUnreadMessagesIds().get(0);
                } else {
                    lastReadMessageId = room.getLastMessageId();
                }

                for (int i = 0; i < messageList.size(); i++) {
                    Message m = messageList.get(i);
                    if (m.getId().equals(lastReadMessageId)) {
                        position = i;
                        lastReadMessage = m;
                        break;
                    }
                }

                if (position == START_VAL) {
                    lastReadMessage = messageDao.getMessageById(lastReadMessageId);
                    position = NOT_FOUND;
                }
            }

            if (position == START_VAL) {
                position = messageList.indexOf(lastReadMessage);
            }

            if (position == NOT_FOUND) {
                if (lastReadMessage == null) return;
                if (!lastReadMessage.getRoomSecret().equals(roomSecret)) return;
                loadMessagesNearByTime(lastReadMessage.getTime());
                return;
            }

            // if lastReadMessage is loaded
            if (room.getUnreadMessagesIds().size() > 0 && view.isMessageVisible(position)) {
                if (isNewestMessagesLoaded) view.smoothScrollTo(0);
                else loadRoomBottomMessages();
                return;
            }

            int finalPosition = position;
            view.runOnUiThread(() -> {
                view.smoothScrollTo(finalPosition);
            });
        });
    }