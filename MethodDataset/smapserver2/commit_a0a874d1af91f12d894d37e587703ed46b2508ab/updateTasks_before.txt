	public Response updateTasks(@Context HttpServletRequest request, 
			String assignInput,
			String userName) { 
		
		Response response = null;
		String connectionString = "surveyKPI-MyAssignments - updateTasks";

		Connection sd = SDDataSource.getConnection(connectionString);

		// Authorisation not required as a user can only update their own assignments

		Gson gson = new GsonBuilder().disableHtmlEscaping().setDateFormat("yyyy-MM-dd HH:mm").create();
		TaskResponse tr = gson.fromJson(assignInput, TaskResponse.class);

		log.info("Device:" + tr.deviceId + " for user " + userName);

		// TODO that the status is valid (A different range of status values depending on the role of the user)

		PreparedStatement pstmtSetDeleted = null;
		PreparedStatement pstmtSetUpdatedRejected = null;	
		PreparedStatement pstmtSetUpdatedNotRejected = null;
		PreparedStatement pstmtTasks = null;		
		PreparedStatement pstmtEvents = null;
		PreparedStatement pstmtUpdateId = null;
		PreparedStatement pstmtUnassignedRejected = null;
		
		Connection cResults = ResultsDataSource.getConnection(connectionString);
		try {	

			Locale locale = new Locale(GeneralUtilityMethods.getUserLanguage(sd, request, request.getRemoteUser()));
			ResourceBundle localisation = ResourceBundle.getBundle("org.smap.sdal.resources.SmapResources", locale);
			
			pstmtSetDeleted = getPreparedStatementSetDeleted(sd);
			pstmtSetUpdatedRejected = getPreparedStatementSetUpdatedRejected(sd);
			pstmtSetUpdatedNotRejected = getPreparedStatementSetUpdatedNotRejected(sd);
			pstmtEvents = getPreparedStatementEvents(sd);
			
			String sqlUpdateId = "update tasks set update_id = ? "
					+ "where id = ? "
					+ "and update_id is null";
			pstmtUpdateId = sd.prepareStatement(sqlUpdateId);
			
			sd.setAutoCommit(false);
			for(TaskResponseAssignment ta : tr.taskAssignments) {
				
				if(ta.task != null && ta.task.type != null && ta.task.type.equals("case")) {
					if(ta.assignment.assignment_status != null && ta.assignment.assignment_status.equals("rejected")) {
						String tableName = GeneralUtilityMethods.getMainResultsTableSurveyIdent(sd, cResults, ta.task.form_id);
						GeneralUtilityMethods.assignRecord(sd, cResults, localisation, tableName, ta.task.update_id, request.getRemoteUser(), "release", null, ta.assignment.task_comment);
					}	
				} else if(ta.assignment.assignment_id > 0) {
					log.info("Task Assignment: " + ta.assignment.assignment_status);

					if(ta.task == null) {
						ta.task = new TrTask();
						ta.task.id = GeneralUtilityMethods.getTaskId(sd, ta.assignment.assignment_id);
					}
					updateAssignment(
							sd,
							cResults,
							localisation, 
							pstmtSetDeleted, 
							pstmtSetUpdatedRejected,
							pstmtSetUpdatedNotRejected,
							pstmtEvents,
							gson,
							userName,
							ta.task.id,
							ta.assignment.assignment_id,
							ta.assignment.assignment_status,
							ta.assignment.task_comment);
					
					pstmtUpdateId.setString(1, ta.assignment.uuid);
					pstmtUpdateId.setInt(2, ta.task.id);
					log.info("+++++++++++++++ Updating task updateId: " + pstmtUpdateId.toString());
					pstmtUpdateId.executeUpdate();	

				} else {
					log.info("Error: assignment id is zero");
				}
			}

			int userId = GeneralUtilityMethods.getUserId(sd, userName);
			
			/*
			 * Record task information for any submitted tasks
			 */
			if(tr.taskCompletionInfo != null) {
				String sqlTasks = "insert into task_completion (" +
						"u_id, " +
						"device_id, " +
						"form_ident, " +
						"form_version, " +
						"uuid,"	+
						"the_geom," +		// keep this
						"completion_time" +
						") " +
						"values(?, ?, ?, ?, ?, ST_GeomFromText(?, 4326), ?)";
				pstmtTasks = sd.prepareStatement(sqlTasks);
				
				pstmtTasks.setInt(1, userId);
				pstmtTasks.setString(2, tr.deviceId);
				for(TaskCompletionInfo tci : tr.taskCompletionInfo) {

					pstmtTasks.setString(3, tci.ident);
					pstmtTasks.setInt(4, tci.version);
					pstmtTasks.setString(5, tci.uuid);
					pstmtTasks.setString(6, "POINT(" + tci.lon + " " + tci.lat + ")");
					pstmtTasks.setTimestamp(7, new Timestamp(tci.actFinish));

					log.info("Insert task: " + pstmtTasks.toString());
					pstmtTasks.executeUpdate();
									
				}

				/*
				 * Record user trail information
				 */
				UserLocationManager ulm = new UserLocationManager(localisation, "UTC");
				ulm.recordUserTrail(sd, userId, tr.deviceId, tr.userTrail);

			}

			if(!sd.getAutoCommit()) {
				sd.commit();
			}
			
			response = Response.ok().build();
			log.info("Assignments updated");	

		} catch (Exception e) {		
			response = Response.serverError().build();
			log.log(Level.SEVERE,"Exception", e);
			try { sd.rollback();} catch (Exception ex){log.log(Level.SEVERE,"", ex);}
		} finally {

			try {
				if(!sd.getAutoCommit()) {
					sd.setAutoCommit(true);
				}
			} catch(Exception e) {
				
			}
			
			try {if ( pstmtSetDeleted != null ) { pstmtSetDeleted.close(); }} catch (Exception e) {}
			try {if ( pstmtSetUpdatedRejected != null ) { pstmtSetUpdatedRejected.close(); }} catch (Exception e) {}
			try {if ( pstmtSetUpdatedNotRejected != null ) { pstmtSetUpdatedNotRejected.close(); }} catch (Exception e) {}
			try {if ( pstmtTasks != null ) { pstmtTasks.close(); }} catch (Exception e) {}
			try {if ( pstmtEvents != null ) { pstmtEvents.close(); }} catch (Exception e) {}
			try {if ( pstmtUpdateId != null ) { pstmtUpdateId.close(); }} catch (Exception e) {}
			try {if ( pstmtUnassignedRejected != null ) { pstmtUnassignedRejected.close(); }} catch (Exception e) {}

			SDDataSource.closeConnection(connectionString, sd);
			ResultsDataSource.closeConnection(connectionString, cResults);
		}

		return response;
	}