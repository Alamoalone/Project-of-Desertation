  public List<QuantityList> referencedClassIdentifierGenerator(
      final List<EventIdentifierTracker> parentTracker) {
    // Create a List to store all the values associated with the event
    final List<QuantityList> quantityList = new ArrayList<>();

    // Loop through all the referenceIdentifiers and get the matching identifiers based on
    // IdentifiersList and Reference Identifiers
    for (ReferencedIdentifier quantity : typeInfo.getReferencedIdentifier()) {

      // If the EventNode is directly connected to the IdentifiersNode then create the class
      // identifiers based on the provided identifiers info
      if (quantity.getIdentifierId() != 0) {

        // Get the matching identifiers from the IdentifiersList based on the Identifiers present in
        // the ReferencedIdentifier
        var matchedClassIdentifier =
            identifiers.stream()
                .filter(identifier -> identifier.getIdentifierId() == quantity.getIdentifierId())
                .findFirst()
                .orElse(null);

        // If the matching identifier is found then create the respective Class Identifiers and
        // append it to the list created above
        if (matchedClassIdentifier != null && matchedClassIdentifier.getClassData() != null) {

          // Append all Class Identifiers values onto the Instance-Identifiers List
          quantityList.addAll(
              matchedClassIdentifier
                  .getClassData()
                  .format(
                      matchedClassIdentifier.getObjectIdentifierSyntax(),
                      quantity.getClassCount(),
                      quantity.getQuantity()));
        }
      } else if (quantity.getParentNodeId() != 0) {
        // If referenced identifier contains the parent node id then obtain the identifiers from its
        // parent event and add it

        // Obtain the matching parentTracker from the List of Tracker and if present based on it get
        // the Class identifiers from parent node and append to current event based on the Class
        // count
        parentTracker.stream()
            .filter(i -> i.getEventTypeInfo().getNodeId() == quantity.getParentNodeId())
            .findFirst()
            .ifPresent(
                t ->
                    quantityList.addAll(
                        EventModelUtil.classIdentifiers(
                            t, quantity.getClassCount(), quantity.getQuantity())));
      }
    }

    // If user is importing the existing events and if it contains class identifiers then add them
    // to the event
    Optional.ofNullable(typeInfo.getQuantityList()).ifPresent(quantityList::addAll);

    return quantityList;
  }