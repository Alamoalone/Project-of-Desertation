    public synchronized void processTimeAdvanceGrant(long time) throws InternalFederateException {

        // Process the time advance only if the time is equal or greater than the next
        // simulation time step
        if (time < currentSimulationTime) {
            return;
        }
        log.info("Infrastructure message ambassador processing timestep to {}.", time);
        try {

            // Handle any new infrastructure registration requests
            List<InfrastructureRegistrationMessage> newRegistrations = infrastructureRegistrationReceiver
                    .getReceivedMessages();
            for (InfrastructureRegistrationMessage reg : newRegistrations) {
                log.info("Processing new registration request for " + reg.getInfrastructureId());
                // Store new instance registration to infrastructure instance manager
                infrastructureInstanceManager.onNewRegistration(reg);
                // Process registration requests for RSUs and DSRCs
                onRsuRegistrationRequest(reg.getInfrastructureId(), reg.getLocation().toGeo());
                log.info("RSU Registration for "+ reg.getInfrastructureId() + " @ x, y, z: (" + reg.getLocation().getX() + ", " + reg.getLocation().getY() + ", " + reg.getLocation().getZ() + ")");
                onDsrcRegistrationRequest(reg.getInfrastructureId());
                // Check for empty list of sensors which is valid
                if (reg.getSensors() != null ) {
                    log.debug("Sending SensorRegistration interactions for sensor : {}", reg.getSensors());
                }
                for (Detector sensor : reg.getSensors()) {
                    // Trigger Sensor registrations for all listed sensors.
                    this.rti.triggerInteraction(new DetectorRegistration(time,sensor));
                }
            }

            if (currentSimulationTime == 0) {
                // For the first timestep, clear the message receive queues.
                v2xMessageReceiver.getReceivedMessages(); // Automatically empties the queues.
            } else {
                List<Tuple<InetAddress, CarmaV2xMessage>> newMessages = v2xMessageReceiver.getReceivedMessages();
                for (Tuple<InetAddress, CarmaV2xMessage> msg : newMessages) {
                    log.info("Processing new V2X transmit event of type {}.", msg.getB().getType());
                    V2xMessageTransmission msgInt = infrastructureInstanceManager.onV2XMessageTx(msg.getA(), msg.getB(), currentSimulationTime);
                    SimulationKernel.SimulationKernel.getV2xMessageCache().putItem(currentSimulationTime, msgInt.getMessage());
                    log.info("Inserted message ID {} into v2xmessage cache.", msgInt.getMessageId());
                    this.rti.triggerInteraction(msgInt);
                }
            }

            timeSyncSeq += 1;
            InfrastructureTimeMessage timeSyncMessage = new InfrastructureTimeMessage();
            timeSyncMessage.setSeq(timeSyncSeq);
            // nanoseconds to milliseconds for InfrastructureTimeMessage
            timeSyncMessage.setTimestep(currentSimulationTime/1000000);
            infrastructureInstanceManager.onTimeStepUpdate(timeSyncMessage);

            // TODO: Handle any queued V2X message receiver's received messages

            // Advance the simulation time
            currentSimulationTime += infrastructureConfiguration.updateInterval * TIME.MILLI_SECOND;

            // Request the next time advance from the RTI
            log.info("Requesting timestep updated to  {}.", currentSimulationTime);
            rti.requestAdvanceTime(currentSimulationTime, 0, (byte) 2);
        } catch (IllegalValueException e) {
            throw new InternalFederateException(e);
        } catch (IOException e1) {
            log.error("Error during updating timestep :", e1);
        }
    }