	public Map<ObjectId, Map<String, List<LocalDateTime>>> getMinimumClosedDateFromConfiguration(
			Map<ObjectId, Set<String>> duplicateIssues, Map<ObjectId, List<String>> customFieldMapping) {
		Map<ObjectId, Map<String, List<LocalDateTime>>> pair = new HashMap<>();
		Map<String, List<String>> mapOfFilters = new LinkedHashMap<>();
		mapOfFilters.put(JiraFeatureHistory.STORY_ID.getFieldValueInFeature(),
				duplicateIssues.values().stream().flatMap(Collection::stream).collect(Collectors.toList()));
		mapOfFilters.put(JiraFeatureHistory.BASIC_PROJECT_CONFIG_ID.getFieldValueInFeature(),
				duplicateIssues.keySet().stream().map(ObjectId::toString).collect(Collectors.toList()));
		List<JiraIssueCustomHistory> jiraIssueCustomHistoryList = jiraIssueCustomHistoryRepository
				.findByFilterAndFromStatusMap(mapOfFilters, new HashMap<>());

		duplicateIssues.forEach((objectId, issues) -> {
			List<String> customFields = customFieldMapping.getOrDefault(objectId, Collections.emptyList());
			if (!customFields.isEmpty()) {
				Map<String, List<LocalDateTime>> issueWiseMinDateTime = new HashMap<>();
				for (String issue : issues) {
					List<JiraHistoryChangeLog> statusUpdationLog = jiraIssueCustomHistoryList.stream()
							.filter(history -> history.getStoryID().equalsIgnoreCase(issue)
									&& objectId.toString().equalsIgnoreCase(history.getBasicProjectConfigId()))
							.flatMap(history -> history.getStatusUpdationLog().stream())
							.sorted(Comparator.comparing(JiraHistoryChangeLog::getUpdatedOn))
							.collect(Collectors.toList());

					if (!statusUpdationLog.isEmpty()) {
						Map<String, LocalDateTime> minimumCompletedStatusWiseMap = new HashMap<>();
						List<LocalDateTime> minimumDate = new ArrayList<>();

						for (JiraHistoryChangeLog log : statusUpdationLog) {
							String changedTo = log.getChangedTo();
							if (customFields.contains(changedTo)) {
								LocalDateTime updatedOn = log.getUpdatedOn();
								minimumCompletedStatusWiseMap.putIfAbsent(changedTo, updatedOn);
							} else if (!minimumCompletedStatusWiseMap.isEmpty()) {
								LocalDateTime minDate = minimumCompletedStatusWiseMap.values().stream()
										.min(LocalDateTime::compareTo).orElse(null);
								if (minDate != null) {
									minimumDate.add(minDate);
									minimumCompletedStatusWiseMap.clear();
								}
							}
						}

						//if some status is lifet in the last cycle then that has to added in the minimum set
						if (MapUtils.isNotEmpty(minimumCompletedStatusWiseMap)) {
							LocalDateTime minDate = minimumCompletedStatusWiseMap.values().stream()
									.min(LocalDateTime::compareTo).orElse(null);
							if (minDate != null) {
								minimumDate.add(minDate);
								minimumCompletedStatusWiseMap.clear();
							}
						}
						issueWiseMinDateTime.put(issue, minimumDate);
					}
				}
				pair.put(objectId, issueWiseMinDateTime);
			}
		});
		return pair;
	}

	public Map<String, Object> fetchSprintVelocityDataFromDb(KpiRequest kpiRequest,
			Map<ObjectId, List<String>> projectWiseSprintsForFilter, List<SprintDetails> sprintDetails) {

		Map<String, List<String>> mapOfFilters = new LinkedHashMap<>();
		Map<String, Object> resultListMap = new HashMap<>();

		List<String> sprintList = new ArrayList<>();
		Set<String> basicProjectConfigIds = new HashSet<>();

		projectWiseSprintsForFilter.entrySet().forEach(entry -> {
			ObjectId basicProjectConfigId = entry.getKey();

			sprintList.addAll(entry.getValue());
			basicProjectConfigIds.add(basicProjectConfigId.toString());

		});

		List<String> totalIssueIds = new ArrayList<>();
		if (CollectionUtils.isNotEmpty(sprintDetails)) {
			Map<ObjectId, List<SprintDetails>> projectWiseTotalSprintDetails = sprintDetails.stream()
					.collect(Collectors.groupingBy(SprintDetails::getBasicProjectConfigId));

			Map<ObjectId, Set<String>> duplicateIssues = getProjectWiseDuplicateIssueInSprintDetails(
					projectWiseTotalSprintDetails);
			Map<ObjectId, Map<String, List<LocalDateTime>>> projectWiseDuplicateIssuesWithMinCloseDate = null;
			Map<ObjectId, FieldMapping> fieldMappingMap = configHelperService.getFieldMappingMap();

			if (MapUtils.isNotEmpty(fieldMappingMap) && !duplicateIssues.isEmpty()) {
				Map<ObjectId, List<String>> customFieldMapping = duplicateIssues.keySet().stream()
						.filter(fieldMappingMap::containsKey).collect(Collectors.toMap(Function.identity(), key -> {
							FieldMapping fieldMapping = fieldMappingMap.get(key);
							return Optional.ofNullable(fieldMapping)
									.map(FieldMapping::getJiraIterationCompletionStatusKpi39)
									.orElse(Collections.emptyList());
						}));
				projectWiseDuplicateIssuesWithMinCloseDate = getMinimumClosedDateFromConfiguration(duplicateIssues,
						customFieldMapping);
			}

			Map<ObjectId, Map<String, List<LocalDateTime>>> finalProjectWiseDuplicateIssuesWithMinCloseDate = projectWiseDuplicateIssuesWithMinCloseDate;
			sprintDetails.stream().forEach(dbSprintDetail -> {
				FieldMapping fieldMapping = fieldMappingMap
						.get(dbSprintDetail.getBasicProjectConfigId());
				// to modify sprintdetails on the basis of configuration for the project
				SprintDetails sprintDetail=KpiDataHelper.processSprintBasedOnFieldMappings(Collections.singletonList(dbSprintDetail),
						new ArrayList<>(),
						fieldMapping.getJiraIterationCompletionStatusKpi39(), finalProjectWiseDuplicateIssuesWithMinCloseDate).get(0);
				if (CollectionUtils.isNotEmpty(sprintDetail.getCompletedIssues())) {
					List<String> sprintWiseIssueIds = KpiDataHelper
							.getIssuesIdListBasedOnTypeFromSprintDetails(sprintDetail, CommonConstant.COMPLETED_ISSUES);
					totalIssueIds.addAll(sprintWiseIssueIds);
				}
			});
			mapOfFilters.put(JiraFeature.ISSUE_NUMBER.getFieldValueInFeature(),
					totalIssueIds.stream().distinct().collect(Collectors.toList()));
		}

		/** additional filter **/
		KpiDataHelper.createAdditionalFilterMap(kpiRequest, mapOfFilters, Constant.SCRUM, DEV, flterHelperService);

		mapOfFilters.put(JiraFeature.BASIC_PROJECT_CONFIG_ID.getFieldValueInFeature(),
				basicProjectConfigIds.stream().distinct().collect(Collectors.toList()));

		if (CollectionUtils.isNotEmpty(totalIssueIds)) {
			List<JiraIssue> sprintVelocityList = jiraIssueRepository.findIssuesBySprintAndType(mapOfFilters,
					new HashMap<>());

			resultListMap.put(SPRINTVELOCITYKEY, sprintVelocityList);
			resultListMap.put(SPRINT_WISE_SPRINTDETAILS, sprintDetails);

		}

		return resultListMap;
	}

