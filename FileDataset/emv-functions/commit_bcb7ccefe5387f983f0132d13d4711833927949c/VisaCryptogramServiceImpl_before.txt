    protected CryptogramResponse buildResponseObjectFromDomain(String arqc) {
        CryptogramResponse cryptogramResponse = new CryptogramResponse();
        cryptogramResponse.setRequestCryptogram(arqc);
        // Log domain response object
        debugLog(cryptogramResponse);
        return cryptogramResponse;
    }

    public CryptogramResponse getApplicationCryptogram(GenerateApplicationCryptogramCommand command) {
        final String CVN_NAME = "CVN";
        final String CVR_NAME = "CVR";
        // Log command object
        debugLog(command);
        // Map command to domain
        CryptogramRequest cryptogramRequest = commandToDomainMapper.mapGenerateACCommandToDomain(command);
        // Log domain request object
        debugLog(cryptogramRequest);
        // Parse IAD
        VisaIADParser visaIADParser = new VisaIADParser(cryptogramRequest.getIssuerApplicationData());
        Map<String, String> parsedVisaIad =  visaIADParser.parseIad();
        log.debug("Parsed IAD ----> {}.", parsedVisaIad);
        // Set Cryptogram Version Number
        CryptogramVersionNumber cryptogramVersionNumber = CryptogramVersionNumber.valueOf(parsedVisaIad.get(CVN_NAME));
        String cardVerificationResults = parsedVisaIad.get(CVR_NAME);
        // Extract to a method which will throw runtime exception for unsupported CVN
        //IADStaticData visaIADParser = new IADStaticData(cryptogramRequest.getIssuerApplicationData()).parseIad();
        // Generate UDK
        String uniqueDerivationKey = getUniqueDerivationKey(cryptogramRequest.getIssuerMasterKey(), cryptogramRequest.getPan(),
                cryptogramRequest.getPanSequenceNumber(), cryptogramVersionNumber);
        // Generate SK
        String sessionKey = getSessionKey(uniqueDerivationKey, cryptogramRequest.getApplicationTransactionCounter(),
                cryptogramVersionNumber);
        return buildResponseObjectFromDomain(generateCryptogram(cryptogramRequest, sessionKey, cryptogramVersionNumber, cardVerificationResults));
    }

    protected String generateCryptogram(CryptogramRequest cryptogramRequest, String sessionKey,
                                        CryptogramVersionNumber cryptogramVersionNumber,
                                        String cardVerificationResults) {
        VisaApplicationCryptogramGenerator visaApplicationCryptogramGenerator = new VisaApplicationCryptogramGenerator();
        return visaApplicationCryptogramGenerator.generateVisaApplicationCryptogram(cryptogramRequest, sessionKey,
                cryptogramVersionNumber, cardVerificationResults);
    }



    protected String getUniqueDerivationKey(String issuerMasterKey, String pan, String panSequenceNumber,
                                            CryptogramVersionNumber cryptogramVersionNumber) {
        EMVUniqueDerivationKeyDerivator emvUdkDerivator = new EMVUniqueDerivationKeyDerivator(issuerMasterKey, pan,
                panSequenceNumber, PaymentScheme.VISA, cryptogramVersionNumber, EMVUDKDerivationMethod.METHOD_A);
        // The UDK derivation must be enhanced for CVN 22, as CVN 22 uses METHOD_B.

        return emvUdkDerivator.generateUniqueDerivationKey();
    }

    protected String getSessionKey(String uniqueDerivationKey, String applicationTransactionCounter,
                                   CryptogramVersionNumber cryptogramVersionNumber) {
        EMVSessionKeyDerivator emvSessionKeyDerivator = new EMVSessionKeyDerivator(uniqueDerivationKey,
                applicationTransactionCounter, cryptogramVersionNumber);
        return emvSessionKeyDerivator.generateSessionKey();
    }

    protected void debugLog(Object object) {
        if (log.isDebugEnabled()){
            log.debug("Logging object of '" + object.getClass() + "'");
            log.debug("Data: {}", object);
        }
    }

