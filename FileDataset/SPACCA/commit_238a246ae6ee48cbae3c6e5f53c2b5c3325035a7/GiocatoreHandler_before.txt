    public void modifica(String oldGiocatore, Object newObject) {
        Giocatore newGiocatore = (Giocatore) newObject;
        // Percorso del file JSON dell'oldGiocatore
        String path = "src/main/resources/com/spacca/database/giocatori/user-" + oldGiocatore + ".json";

        // se è stato modificato lo username creo il nuovo file ed elimino il vecchio
        if (!oldGiocatore.equals(newGiocatore.getUsername())) {
            salva(newGiocatore, newGiocatore.getUsername());
            elimina(oldGiocatore);
        } else { // se non è stato modificato lo username ricarico il file
            try {
                Path playerFilePath = Paths.get(path);
                // Leggi il contenuto del file JSON e deserializza in un oggetto Giocatore
                Gson gson = new Gson();

                // Sovrascrivi il contenuto del file JSON con il nuovo JSON
                String updatedJsonContent = gson.toJson(newGiocatore);
                Files.write(playerFilePath, updatedJsonContent.getBytes());
            } catch (IOException e) {
                System.err.println("File non trovato " + e);
            } catch (Exception e) {
                System.err.println("Eccezione nella modifica del giocatore handler " + e);
                e.printStackTrace();

            }
        }
    }

    public boolean elimina(String username) {
        String path = "src/main/resources/com/spacca/database/giocatori/user-" + username + ".json";

        File file = new File(path);

        Giocatore giocatoreEliminato = (Giocatore) this.carica(username);

        List<String> listaCodici = giocatoreEliminato.getListaCodiciPartite();

        if (file.exists() && file.isFile()) {
            if (file.delete()) {

                for (String codice : listaCodici) {
                    Handler handlerPartita = new PartitaHandler();
                    // carico la partita con il codice presente nella lista per eliminare il
                    // giocatore
                    Partita partita = (Partita) handlerPartita.carica(codice);
                    // rimuovo il giocatore nella lista dei giocatori della partita
                    int posizioneVecchioUtente = partita.getListaDeiGiocatori().indexOf(username);

                    // creo un nuovo giocatore stupido e lo sostituisco con un giocatore robot
                    // stupido
                    GiocatoreHandler handlerGiocatore = new GiocatoreHandler();
                    String usernameStupid = "RS-" + username;
                    AbstractGiocatore giocatoreSostituto = new StupidCPU(usernameStupid);

                    partita.getListaDeiGiocatori().set(posizioneVecchioUtente, usernameStupid);
                    // salvo su file il nuovo giocatore stupido
                    handlerGiocatore.salva(giocatoreSostituto, usernameStupid);

                    // salvo la partita modificata
                    handlerPartita.salva(partita, codice);
                }
                return true;
            } else {
                System.err.println("Errore durante l'eliminazione del giocatore  " + username);
            }
        } else {
            System.err.println("Il giocatore con username " + username + " non esiste o non è un file.");
        }
        return false;
    }

