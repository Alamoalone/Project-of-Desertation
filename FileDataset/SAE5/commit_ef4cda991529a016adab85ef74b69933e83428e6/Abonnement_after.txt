	static void create(Abonnement abonnement) {
		if (!Main.sql.createPrepareStatement(TABLE_NAME, dbFields,
						new Object[]{abonnement.client.id, abonnement.panier.id, abonnement.debut, abonnement.fin, abonnement.estActif,
										abonnement.frequenceLivraison}))
			Logger.error("Can't create abonnement");
		abonnement.updateLivraison();
		getFromDatabase();
	}

	void updateLivraison() {
		long frequence = (long) frequenceLivraison * 24 * 60 * 60 * 1000;
		Date[] datesLivraison = new Date[(int) ((fin.getTime()-debut.getTime()) / frequence + 1)];
		Date date = debut;
		for (int i = 0; i < datesLivraison.length; i++) {
			datesLivraison[i] = date;
			date = new Date(date.getTime() + (long) frequenceLivraison * 24 * 60 * 60 * 1000);
		}
		// delete old livraisons
		for (Livraison livraison : Livraison.livraisons) {
			if (livraison.abonnement == this &&
							(livraison.date.before(new Date(System.currentTimeMillis())) &&
											(!livraison.etat.equals("livre") && (!livraison.etat.equals("en cours")))))
				livraison.delete();
		}
		for (Date dateLivraison : datesLivraison) {
			if (dateLivraison.before(new Date(System.currentTimeMillis()))) continue;
			Livraison livraison = new Livraison(null, null, this, dateLivraison, "En attente");
			Livraison.create(livraison);
		}
	}

