    public void checkObjects(float deltaTime) {
        for (Laser laser : lasers) {
            laser.setScale(3);
            laser.draw(batch);
            Rectangle laserHitBox = laser.getHitbox();
            laser.update(deltaTime, WORLD_WIDTH, WORLD_HEIGHT, laser.getDespawnCounter(), laser.getShip());
            laser.updateHitBox(laser);

            for (CpuShip cpuShip : cpuShips) {
                Rectangle shipHitBox = cpuShip.getHitbox();

                if (laserHitBox.overlaps(shipHitBox) && laser.getShip().getFaction() != cpuShip.getFaction()) {
                    Vector2 position = new Vector2(laser.getX(), laser.getY() - 64);
                    Explosion.explode(camera, explosionTexture1, 0.7f, position, 30, explosions, explosionSound1, 300, 10);
                    cpuShip.setInactive(cpuShip);
                    laser.setInactive(laser);

                    if (showHitBoxes) {
                        cpuShip.getShapeRenderer().setProjectionMatrix(camera.combined);
                        cpuShip.drawBoundingBox();
                    }
                }
                cpuShip.setActionState(Ship.ActionState.ATTACK, cpuShip.getActionState());

            }


            for (PlayerShip playerShip : playerShips) {
                Rectangle shipHitBox = playerShip.getHitbox();

                if (laserHitBox.overlaps(shipHitBox) && laser.getShip().getFaction() != playerShip.getFaction()) {
                    Vector2 position = new Vector2(laser.getX(), laser.getY() - 64);
                    Explosion.explode(camera, explosionTexture1, 0.7f, position, 30, explosions, explosionSound1, 300, 10);
                    playerShip.setInactive(playerShip);
                    laser.setInactive(laser);

                    if (showHitBoxes) {
                        playerShip.getShapeRenderer().setProjectionMatrix(camera.combined);
                        playerShip.drawBoundingBox();
                    }
                }
            }

        }


        for (PlayerShip playerShip : playerShips) {
            playerShip.draw(batch);
            playerShip.update(deltaTime, playerShip, WORLD_WIDTH, WORLD_HEIGHT);
            playerShip.handleActionState(playerShip, greenLaserTexture, blueLaserTexture, redLaserTexture, lasers, laserBlast2);
            camera.position.x = playerShip.getX() + 64;
            camera.position.y = playerShip.getY() + 64;
        }

        for (CpuShip cpuShip : cpuShips) {
            cpuShip.draw(batch);
            cpuShip.update(deltaTime, cpuShip, WORLD_WIDTH, WORLD_HEIGHT);
            cpuShip.handleActionState(cpuShip, greenLaserTexture, blueLaserTexture, redLaserTexture, lasers, laserBlast2);

            for (Ship target : cpuShip.getTargets()) {
                if (!target.isActive()) {
                    cpuShip.getTargets().remove(target);
                    System.out.println("TARGET REMOVED");
                }
            }

            for (PlayerShip playerShip : playerShips) {
                cpuShip.detectTargets(playerShip, cpuShip.getTargets());
            }

            for (CpuShip cpuShip2 : copiedSet) {
                cpuShip.detectTargets(cpuShip2, cpuShip.getTargets());
            }

        }





        for (Explosion explosion : explosions) {
            explosion.draw(batch);
            explosion.update(deltaTime);
        }

    }

    private void handleInput() {

        float cameraSpeed = camera.zoom * 2048;

        //System.out.println("Zoom: "+camera.zoom);

        // Rotate the sprite with left arrow key
        if (InputManager.isAPressed()) {
            for (Ship ship : playerShips) {
                ship.rotate(+0.3f);
            }
        }

        // Rotate the sprite with right arrow key
        if (InputManager.isDPressed()) {
            for (Ship ship : playerShips) {
                ship.rotate(-0.3f);
            }
        }

        // Shoot lasers
        if (InputManager.isSpacePressed()) {
            if (!laserSpawnTimeout) {
                for (Ship ship : playerShips) {

                    Laser laser = ship.fireLaser(blueLaserTexture, ship);
                    laser.setShip(ship);
                    lasers.add(laser);

                    laserBlast2.play(2.0f);
                    laserSpawnTimeout = true;
                    laserSpawnCounter = 0;


                }
            }
        }
//attack player
        if (InputManager.isRightMousePressed()) {
            for (CpuShip cpuShip : cpuShips) {

                cpuShip.setActionState(Ship.ActionState.ATTACK, cpuShip.getActionState());

            }

        }

        if (shipSpawnTimeout) {
            if (shipSpawnCounter >= 90) {

                shipSpawnTimeout = false;
            } else {
                shipSpawnCounter++;
            }
        }
// For player ship only during runtime. CpuShip laser timing is handled differently.
        if (laserSpawnTimeout) {
            if (laserSpawnCounter >= 200) {

                laserSpawnTimeout = false;
            } else {
                laserSpawnCounter++;
            }
        }

        int actionCounter = 0;

        if (InputManager.isLeftMousePressed()) {
            if (!shipSpawnTimeout) {
                Vector2 position = new Vector2(camera.position.x, camera.position.y);
                CpuShip.ActionState actionState = Ship.ActionState.IDLE;
                Rectangle hitBox = new Rectangle();
                ObjectSet<Ship> targets = new ObjectSet<>();
                CpuShip cpuShip = new CpuShip(greenShipTexture, position, 400f, actionState, Ship.ActionState.IDLE, hitBox, actionCounter, Ship.Faction.TEAL, targets);
                cpuShip.setPosition(position.x, position.y);
                cpuShip.setScale(shipScale);
                cpuShips.add(cpuShip);
                copiedSet.add(cpuShip);


                shipSpawnTimeout = true;
                shipSpawnCounter = 0;
            }
        }


        float speedLimit = 500f;
        // Speed up.
        if (InputManager.isWPressed()) {

            for (PlayerShip playerShip : playerShips) {

                if (playerShip.getSpeed() < speedLimit && playerShip.getSpeed() >= 0) {
                    playerShip.setSpeed(playerShip.getSpeed() + 1);
                }

            }
        }

        // Slow down.
        if (InputManager.isSPressed()) {
            for (PlayerShip playerShip : playerShips) {
                if (playerShip.getSpeed() <= speedLimit && playerShip.getSpeed() > 0) {
                    playerShip.setSpeed(playerShip.getSpeed() - 1);
                }
            }
        }

        if (InputManager.isEscPressed()) {
            Gdx.app.exit();
        }

        if (InputManager.isLeftPressed()) {
            camera.translate(-cameraSpeed * Gdx.graphics.getDeltaTime(), 0);
        }
        if (InputManager.isRightPressed()) {
            camera.translate(cameraSpeed * Gdx.graphics.getDeltaTime(), 0);
        }
        if (InputManager.isUpPressed()) {
            camera.translate(0, cameraSpeed * Gdx.graphics.getDeltaTime());
        }
        if (InputManager.isDownPressed()) {
            camera.translate(0, -cameraSpeed * Gdx.graphics.getDeltaTime());

            if (!shipSpawnTimeout) {
                Vector2 position = new Vector2(camera.position.x, camera.position.y);
                CpuShip.ActionState actionState = Ship.ActionState.FIRE;
                Rectangle hitBox = new Rectangle();
                ObjectSet<Ship> targets = new ObjectSet<>();
                CpuShip cpuShip = new CpuShip(otherShipTexture, position, 400f, actionState, Ship.ActionState.IDLE, hitBox, actionCounter, Ship.Faction.PURPLE, targets);
                cpuShip.setPosition(position.x, position.y);
                cpuShip.setScale(shipScale);
                cpuShips.add(cpuShip);


                shipSpawnTimeout = true;
                shipSpawnCounter = 0;
            }

        }

        if (InputManager.isQPressed()) {
            zoomIn();
        }

        if (InputManager.isEPressed()) {
            zoomOut();
        }

    }

