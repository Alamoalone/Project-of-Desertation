    public String getModifyForm( HttpServletRequest request ) throws AccessDeniedException
    {
        int nId = NumberUtils.toInt( request.getParameter( FormsConstants.PARAMETER_ID_FORM ), FormsConstants.DEFAULT_ID_VALUE );

        if ( nId == FormsConstants.DEFAULT_ID_VALUE )
        {
            return redirectView( request, VIEW_MANAGE_FORMS );
        }

        checkUserPermission( Form.RESOURCE_TYPE, String.valueOf( nId ), FormsResourceIdService.PERMISSION_MODIFY_PARAMS, request, null );
        checkWorkgroupPermission(nId, request);

        Form formToBeModified = FormHome.findByPrimaryKey( nId );

        if ( formToBeModified != null )
        {
            _uploadHandler.removeSessionFiles( request.getSession( ) );
            setFormResponseMessage( formToBeModified.getId( ) );

            AdminUser adminUser = getUser( );
            ReferenceList formCategoryList = _formCategoryService.getFormCategoryReferenceList( );

            Map<String, Object> model = getModel( );
            model.put( MARK_FORM, formToBeModified );
            model.put( MARK_FORM_MESSAGE, _formMessage );
            model.put( MARK_LOCALE, request.getLocale( ).getLanguage( ) );
            model.put( MARK_WEBAPP_URL, AppPathService.getBaseUrl( request ) );
            model.put( MARK_UPLOAD_HANDLER, _uploadHandler );
            model.put( MARK_FORM_CATEGORY_LIST, formCategoryList );

            if ( formToBeModified.getLogo( ) != null )
            {
                File logo = FileHome.findByPrimaryKey( formToBeModified.getLogo( ).getIdFile( ) );
                if (logo != null && logo.getPhysicalFile( ) != null)
                {
                	PhysicalFile physicalFile = PhysicalFileHome.findByPrimaryKey( logo.getPhysicalFile( ).getIdPhysicalFile( ) );
                	if (physicalFile != null)
                	{
                		FileItem fileItem = new GenAttFileItem( physicalFile.getValue( ), logo.getTitle( ) );
                        _uploadHandler.addFileItemToUploadedFilesList( fileItem, PARAMETER_LOGO, request );
                	}
                }
            }

            if ( WorkflowService.getInstance( ).isAvailable( ) )
            {
                ReferenceList referenceList = WorkflowService.getInstance( ).getWorkflowsEnabled( (User) adminUser, getLocale( ) );
                model.put( MARK_WORKFLOW_REF_LIST, referenceList );
            }
            
            ReferenceList workGroupReferenceList = AdminWorkgroupService.getUserWorkgroups(getUser(), getLocale());
            model.put( MARK_WORKGROUP_REF_LIST, workGroupReferenceList );
            model.put(FormsConstants.MARK_DEFAULT_VALUE_WORKGROUP_KEY, AdminWorkgroupService.ALL_GROUPS);

            if ( AccessControlService.getInstance( ).isAvailable( ) )
            {
                ReferenceList referenceList = AccessControlService.getInstance( ).getAccessControlsEnabled( adminUser, getLocale( ) );
                model.put( MARK_ACCESSCONTROL_REF_LIST, referenceList );
                model.put( MARK_ACCESSCONTROL_ID,
                        AccessControlService.getInstance( ).findAccessControlForResource( formToBeModified.getId( ), Form.RESOURCE_TYPE ) );
            }

            model.put( MARK_BREADCRUMB_TYPE, BreadcrumbManager.getRefListBreadcrumb( ) );
            model.put( MARK_IS_ACTIVE_CAPTCHA, _captchaSecurityService.isAvailable( ) );
            model.put( SecurityTokenService.MARK_TOKEN, SecurityTokenService.getInstance( ).getToken( request, ACTION_MODIFY_FORM ) );

            ExtendableResourcePluginActionManager.fillModel( request, getUser( ), model, "*", FormResponse.RESOURCE_TYPE + "_" + nId );

            return getPage( PROPERTY_PAGE_TITLE_MODIFY_FORM, TEMPLATE_MODIFY_FORM, model );
        }

        return redirectView( request, VIEW_MANAGE_FORMS );
    }

