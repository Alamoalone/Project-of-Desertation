  public void testRemoveAll() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    NamespaceId namespaceId = new NamespaceId("account1");
    ApplicationId appId = namespaceId.app("application1");
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    Assert.assertNotNull(store.getApplication(appId));

    // removing everything
    store.removeAll(namespaceId);

    Assert.assertNull(store.getApplication(appId));
  }

  public void testUpdateChangedApplication() throws ConflictException {
    ApplicationId id = new ApplicationId("account1", "application1");
    ApplicationMeta appMeta = new ApplicationMeta("application1", Specifications.from(new FooApp()),
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(id, appMeta);
    // update
    ApplicationMeta appMetaUpdate = new ApplicationMeta("application1", Specifications.from(new ChangedFooApp()),
                                                        new ChangeDetail(null, null, null,
                                                                         System.currentTimeMillis()));
    store.addApplication(id, appMetaUpdate);

    ApplicationSpecification spec = store.getApplication(id);
    Assert.assertNotNull(spec);
    Assert.assertEquals(FooMapReduceJob.class.getName(), spec.getMapReduce().get("mrJob3").getClassName());
  }

  public void testWorkerInstances() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AppWithWorker());
    ApplicationId appId = NamespaceId.DEFAULT.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    ProgramId programId = appId.worker(AppWithWorker.WORKER);
    int instancesFromSpec = spec.getWorkers().get(AppWithWorker.WORKER).getInstances();
    Assert.assertEquals(1, instancesFromSpec);
    int instances = store.getWorkerInstances(programId);
    Assert.assertEquals(instancesFromSpec, instances);

    store.setWorkerInstances(programId, 9);
    instances = store.getWorkerInstances(programId);
    Assert.assertEquals(9, instances);
  }

  public void testServiceDeletion() throws ConflictException {
    // Store the application specification
    AbstractApplication app = new AppWithServices();

    ApplicationSpecification appSpec = Specifications.from(app);
    ApplicationId appId = NamespaceId.DEFAULT.app(appSpec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(appSpec.getName(), appSpec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    AbstractApplication newApp = new AppWithNoServices();

    // get the delete program specs after deploying AppWithNoServices
    List<ProgramSpecification> programSpecs = store.getDeletedProgramSpecifications(appId.getAppReference(),
                                                                                    Specifications.from(newApp));

    //verify the result.
    Assert.assertEquals(1, programSpecs.size());
    Assert.assertEquals("NoOpService", programSpecs.get(0).getName());
  }

  public void testHistoryDeletion() throws ConflictException {

    // Deploy two apps, write some history for programs
    // Remove application using accountId, AppId and verify
    // Remove all from accountId and verify
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    NamespaceId namespaceId = new NamespaceId("testDeleteAll");
    ApplicationId appId1 = namespaceId.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId1, appMeta);

    spec = Specifications.from(new AppWithServices());
    ApplicationId appId2 = namespaceId.app(spec.getName());
    appMeta = new ApplicationMeta(spec.getName(), spec,
                                  new ChangeDetail(null, null, null,
                                                   System.currentTimeMillis()));
    store.addApplication(appId2, appMeta);

    ArtifactId artifactId = appId1.getNamespaceId().artifact("testArtifact", "1.0").toApiArtifactId();

    Assert.assertNotNull(store.getApplication(appId1));
    Assert.assertNotNull(store.getApplication(appId2));

    long now = System.currentTimeMillis();
    ProgramId mapreduceProgramId1 = appId1.mr("NoOpMR");
    ProgramId workflowProgramId1 = appId1.workflow("NoOpWorkflow");

    ProgramRunId mapreduceProgramRunId1 = mapreduceProgramId1.run(RunIds.generate(now - 1000));
    setStartAndRunning(mapreduceProgramRunId1, artifactId);
    store.setStop(mapreduceProgramRunId1, now, ProgramController.State.COMPLETED.getRunStatus(),
                  AppFabricTestHelper.createSourceId(++sourceId));

    RunId runId = RunIds.generate(now - 1000);
    setStartAndRunning(workflowProgramId1.run(runId.getId()), artifactId);
    store.setStop(workflowProgramId1.run(runId.getId()), now, ProgramController.State.COMPLETED.getRunStatus(),
                  AppFabricTestHelper.createSourceId(++sourceId));

    ProgramId serviceId = appId2.service(AppWithServices.SERVICE_NAME);
    ProgramRunId serviceRunId = serviceId.run(RunIds.generate(now - 1000));
    setStartAndRunning(serviceRunId, artifactId);
    store.setStop(serviceRunId, now, ProgramController.State.COMPLETED.getRunStatus(),
                  AppFabricTestHelper.createSourceId(++sourceId));

    verifyRunHistory(mapreduceProgramId1, 1);
    verifyRunHistory(workflowProgramId1, 1);

    verifyRunHistory(serviceId, 1);

    // removing application
    store.removeApplication(appId1);

    Assert.assertNull(store.getApplication(appId1));
    Assert.assertNotNull(store.getApplication(appId2));

    verifyRunHistory(mapreduceProgramId1, 0);
    verifyRunHistory(workflowProgramId1, 0);

    // Check to see if the history of second app is not deleted
    verifyRunHistory(serviceId, 1);

    // remove all
    store.removeAll(namespaceId);

    verifyRunHistory(serviceId, 0);
  }

  public void testRunsLimit() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    ApplicationId appId = new ApplicationId("testRunsLimit", spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    ProgramId mapreduceProgramId = new ApplicationId("testRunsLimit", spec.getName())
      .mr(AllProgramsApp.NoOpMR.class.getSimpleName());
    ArtifactId artifactId = appId.getNamespaceId().artifact("testArtifact", "1.0").toApiArtifactId();

    Assert.assertNotNull(store.getApplication(appId));

    long now = System.currentTimeMillis();
    ProgramRunId programRunId = mapreduceProgramId.run(RunIds.generate(now - 3000));
    setStartAndRunning(programRunId, artifactId);
    store.setStop(programRunId, now - 100, ProgramController.State.COMPLETED.getRunStatus(),
                  AppFabricTestHelper.createSourceId(++sourceId));

    setStartAndRunning(mapreduceProgramId.run(RunIds.generate(now - 2000)), artifactId);

    // even though there's two separate run records (one that's complete and one that's active), only one should be
    // returned by the query, because the limit parameter of 1 is being passed in.
    Map<ProgramRunId, RunRecordDetail> historymap = store.getRuns(mapreduceProgramId, ProgramRunStatus.ALL,
                                                                  0, Long.MAX_VALUE, 1);
    Assert.assertEquals(1, historymap.size());
  }

  public void testServiceInstances() throws ConflictException {
    ApplicationSpecification appSpec = Specifications.from(new AppWithServices());
    ApplicationId appId = NamespaceId.DEFAULT.app(appSpec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(appSpec.getName(), appSpec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    // Test setting of service instances
    ProgramId programId = appId.program(ProgramType.SERVICE, "NoOpService");
    int count = store.getServiceInstances(programId);
    Assert.assertEquals(1, count);

    store.setServiceInstances(programId, 10);
    count = store.getServiceInstances(programId);
    Assert.assertEquals(10, count);

    ApplicationSpecification newSpec = store.getApplication(appId);
    Assert.assertNotNull(newSpec);
    Map<String, ServiceSpecification> services = newSpec.getServices();
    Assert.assertEquals(1, services.size());

    ServiceSpecification serviceSpec = services.get("NoOpService");
    Assert.assertEquals(10, serviceSpec.getInstances());
  }

  public void testMarkApplicationsLatestWithExistingLatest()
      throws ApplicationNotFoundException, ConflictException, IOException {
    long creationTime = System.currentTimeMillis();
    long v2CreationTime = creationTime + 1000;
    String appName = "testAppWithVersion";
    String oldVersion = "old-version";
    String newVersion = "new-version";

    // Add an application as latest
    ApplicationId appIdV1 = new ApplicationId("account1", appName, oldVersion);
    ApplicationMeta appMetaV1 = new ApplicationMeta(appName, Specifications.from(new FooApp(), appName, oldVersion),
        new ChangeDetail(null, null, null, creationTime));
    store.addApplication(appIdV1, appMetaV1);

    // Add a new version of the application without marking latest
    ApplicationId appIdV2 = new ApplicationId("account1", appName, newVersion);
    ApplicationMeta appMetaV2 = new ApplicationMeta(appName, Specifications.from(new FooApp(), appName, newVersion),
        new ChangeDetail(null, null, null, v2CreationTime), null, false);
    store.addApplication(appIdV2, appMetaV2);

    // Now mark the new version as latest
    store.markApplicationsLatest(Collections.singletonList(appIdV2));

    ApplicationMeta storedMetaV1 = store.getApplicationMetadata(appIdV1);
    Assert.assertEquals(appName, storedMetaV1.getId());
    Assert.assertEquals(oldVersion, storedMetaV1.getSpec().getAppVersion());
    Assert.assertEquals(creationTime, storedMetaV1.getChange().getCreationTimeMillis());
    Assert.assertFalse(storedMetaV1.getIsLatest());

    ApplicationMeta storedMetaV2 = store.getApplicationMetadata(appIdV2);
    Assert.assertEquals(appName, storedMetaV2.getId());
    Assert.assertEquals(newVersion, storedMetaV2.getSpec().getAppVersion());
    Assert.assertEquals(v2CreationTime, storedMetaV2.getChange().getCreationTimeMillis());
    Assert.assertTrue(storedMetaV2.getIsLatest());
  }

  public void testUpdateApplicationScmMetaWithNonExistingAppIds()
      throws IOException, ConflictException {
    // Add an application with a scm meta field
    ApplicationId appId = new ApplicationId("account1", "application1");
    ApplicationMeta appMeta = new ApplicationMeta("application1", Specifications.from(new FooApp()),
        new ChangeDetail(null, null, null,
            System.currentTimeMillis()), new SourceControlMeta("initial-file-hash"));

    store.addApplication(appId, appMeta);
    // The following appId is not added to the store
    ApplicationId appId2 = new ApplicationId("account1", "application2");

    Map<ApplicationId, SourceControlMeta> updateRequests = new HashMap<>();
    updateRequests.put(appId, new SourceControlMeta("updated-file-hash"));
    updateRequests.put(appId2, new SourceControlMeta("updated-file-hash-2"));
    store.updateApplicationSourceControlMeta(updateRequests);

    ApplicationMeta storedMeta = store.getApplicationMetadata(appId);
    Assert.assertNotNull(storedMeta);
    Assert.assertNotNull(storedMeta.getSourceControlMeta());
    Assert.assertEquals("updated-file-hash", storedMeta.getSourceControlMeta().getFileHash());
  }

  public void testListRunsWithLegacyRows() throws ConflictException {
    String appName = "application1";
    ApplicationId appId = NamespaceId.DEFAULT.app(appName);
    ArtifactId artifactId = NamespaceId.DEFAULT.artifact("testArtifact", "1.0").toApiArtifactId();
    ApplicationSpecification spec = createDummyAppSpec(appId.getApplication(), appId.getVersion(), artifactId);
    ApplicationMeta appMeta = new ApplicationMeta(appId.getApplication(), spec, null);
    List<ApplicationId> expectedApps = new ArrayList<>();

    // Insert a row that is null for changeDetail
    store.addApplication(appId, appMeta);
    expectedApps.add(appId);

    ApplicationId newVersionAppId = appId.getAppReference().app("new_version");
    spec = createDummyAppSpec(newVersionAppId.getApplication(), newVersionAppId.getVersion(), artifactId);
    long currentTime = System.currentTimeMillis();

    ApplicationMeta newAppMeta = new ApplicationMeta(newVersionAppId.getApplication(), spec,
                                                     new ChangeDetail(null, null,
                                                                      null, currentTime));
    // Insert a second version
    store.addApplication(newVersionAppId, newAppMeta);
    expectedApps.add(newVersionAppId);

    // Insert a third version
    ApplicationId anotherVersionAppId = appId.getAppReference().app("another_version");
    spec = createDummyAppSpec(anotherVersionAppId.getApplication(), anotherVersionAppId.getVersion(), artifactId);
    ApplicationMeta anotherAppMeta = new ApplicationMeta(anotherVersionAppId.getApplication(), spec,
                                                         new ChangeDetail(null, null,
                                                                          null, currentTime + 1000));
    store.addApplication(anotherVersionAppId, anotherAppMeta);
    expectedApps.add(anotherVersionAppId);

    // Reverse it because we want DESC order
    Collections.reverse(expectedApps);

    List<ApplicationId> actualApps = new ArrayList<>();
    List<Long> creationTimes = new ArrayList<>();
    AtomicInteger latestVersionCount = new AtomicInteger();
    AtomicReference<ApplicationId> latestAppId = new AtomicReference<>();

    ScanApplicationsRequest request = ScanApplicationsRequest.builder()
      .setNamespaceId(NamespaceId.DEFAULT)
      .setSortOrder(SortOrder.DESC)
      .setSortCreationTime(true)
      .setLimit(10)
      .build();

    Assert.assertFalse(store.scanApplications(request, 20, (id, appSpec) -> {
      actualApps.add(id);
      creationTimes.add(appSpec.getChange().getCreationTimeMillis());
      if (Boolean.TRUE.equals(appSpec.getChange().getLatest())) {
        latestVersionCount.getAndIncrement();
        latestAppId.set(id);
      }
    }));

    Assert.assertEquals(expectedApps, actualApps);
    Assert.assertEquals(creationTimes.size(), 3);
    Assert.assertEquals(creationTimes.get(1) - 1000, (long) creationTimes.get(2));
    Assert.assertEquals(latestVersionCount.get(), 1);
    Assert.assertEquals(latestAppId.get(), actualApps.get(0));
  }

  public void testAddApplication() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new FooApp());
    ApplicationId appId = new ApplicationId("account1", "application1");
    ApplicationMeta appMeta = new ApplicationMeta("application1", spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    spec = store.getApplication(appId);
    Assert.assertNotNull(spec);
    Assert.assertEquals(FooMapReduceJob.class.getName(), spec.getMapReduce().get("mrJob1").getClassName());
  }

  public void testUpdateApplicationScmMeta()
      throws IOException, ConflictException {
    // Add an application with a scm meta field
    ApplicationId appId = new ApplicationId("account1", "application1");
    ApplicationMeta appMeta = new ApplicationMeta("application1", Specifications.from(new FooApp()),
        new ChangeDetail(null, null, null,
            System.currentTimeMillis()), null);

    store.addApplication(appId, appMeta);
    Map<ApplicationId, SourceControlMeta> updateRequests = new HashMap<>();
    updateRequests.put(appId, new SourceControlMeta("updated-file-hash"));
    store.updateApplicationSourceControlMeta(updateRequests);

    ApplicationMeta storedMeta = store.getApplicationMetadata(appId);
    Assert.assertNotNull(storedMeta);
    Assert.assertNotNull(storedMeta.getSourceControlMeta());
    Assert.assertEquals("updated-file-hash", storedMeta.getSourceControlMeta().getFileHash());
  }

  protected void testScanApplications(Store store) throws ConflictException {
    ApplicationSpecification appSpec = Specifications.from(new AllProgramsApp());

    int count = 100;
    for (int i = 0; i < count; i++) {
      String appName = "test" + i;
      ApplicationMeta appMeta = new ApplicationMeta(appName, appSpec,
                                                    new ChangeDetail(null, null, null,
                                                                     System.currentTimeMillis()));
      store.addApplication(new ApplicationId(NamespaceId.DEFAULT.getNamespace(), appName), appMeta);
    }

    // Mimicking editing the first count / 2 apps
    for (int i = 0; i < count / 2; i++) {
      String appName = "test" + i;
      String version = "version" + i;
      ApplicationMeta appMeta = new ApplicationMeta(appName, appSpec,
          new ChangeDetail("edited" + i, null, null,
              System.currentTimeMillis()));
      store.addApplication(new ApplicationId(NamespaceId.DEFAULT.getNamespace(), appName, version), appMeta);
    }

    List<ApplicationId> allAppsVersion = new ArrayList<>();
    store.scanApplications(ScanApplicationsRequest.builder().build(),
        20, (appId, spec) -> allAppsVersion.add(appId));

    Assert.assertEquals(count + count / 2, allAppsVersion.size());

    List<ApplicationId> latestApps = new ArrayList<>();
    store.scanApplications(20, (appId, spec) -> latestApps.add(appId));

    Assert.assertEquals(count, latestApps.size());

    //Reverse
    List<ApplicationId> reverseApps = new ArrayList<>();
    Assert.assertFalse(store.scanApplications(ScanApplicationsRequest.builder()
        .setSortOrder(SortOrder.DESC)
        .setLatestOnly(true)
        .build(), 20, (appId, spec) -> reverseApps.add(appId)));
    Assert.assertEquals(Lists.reverse(latestApps), reverseApps);

    //Second page
    int firstPageSize = 10;
    List<ApplicationId> restartApps = new ArrayList<>();
    Assert.assertFalse(store.scanApplications(ScanApplicationsRequest.builder()
        .setScanFrom(latestApps.get(firstPageSize - 1)).setLatestOnly(true)
        .build(), 20, (appId, spec) -> restartApps.add(appId)));
    Assert.assertEquals(latestApps.subList(firstPageSize, latestApps.size()), restartApps);
  }

  public void testAddApplicationWithoutMarkingLatest()
      throws ConflictException {
    long creationTime = System.currentTimeMillis();
    ApplicationId appId = new ApplicationId("account1", "app1");
    ApplicationMeta appMeta = new ApplicationMeta("app1", Specifications.from(new FooApp()),
        new ChangeDetail(null, null, null, creationTime), null, false);
    store.addApplication(appId, appMeta);

    ApplicationMeta storedMeta = store.getApplicationMetadata(appId);
    Assert.assertEquals("app1", storedMeta.getId());
    Assert.assertEquals(creationTime, storedMeta.getChange().getCreationTimeMillis());
    Assert.assertFalse(storedMeta.getIsLatest());
  }

  public void testStateRemovedOnRemoveAll() throws ApplicationNotFoundException, ConflictException {
    String stateKey = "kafka";
    byte[] stateValue = ("{\n"
        + "\"offset\" : 12345\n"
        + "}").getBytes(StandardCharsets.UTF_8);
    String appName = "application1";

    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    NamespaceId namespaceId = new NamespaceId("account1");
    ApplicationId appId = namespaceId.app(appName);
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);
    store.saveState(new AppStateKeyValue(namespaceId, appName, stateKey, stateValue));

    Assert.assertNotNull(store.getApplication(appId));
    AppStateKey appStateRequest = new AppStateKey(namespaceId, appName, stateKey);
    Assert.assertNotNull(store.getState(appStateRequest));

    // removing everything should work successfully
    store.removeAll(namespaceId);

    Assert.assertNull(store.getApplication(appId));
  }

  public void testCheckDeletedWorkflow() throws ConflictException {
    //Deploy program with all types of programs.
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    ApplicationId appId = NamespaceId.DEFAULT.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    Set<String> specsToBeDeleted = Sets.newHashSet();
    specsToBeDeleted.addAll(spec.getWorkflows().keySet());

    Assert.assertEquals(1, specsToBeDeleted.size());

    //Get the spec for app that contains only flow and mapreduce - removing workflows.
    spec = Specifications.from(new DefaultStoreTestApp());

    //Get the deleted program specs by sending a spec with same name as AllProgramsApp but with no programs
    List<ProgramSpecification> deletedSpecs = store.getDeletedProgramSpecifications(appId.getAppReference(), spec);
    Assert.assertEquals(2, deletedSpecs.size());

    for (ProgramSpecification specification : deletedSpecs) {
      //Remove the spec that is verified, to check the count later.
      specsToBeDeleted.remove(specification.getName());
    }

    //2 specs should have been deleted and 0 should be remaining.
    Assert.assertEquals(0, specsToBeDeleted.size());
  }

  public void testRemoveApplication() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    NamespaceId namespaceId = new NamespaceId("account1");
    ApplicationId appId = namespaceId.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    Assert.assertNotNull(store.getApplication(appId));

    // removing application
    store.removeApplication(appId);

    Assert.assertNull(store.getApplication(appId));
  }

  public void testLoadingProgram() throws Exception {
    ApplicationSpecification appSpec = Specifications.from(new FooApp());
    ApplicationId appId = NamespaceId.DEFAULT.app(appSpec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(appSpec.getName(), appSpec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    ProgramDescriptor descriptor = store.loadProgram(appId.mr("mrJob1"));
    Assert.assertNotNull(descriptor);
    MapReduceSpecification mrSpec = descriptor.getSpecification();
    Assert.assertEquals("mrJob1", mrSpec.getName());
    Assert.assertEquals(FooMapReduceJob.class.getName(), mrSpec.getClassName());
  }

  public void testStateRemovedOnRemoveApplication() throws ApplicationNotFoundException, ConflictException {
    String stateKey = "kafka";
    byte[] stateValue = ("{\n"
        + "\"offset\" : 12345\n"
        + "}").getBytes(StandardCharsets.UTF_8);

    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    NamespaceId namespaceId = new NamespaceId("account1");
    ApplicationId appId = namespaceId.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);
    store.saveState(new AppStateKeyValue(namespaceId, spec.getName(), stateKey, stateValue));

    Assert.assertNotNull(store.getApplication(appId));
    AppStateKey appStateRequest = new AppStateKey(namespaceId, spec.getName(), stateKey);
    Assert.assertNotNull(store.getState(appStateRequest));

    // removing application should work successfully
    store.removeApplication(appId);

    Assert.assertNull(store.getApplication(appId));
  }

  public void testProgramRunCount() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    ApplicationId appId = NamespaceId.DEFAULT.app(spec.getName());
    ArtifactId testArtifact = NamespaceId.DEFAULT.artifact("testArtifact", "1.0").toApiArtifactId();
    ProgramId workflowId = appId.workflow(AllProgramsApp.NoOpWorkflow.NAME);
    ProgramId serviceId = appId.service(AllProgramsApp.NoOpService.NAME);
    ProgramId nonExistingAppProgramId = NamespaceId.DEFAULT.app("nonExisting").workflow("test");
    ProgramId nonExistingProgramId = appId.workflow("nonExisting");

    // add the application
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    // add some run records to workflow and service
    for (int i = 0; i < 5; i++) {
      setStart(workflowId.run(RunIds.generate()), Collections.emptyMap(), Collections.emptyMap(), testArtifact);
      setStart(serviceId.run(RunIds.generate()), Collections.emptyMap(), Collections.emptyMap(), testArtifact);
    }

    List<RunCountResult> result =
      store.getProgramTotalRunCounts(ImmutableList.of(workflowId.getProgramReference(),
                                                 serviceId.getProgramReference(),
                                                 nonExistingAppProgramId.getProgramReference(),
                                                 nonExistingProgramId.getProgramReference()));

    // compare the result
    Assert.assertEquals(4, result.size());
    for (RunCountResult runCountResult : result) {
      ProgramReference programReference = runCountResult.getProgramReference();
      Long count = runCountResult.getCount();
      if (programReference.equals(nonExistingAppProgramId.getProgramReference())
          || programReference.equals(nonExistingProgramId.getProgramReference())) {
        Assert.assertNull(count);
        Assert.assertTrue(runCountResult.getException() instanceof NotFoundException);
      } else {
        Assert.assertNotNull(count);
        Assert.assertEquals(5L, count.longValue());
      }
    }

    // remove the app should remove all run count
    store.removeApplication(appId);
    for (RunCountResult runCountResult :
      store.getProgramTotalRunCounts(ImmutableList.of(workflowId.getProgramReference(),
                                                      serviceId.getProgramReference()))) {
      Assert.assertNull(runCountResult.getCount());
      Assert.assertTrue(runCountResult.getException() instanceof NotFoundException);
    }
  }

  public void testCheckDeletedProgramSpecs() throws ConflictException {
    //Deploy program with all types of programs.
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    ApplicationId appId = NamespaceId.DEFAULT.app(spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    Set<String> specsToBeVerified = Sets.newHashSet();
    specsToBeVerified.addAll(spec.getMapReduce().keySet());
    specsToBeVerified.addAll(spec.getWorkflows().keySet());
    specsToBeVerified.addAll(spec.getServices().keySet());
    specsToBeVerified.addAll(spec.getWorkers().keySet());
    specsToBeVerified.addAll(spec.getSpark().keySet());

    //Verify if there are 6 program specs in AllProgramsApp
    Assert.assertEquals(6, specsToBeVerified.size());

    // Check the diff with the same app - re-deployment scenario where programs are not removed.
    List<ProgramSpecification> deletedSpecs = store.getDeletedProgramSpecifications(appId.getAppReference(), spec);
    Assert.assertEquals(0, deletedSpecs.size());

    //Get the spec for app that contains no programs.
    spec = Specifications.from(new NoProgramsApp());

    //Get the deleted program specs by sending a spec with same name as AllProgramsApp but with no programs
    deletedSpecs = store.getDeletedProgramSpecifications(appId.getAppReference(), spec);
    Assert.assertEquals(6, deletedSpecs.size());

    for (ProgramSpecification specification : deletedSpecs) {
      //Remove the spec that is verified, to check the count later.
      specsToBeVerified.remove(specification.getName());
    }

    //All the 6 specs should have been deleted.
    Assert.assertEquals(0, specsToBeVerified.size());
  }

  public void testScanApplicationsWithNamespace(Store store) throws ConflictException {
    ApplicationSpecification appSpec = Specifications.from(new AllProgramsApp());

    int count = 100;
    for (int i = 0; i < count / 2; i++) {
      String appName = "test" + (2 * i);
      ApplicationMeta appMeta = new ApplicationMeta(appName, appSpec,
                                                    new ChangeDetail(null, null, null,
                                                                     System.currentTimeMillis()));
      store.addApplication(new ApplicationId(NamespaceId.DEFAULT.getNamespace(), appName), appMeta);
      appName = "test" + (2 * i + 1);
      store.addApplication(new ApplicationId(NamespaceId.CDAP.getNamespace(), appName), appMeta);
    }

    List<ApplicationId> apps = new ArrayList<ApplicationId>();

    ScanApplicationsRequest request = ScanApplicationsRequest.builder()
      .setNamespaceId(NamespaceId.CDAP).build();

    Assert.assertFalse(store.scanApplications(request, 20, (appId, spec) -> {
      apps.add(appId);
    }));

    Assert.assertEquals(count / 2, apps.size());

    //Reverse
    List<ApplicationId> reverseApps = new ArrayList<>();
    request = ScanApplicationsRequest.builder()
      .setNamespaceId(NamespaceId.CDAP)
      .setSortOrder(SortOrder.DESC)
      .build();
    Assert.assertFalse(store.scanApplications(request, 20, (appId, spec) -> reverseApps.add(appId)));
    Assert.assertEquals(Lists.reverse(apps), reverseApps);

    int firstPageSize = 10;
    //First page - DESC
    {
      List<ApplicationId> firstPageApps = new ArrayList<>();
      request = ScanApplicationsRequest.builder()
        .setNamespaceId(NamespaceId.CDAP)
        .setSortOrder(SortOrder.DESC)
        .setLimit(firstPageSize)
        .build();
      Assert.assertTrue(store.scanApplications(request, 20, (appId, spec) -> firstPageApps.add(appId)));
      Assert.assertEquals(Lists.reverse(apps).subList(0, firstPageSize), firstPageApps);
    }

    //First page - ASC
    {
      List<ApplicationId> firstPageApps = new ArrayList<>();
      request = ScanApplicationsRequest.builder()
        .setNamespaceId(NamespaceId.CDAP)
        .setLimit(firstPageSize)
        .build();
      Assert.assertTrue(store.scanApplications(request, 20, (appId, spec) -> firstPageApps.add(appId)));
      Assert.assertEquals(apps.subList(0, firstPageSize), firstPageApps);
    }

    //Remaining items
    List<ApplicationId> restartApps = new ArrayList<>();
    request = ScanApplicationsRequest.builder()
      .setNamespaceId(NamespaceId.CDAP)
      .setScanFrom(apps.get(firstPageSize - 1))
      .build();
    Assert.assertFalse(store.scanApplications(request, 20, (appId, spec) -> restartApps.add(appId)));
    Assert.assertEquals(apps.subList(firstPageSize, apps.size()), restartApps);
  }

  public void testRuntimeArgsDeletion() throws ConflictException {
    ApplicationSpecification spec = Specifications.from(new AllProgramsApp());
    ApplicationId appId = new ApplicationId("testDeleteRuntimeArgs", spec.getName());
    ApplicationMeta appMeta = new ApplicationMeta(spec.getName(), spec,
                                                  new ChangeDetail(null, null, null,
                                                                   System.currentTimeMillis()));
    store.addApplication(appId, appMeta);

    Assert.assertNotNull(store.getApplication(appId));

    ProgramId mapreduceProgramId = appId.mr("NoOpMR");
    ProgramId workflowProgramId = appId.workflow("NoOpWorkflow");

    long nowMillis = System.currentTimeMillis();
    String mapreduceRunId = RunIds.generate(nowMillis).getId();
    String workflowRunId = RunIds.generate(nowMillis).getId();

    ArtifactId artifactId = appId.getNamespaceId().artifact("testArtifact", "1.0").toApiArtifactId();

    setStartAndRunning(mapreduceProgramId.run(mapreduceRunId),
                       ImmutableMap.of("path", "/data"), new HashMap<>(), artifactId);
    setStartAndRunning(workflowProgramId.run(workflowRunId),
                       ImmutableMap.of("whitelist", "cask"), new HashMap<>(), artifactId);

    ProgramRunId mapreduceProgramRunId = mapreduceProgramId.run(mapreduceRunId);
    ProgramRunId workflowProgramRunId = workflowProgramId.run(workflowRunId);

    Map<String, String> args = store.getRuntimeArguments(mapreduceProgramRunId);
    Assert.assertEquals(1, args.size());
    Assert.assertEquals("/data", args.get("path"));

    args = store.getRuntimeArguments(workflowProgramRunId);
    Assert.assertEquals(1, args.size());
    Assert.assertEquals("cask", args.get("whitelist"));

    // removing application
    store.removeApplication(appId);

    //Check if args are deleted.
    args = store.getRuntimeArguments(mapreduceProgramRunId);
    Assert.assertEquals(0, args.size());

    args = store.getRuntimeArguments(workflowProgramRunId);
    Assert.assertEquals(0, args.size());
  }

  public void testMarkApplicationsLatestWithNewApps()
      throws ApplicationNotFoundException, ConflictException, IOException {
    long creationTime = System.currentTimeMillis();
    // Add 2 new applications without marking them latest
    ApplicationId appId1 = new ApplicationId("account1", "newApp1");
    ApplicationMeta appMeta1 = new ApplicationMeta("newApp1", Specifications.from(new FooApp()),
        new ChangeDetail(null, null, null, creationTime), null, false);
    store.addApplication(appId1, appMeta1);

    ApplicationId appId2 = new ApplicationId("account1", "newApp2");
    ApplicationMeta appMeta2 = new ApplicationMeta("newApp2", Specifications.from(new FooApp()),
        new ChangeDetail(null, null, null, creationTime), null, false);
    store.addApplication(appId2, appMeta2);

    // Now mark them as latest in bulk
    store.markApplicationsLatest(Arrays.asList(appId1, appId2));

    ApplicationMeta storedMeta1 = store.getApplicationMetadata(appId1);
    Assert.assertEquals("newApp1", storedMeta1.getId());
    Assert.assertEquals(creationTime, storedMeta1.getChange().getCreationTimeMillis());
    Assert.assertTrue(storedMeta1.getIsLatest());

    ApplicationMeta storedMeta2 = store.getApplicationMetadata(appId2);
    Assert.assertEquals("newApp2", storedMeta2.getId());
    Assert.assertEquals(creationTime, storedMeta2.getChange().getCreationTimeMillis());
    Assert.assertTrue(storedMeta2.getIsLatest());
  }

