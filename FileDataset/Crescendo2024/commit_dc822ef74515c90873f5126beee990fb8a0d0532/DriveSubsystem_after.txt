  private void setModuleStates(SwerveModuleState[] desiredStates) {
    SwerveDriveKinematics.desaturateWheelSpeeds(desiredStates, DriveConstants.kMaxSpeedMetersPerSecond);

    m_frontLeft.setDesiredState(desiredStates[0]);
    m_frontRight.setDesiredState(desiredStates[1]);
    m_rearLeft.setDesiredState(desiredStates[2]);
    m_rearRight.setDesiredState(desiredStates[3]);

    // AdvantageScope Logging
    double[] logData = {
        desiredStates[0].angle.getDegrees(), desiredStates[0].speedMetersPerSecond,
        desiredStates[1].angle.getDegrees(), desiredStates[1].speedMetersPerSecond,
        desiredStates[2].angle.getDegrees(), desiredStates[2].speedMetersPerSecond,
        desiredStates[3].angle.getDegrees(), desiredStates[3].speedMetersPerSecond,
    };
    SmartDashboard.putNumberArray("AdvantageScope Swerve Desired States", logData);

    // Takes the integral of the rotation speed to find the current angle for the
    // simulator
    m_gyroAngle += DriveConstants.kDriveKinematics.toChassisSpeeds(desiredStates).omegaRadiansPerSecond
        * Robot.kDefaultPeriod;
  }

  public void periodic() {
    // This method will be called once per scheduler run

    m_swerveModulePositions = new SwerveModulePosition[] {
        m_frontLeft.getPosition(),
        m_frontRight.getPosition(),
        m_rearLeft.getPosition(),
        m_rearRight.getPosition()
    };

    m_poseEstimator.update(Robot.isReal() ? m_gyro.getRotation2d() : new Rotation2d(m_gyroAngle),
        m_swerveModulePositions);

    m_field.setRobotPose(m_poseEstimator.getEstimatedPosition());

    SmartDashboard.putNumber("gyro angle", m_gyro.getAngle());
    SmartDashboard.putNumber("odometryX", m_poseEstimator.getEstimatedPosition().getX());
    SmartDashboard.putNumber("odometryY", m_poseEstimator.getEstimatedPosition().getY());

    // AdvantageScope Logging
    double[] logData = {
        m_frontLeft.getPosition().angle.getDegrees(), m_frontLeft.driveOutput,
        m_frontRight.getPosition().angle.getDegrees(), m_frontRight.driveOutput,
        m_rearLeft.getPosition().angle.getDegrees(), m_rearLeft.driveOutput,
        m_rearRight.getPosition().angle.getDegrees(), m_rearRight.driveOutput,
    };
    SmartDashboard.putNumberArray("AdvantageScope Swerve States", logData);

    setModuleStates(swerveModuleStates);
  }



  public void addVisionMeasurement(Measurement measurement) {
    m_poseEstimator.addVisionMeasurement(measurement.pose.toPose2d(), measurement.timestamp);
  }

