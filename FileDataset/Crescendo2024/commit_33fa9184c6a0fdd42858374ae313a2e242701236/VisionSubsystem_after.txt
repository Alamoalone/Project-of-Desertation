  public void periodic() {
    // This method will be called once per scheduler run

    Measurement latestMeasurement = getMeasurement();

    if (latestMeasurement != null) {
      for (Consumer<Measurement> consumer : m_consumerList) {
        consumer.accept(latestMeasurement);
      }
    }

    SmartDashboard.putBoolean("Limelight Has Target", m_tv.get() == 1);
  }

  public Measurement getMeasurement() {
    TimestampedDoubleArray[] updates = m_botPose.readQueue();

    // If we have had no updates since the last time this method ran then return
    // nothing
    if (updates.length == 0) {
      return null;
    }

    TimestampedDoubleArray update = updates[updates.length - 1];

    // If the latest update is empty or we don't see an april tag then return
    // nothing
    if (Arrays.equals(update.value, new double[6]) || m_tv.get() == 0) {
      return null;
    }

    double x = update.value[0];
    double y = update.value[1];
    double z = update.value[2];
    double roll = Units.degreesToRadians(update.value[3]);
    double pitch = Units.degreesToRadians(update.value[4]);
    double yaw = Units.degreesToRadians(update.value[5]);

    double timestamp = Timer.getFPGATimestamp() - (update.value[6] / 1000.0);
    Pose3d pose = new Pose3d(new Translation3d(x, y, z), new Rotation3d(roll, pitch, yaw));

    return new Measurement(
        timestamp,
        pose,
        VisionConstants.kVisionSTDDevs);
  }

  public void addConsumer(Consumer<Measurement> consumer) {
    m_consumerList.add(consumer);
  }

