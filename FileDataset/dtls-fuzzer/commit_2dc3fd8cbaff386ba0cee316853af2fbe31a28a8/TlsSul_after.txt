    private AbstractOutput doStep(TlsInput in) {
        context.addStepContext();
        Mapper executor = in.getPreferredMapper(delegate);
        if (executor == null) {
            executor = defaultExecutor;
        }

        if (server && !receivedClientHello) {
            receiveClientHello();
        }

        if (!context.isExecutionEnabled()) {
            return outputMapper.disabled();
        }

        AbstractOutput output = null;
        try {
            if (state == null) {
                throw new RuntimeException("TLS-Attacker state is not initialized");
            } else {
                TransportHandler transportHandler = state.getTlsContext().getTransportHandler();
                if (transportHandler == null || transportHandler.isClosed() || closed) {
                    closed = true;
                    return outputMapper.socketClosed();
                }
            }

            output = executeInput(in, executor, role);

            if (output == AbstractOutput.disabled() || context.getStepContext().isDisabled()) {
                // this should lead to a disabled sink state
                context.disableExecution();
            }

            if (state.getTlsContext().isReceivedTransportHandlerException()) {
                closed = true;
            }
            return output;
        } catch (IOException e) {
            e.printStackTrace();
            closed = true;
            return outputMapper.socketClosed();
        }
    }

    public void post() {
        try {
            if (server && !receivedClientHello) {
                receiveClientHello();
            }
            TransportHandler transportHandler = state.getTlsContext().getTransportHandler();
            if (transportHandler == null) {
                LOGGER.error("Transport handler is null");
            } else {
                transportHandler.closeConnection();
                if (resetWait > 0) {
                    Thread.sleep(resetWait);
                }
            }
        } catch (IOException e) {
            LOGGER.error("Could not close connections");
            LOGGER.error(e, null);
        } catch (InterruptedException e) {
            LOGGER.error("Could not sleep thread");
            LOGGER.error(e, null);
        }
    }

