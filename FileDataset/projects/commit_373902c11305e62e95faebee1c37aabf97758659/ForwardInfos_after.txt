    private static ExecOperationNode procOperands(OperationNode _anaNode, Forwards _forwards) {
        if (_anaNode instanceof SettableAbstractFieldOperation) {
            return procUseField((SettableAbstractFieldOperation) _anaNode, _forwards);
        }
        if (_anaNode instanceof ArrayFieldOperation) {
            ArrayFieldOperation s_ = (ArrayFieldOperation) _anaNode;
            return new ExecArrayFieldOperation(new ExecOperationContent(s_.getContent()), new ExecFieldOperationContent(s_.getFieldContent()));
        }
        if (_anaNode instanceof VariableOperation) {
            VariableOperation m_ = (VariableOperation) _anaNode;
            return new ExecStdRefVariableOperation(new ExecOperationContent(m_.getContent()), new ExecVariableContent(m_.getVariableContent()),m_.getType() == ConstType.REF_LOC_VAR);
        }
        if (_anaNode instanceof VariableOperationUse) {
            VariableOperationUse m_ = (VariableOperationUse) _anaNode;
            return new ExecStdRefVariableOperation(new ExecOperationContent(m_.getContent()), new ExecVariableContent(m_.getVariableContent()));
        }
        if (_anaNode instanceof FinalVariableOperation) {
            return finalVariable((FinalVariableOperation) _anaNode);
        }
        if (_anaNode instanceof DotOperation) {
            DotOperation m_ = (DotOperation) _anaNode;
            return new ExecDotOperation(new ExecOperationContent(m_.getContent()));
        }
        if (_anaNode instanceof SafeDotOperation) {
            SafeDotOperation m_ = (SafeDotOperation) _anaNode;
            StringList names_ = _anaNode.getResultClass().getNames();
            return new ExecSafeDotOperation(new ExecOperationContent(m_.getContent()), names_);
        }
        if (_anaNode instanceof ExplicitOperatorOperation) {
            return explicitOperator(_anaNode, _forwards);
        }
        if (_anaNode instanceof SemiAffectationOperation) {
            ExecCompoundAffectationOperation c_ = semi((SemiAffectationOperation) _anaNode, _forwards);
            return updateConv(_forwards, c_, (SemiAffectationOperation) _anaNode);
        }
        if (_anaNode instanceof SymbolOperation) {
            SymbolOperation n_ = (SymbolOperation) _anaNode;
            ClassMethodIdMemberIdTypeFct fct_ = n_.getFct();
            AnaTypeFct pair_ = fct_.getFunction();
            if (pair_ != null) {
                return new ExecExplicitOperatorOperation(new ExecOperationContent(_anaNode.getContent()),false, new ExecStaticFctContent(new ExecStaticFctCommonContent("","",-1), new ExecStaticEltContent(fct_, _forwards)), FetchMemberUtil.fetchFunctionOpPair(fct_, _forwards), new ExecArrContent(false), new ExecOperatorContent(n_.getOperatorContent()));
            }
        }
        return procGeneOperators(_anaNode, _forwards);
    }

    private static ExecOperationNode procOper(OperationNode _anaNode, Forwards _forwards) {
        if (_anaNode instanceof NumericOperation) {
            NumericOperation c_ = (NumericOperation) _anaNode;
            return new ExecQuickOperation(new ExecOperationContent(c_.getContent()), new ExecOperatorContent(c_.getOperatorContent()), oper(c_));
        }
        if (_anaNode instanceof QuickOperation) {
            return quickOp((QuickOperation) _anaNode, _forwards);
        }
        if (_anaNode instanceof NullSafeOperation) {
            NullSafeOperation c_ = (NullSafeOperation) _anaNode;
            StringList names_ = _anaNode.getResultClass().getNames();
            AnaOperatorContent cont_ = new AnaOperatorContent();
            cont_.setOpOffset(c_.getOpOffset());
            cont_.setOper("??");
            return new ExecQuickOperation(new ExecOperationContent(c_.getContent()), new ExecOperatorContent(cont_), new ExecOperNull(new CommonOperNullSafe(),names_));
        }
        if (_anaNode instanceof AssocationOperation) {
            AssocationOperation c_ = (AssocationOperation) _anaNode;
            return new ExecAssocationOperation(new ExecOperationContent(c_.getContent()));
        }
        if (_anaNode instanceof CompoundAffectationOperation) {
            ExecCompoundAffectationOperation c_ = compound((CompoundAffectationOperation) _anaNode, _forwards);
            return updateConv(_forwards, c_, (CompoundAffectationOperation) _anaNode);
        }
        if (_anaNode instanceof AffectationOperation) {
            AffectationOperation a_ = (AffectationOperation) _anaNode;
            StringList names_ = _anaNode.getResultClass().getNames();
            AnaOperatorContent cont_ = new AnaOperatorContent();
            cont_.setOpOffset(a_.getOpOffset());
            cont_.setOper("=");
            return new ExecAffectationOperation(new ExecOperationContent(a_.getContent()), new ExecOperatorContent(cont_), names_);
        }
        return new ExecDeclaringOperation(new ExecOperationContent(_anaNode.getContent()));
    }

    private static ExecCompoundAffectationOperation updateConv(Forwards _forwards, ExecCompoundAffectationOperation _c, SemiAffectationOperation _m) {
        FetchMemberUtil.impls(_m.getConvTo(), _c.getConverter(), _forwards);
        return _c;
    }

    private static ExecCompoundAffectationOperation compound(CompoundAffectationOperation _anaNode, Forwards _forwards) {
        StringList names_ = _anaNode.getResultClass().getNames();
        ClassMethodIdMemberIdTypeFct fct_ = _anaNode.getFct();
        ExecTypeFunction pair_ = FetchMemberUtil.fetchFunctionOpPair(fct_, _forwards);
        if (pair_.getFct() != null) {
            return new ExecCompoundAffectationExplicitCustOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()), new ExecStaticFctContent(new ExecStaticFctCommonContent("","",-1),new ExecStaticEltContent(fct_, _forwards)), pair_, names_, false);
        }
        String oper_ = _anaNode.getOperatorContent().getOper();
        String op_ = oper_.substring(0, oper_.length() - 1);
        if (StringExpUtil.isNullSafe(op_)) {
            return new ExecCompoundAffectationStringOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()), names_,new ExecOperNull(_anaNode.getSymbol(),names_), false);
        }
        return new ExecCompoundAffectationStringOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()), names_,symbol(_anaNode), false);
    }

    private static ExecMethodOperation explicitOperator(OperationNode _anaNode, Forwards _forwards) {
        ExplicitOperatorOperation m_ = (ExplicitOperatorOperation) _anaNode;
        if (m_.isAffect()) {
            StringList names_ = _anaNode.getResultClass().getNames();
            AnaCallFctContent callFctContent_ = m_.getCallFctContent();
            ExecTypeFunction pair_ = FetchMemberUtil.fetchFunctionOpPair(callFctContent_.getMemberId(), _forwards);
            return updateConv(_forwards, new ExecCompoundAffectationExplicitCustOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(ForwardInfos.syntheticOperator(m_.getSyntheticOperator()), m_.getOffsetOper()), new ExecStaticFctContent(callFctContent_, _forwards), pair_, names_, m_.isPost()), m_);
        }
        return updateConv(_forwards, new ExecExplicitOperatorOperation(new ExecOperationContent(m_.getContent()), m_.isIntermediateDottedOperation(), new ExecStaticFctContent(m_.getCallFctContent(), _forwards), FetchMemberUtil.fetchFunctionOpPair(m_.getCallFctContent().getMemberId(), _forwards), new ExecArrContent(m_.getArrContent()), new ExecOperatorContent(ForwardInfos.syntheticOperator(m_.getSyntheticOperator()), m_.getOffsetOper())), m_);
    }

    private static ExecCompoundAffectationOperation updateConv(Forwards _forwards, ExecCompoundAffectationOperation _c, CompoundAffectationOperation _m) {
        FetchMemberUtil.impls(_m.getConv(), _c.getConverter(), _forwards);
        return _c;
    }

    private static ExecOperationNode procGeneOperators(OperationNode _anaNode, Forwards _forwards) {
        if (_anaNode instanceof UnaryOperation) {
            UnaryOperation m_ = (UnaryOperation) _anaNode;
            return new ExecQuickOperation(new ExecOperationContent(m_.getContent()), new ExecOperatorContent(m_.getOperatorContent()), new ExecOperDir(m_.getSymbol()));
        }
        if (_anaNode instanceof RandCodeOperation) {
            RandCodeOperation m_ = (RandCodeOperation) _anaNode;
            return new ExecRandCodeOperation(new ExecOperationContent(m_.getContent()), m_.getOperatorContent().getOpOffset());
        }
        if (_anaNode instanceof CastOperation) {
            CastOperation m_ = (CastOperation) _anaNode;
            return new ExecCastOperation(new ExecOperationContent(m_.getContent()), new ExecTypeCheckContent(m_.getTypeCheckContent()));
        }
        if (_anaNode instanceof ExplicitOperation) {
            ExplicitOperation m_ = (ExplicitOperation) _anaNode;
            return cast(_forwards, m_.getExplicitContent(), m_.getContent());
        }
        if (_anaNode instanceof ImplicitOperation) {
            ImplicitOperation m_ = (ImplicitOperation) _anaNode;
            return cast(_forwards, m_.getExplicitContent(), m_.getContent());
        }
        return procOperators(_anaNode, _forwards);
    }

    private static ExecMethodOperation compare(CmpOperation _anaNode) {
        return new ExecQuickOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()),new ExecOperDir(_anaNode.getSymbol()));
    }

    private static ExecQuickOperation updateConv(Forwards _forwards, ExecQuickOperation _q, QuickOperation _m) {
        FetchMemberUtil.impls(_m.getConv(), _q.getConverter(), _forwards);
        return _q;
    }

    private static ExecCompoundAffectationOperation semi(SemiAffectationOperation _anaNode, Forwards _forwards) {
        StringList names_ = _anaNode.getResultClass().getNames();
        ExecTypeFunction pair_ = FetchMemberUtil.fetchFunctionOpPair(_anaNode.getFct(), _forwards);
        if (pair_.getFct() == null) {
            return new ExecCompoundAffectationStringOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()),names_,new ExecOperDir(_anaNode.getSymbol()), _anaNode.isPost());
        }
        return new ExecCompoundAffectationExplicitCustOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(_anaNode.getOperatorContent()),  new ExecStaticFctContent(new ExecStaticFctCommonContent("","",-1),new ExecStaticEltContent(_anaNode.getFct(), _forwards)), pair_, names_, _anaNode.isPost());
    }

    private static ExecOperationNode procOperators(OperationNode _anaNode, Forwards _forwards) {
        if (_anaNode instanceof CmpOperation) {
            return compare((CmpOperation) _anaNode);
        }
        if (_anaNode instanceof RangeOperation) {
            RangeOperation c_ = (RangeOperation) _anaNode;
            return new ExecRangeOperation(new ExecOperationContent(c_.getContent()), c_.getOpOffset(), c_.isImplicitMiddle());
        }
        if (_anaNode instanceof InstanceOfOperation) {
            InstanceOfOperation c_ = (InstanceOfOperation) _anaNode;
            return new ExecInstanceOfOperation(new ExecOperationContent(c_.getContent()), new ExecTypeCheckContent(c_.getTypeCheckContent()));
        }
        if (_anaNode instanceof EqOperation) {
            EqOperation c_ = (EqOperation) _anaNode;
            return new ExecQuickOperation(new ExecOperationContent(c_.getContent()), new ExecOperatorContent(c_.getOperatorContent()), new ExecOperDir(c_.getSymbol()));
        }
        return procOper(_anaNode, _forwards);
    }

    private static ExecExplicitOperatorOperation updateConv(Forwards _forwards, ExecExplicitOperatorOperation _exp, ExplicitOperatorOperation _m) {
        FetchMemberUtil.impls(_m.getConv(), _exp.getConverter(), _forwards);
        return _exp;
    }

    private static ExecExplicitOperatorOperation updateConv(Forwards _forwards, ExecExplicitOperatorOperation _c, QuickOperation _m) {
        FetchMemberUtil.impls(_m.getConv(), _c.getConverter(), _forwards);
        return _c;
    }

    private static ExecOperationNode quickOp(QuickOperation _anaNode, Forwards _forwards) {
        ClassMethodIdMemberIdTypeFct fct_ = _anaNode.getFct();
        ExecTypeFunction pair_ = FetchMemberUtil.fetchFunctionOpPair(fct_, _forwards);
        AnaOperatorContent cont_ = new AnaOperatorContent();
        cont_.setOper(quickOperator(_anaNode));
        cont_.setOpOffset(_anaNode.getOpOffset());
        if (pair_.getFct() != null) {
            return updateConv(_forwards, new ExecExplicitOperatorOperation(new ExecOperationContent(_anaNode.getContent()), false, new ExecStaticFctContent(new ExecStaticFctCommonContent("", "", -1), new ExecStaticEltContent(fct_, _forwards)), pair_, new ExecArrContent(false), new ExecOperatorContent(cont_)), _anaNode);
        }
        return updateConv(_forwards, new ExecQuickOperation(new ExecOperationContent(_anaNode.getContent()), new ExecOperatorContent(cont_), new ExecOperDir(_anaNode.getSymbol())), _anaNode);
    }

    private static ExecCompoundAffectationExplicitCustOperation updateConv(Forwards _forwards, ExecCompoundAffectationExplicitCustOperation _c, ExplicitOperatorOperation _m) {
        FetchMemberUtil.impls(_m.getConv(), _c.getConverter(), _forwards);
        return _c;
    }

