

    public void partsTokens17() {
        StringMap<String> src_ = new StringMap<String>();
        src_.addEntry("src/file.txt", "public class pkg.Ex {public int field;public static int exmeth(){$lambda(StringSegment,new,begin,end);}");
        ResultContext res_ = ctxReadOnlyOk(src_);
        CustList<SegmentReadOnlyTokenPart> l_ = listTokensInstFieldPred(res_);
        assertEq(2,l_.size());
        assertEq(91,l_.get(0).getBegin());
        assertEq(96,l_.get(0).getEnd());
        assertEq(97,l_.get(1).getBegin());
        assertEq(100,l_.get(1).getEnd());
    }

    @Test
    public void partsTokens18() {
        StringMap<String> src_ = new StringMap<String>();
        src_.addEntry("src/file.txt", "public annotation pkg.Ex {int field();{$lambda(Ex,field);}}");
        ResultContext res_ = ctxReadOnlyOk(src_);
        CustList<SegmentReadOnlyTokenPart> l_ = listTokensAnnotField(res_);
        assertEq(2,l_.size());
        assertEq(30,l_.get(0).getBegin());
        assertEq(35,l_.get(0).getEnd());
        assertEq(50,l_.get(1).getBegin());
        assertEq(55,l_.get(1).getEnd());
    }

    @Test
    public void partsTokens19() {
        StringMap<String> src_ = new StringMap<String>();
        src_.addEntry("src/file.txt", "public annotation pkg.Ex {int field();{Ex e;e.field();}}");
        ResultContext res_ = ctxReadOnlyOk(src_);
        CustList<SegmentReadOnlyTokenPart> l_ = listTokensAnnotField(res_);
        assertEq(2,l_.size());
        assertEq(30,l_.get(0).getBegin());
        assertEq(35,l_.get(0).getEnd());
        assertEq(46,l_.get(1).getBegin());
        assertEq(51,l_.get(1).getEnd());
    }

    @Test
    public void partsTokens20() {
        StringMap<String> src_ = new StringMap<String>();
        src_.addEntry("src/file.txt", "public annotation pkg.Ex {{Ex e;e.field();}}");
        ResultContext res_ = ctxReadOnlyOk(src_);
        CustList<SegmentReadOnlyTokenPart> l_ = listTokensAnnotField(res_);
        assertEq(0,l_.size());
    }

    private CustList<SegmentReadOnlyPart> list(ResultContext _res) {
        IdMap<FileBlock,CustList<SegmentReadOnlyPart>> s_ = DbgSyntaxColoring.partsBpMpWp(_res);
        return s_.getVal(_res.getPageEl().getPreviousFilesBodies().getVal("src/file.txt"));
    }
    private CustList<SegmentReadOnlyTokenPart> listTokensLabel(ResultContext _res) {
        return listTokens(_res).getVal(SyntaxRefTokenEnum.LABEL);
    }
    private CustList<SegmentReadOnlyTokenPart> listTokensInstField(ResultContext _res) {
        return listTokens(_res).getVal(SyntaxRefTokenEnum.INST_FIELD);
    }
    private CustList<SegmentReadOnlyTokenPart> listTokensStaticField(ResultContext _res) {
        return listTokens(_res).getVal(SyntaxRefTokenEnum.STATIC_FIELD);
    }

    private CustList<SegmentReadOnlyTokenPart> listTokensInstFieldPred(ResultContext _res) {
        return listTokens(_res).getVal(SyntaxRefTokenEnum.INST_FIELD_PRED);
    }

    private CustList<SegmentReadOnlyTokenPart> listTokensAnnotField(ResultContext _res) {
        return listTokens(_res).getVal(SyntaxRefTokenEnum.ANNOT_FIELD);
    }
    private IdMap<SyntaxRefTokenEnum,CustList<SegmentReadOnlyTokenPart>> listTokens(ResultContext _res) {
        IdMap<FileBlock,IdMap<SyntaxRefTokenEnum,CustList<SegmentReadOnlyTokenPart>>> s_ = DbgSyntaxColoring.partsTokens(_res);
        return s_.getVal(_res.getPageEl().getPreviousFilesBodies().getVal("src/file.txt"));
    }

    private static ResultContext ctxReadOnlyOk(StringMap<String> _src) {
        AbsDebuggerGui b_ = build();
        ManageOptions o_ = opt(b_);
        ResultContext r_ = res(b_, o_);
        return analyzed(b_, o_, r_, _src);
    }

    private static ResultContext analyzed(AbsDebuggerGui _b, ManageOptions _o, ResultContext _r, StringMap<String> _src) {
        guiAna(_r, _b, _o, _src);
        return ((OpenFramePointsEvent)_b.getOpenPoints().getActionListeners().get(0)).getCurrentResult();
    }
}

