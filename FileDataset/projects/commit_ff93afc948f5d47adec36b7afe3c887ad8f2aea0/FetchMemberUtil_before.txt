    public static CustList<ExecFormattedRootBlock> fwdFormatTypes(CustList<AnaFormattedRootBlock> _in,Forwards _forwards) {
        CustList<ExecFormattedRootBlock> l_ = new CustList<ExecFormattedRootBlock>();
        for (AnaFormattedRootBlock s: _in) {
            l_.add(FetchMemberUtil.fwdFormatType(s, _forwards));
        }
        return l_;
    }

    public static void setImplicits(AnaClassArgumentMatching _ana, ImplicitMethods _implicitsOp, ImplicitMethods _implicitsTestOp, Forwards _forwards) {
        CustList<AnaFormattedRootBlock> implicits_ = _ana.getImplicits();
        ExecTypeFunction conv_ = null;
        ExecFormattedRootBlock formattedType_ = null;
        if (!implicits_.isEmpty()) {
            formattedType_ = fwdFormatType(implicits_.first(), _forwards);
            conv_ = fetchOvTypeFunction(_ana.getMemberId(), _forwards);
        }
        if (conv_ != null) {
            _implicitsOp.getConverter().add(conv_);
            _implicitsOp.setOwnerClass(formattedType_);
        }
        CustList<AnaFormattedRootBlock> implicitsTest_ = _ana.getImplicitsTest();
        ExecTypeFunction convTest_ = null;
        ExecFormattedRootBlock formattedTypeTest_ = null;
        if (!implicitsTest_.isEmpty()) {
            formattedTypeTest_ = fwdFormatType(implicitsTest_.first(), _forwards);
            convTest_ = fetchOvTypeFunction(_ana.getMemberIdTest(), _forwards);
        }
        if (convTest_ != null) {
            _implicitsTestOp.getConverter().add(convTest_);
            _implicitsTestOp.setOwnerClass(formattedTypeTest_);
        }
    }

    public static ImplicitMethods fetchImplicits(AnaFormattedRootBlock _clMet, MemberId _id, Forwards _forwards) {
        ExecTypeFunction conv_ = null;
        ExecFormattedRootBlock formattedType_ = null;
        if (_clMet != null) {
            formattedType_ = fwdFormatType(_clMet, _forwards);
            conv_ = fetchOvTypeFunction(_id, _forwards);
        }
        if (conv_ != null) {
            ImplicitMethods converter_ = new ImplicitMethods();
            converter_.getConverter().add(conv_);
            converter_.setOwnerClass(formattedType_);
            return converter_;
        }
        return null;
    }

