    void testBeanReading() throws IOException
    {
        {
            Map<String,Object> appUser = readTestData("app-user.json");

            final SchemaReference root = SchemaReference.newRef(createDomain(), "AppUser");

            final SchemaReference login = root.getField("login");
            final SchemaReference bazes = root.getField("bazes");
            final SchemaReference bazNames = root.getField("bazes.name");
            assertThat(login.get(appUser), is("admin"));
            final List<Object> l = bazes.get(appUser);
            assertThat(JSONUtil.DEFAULT_GENERATOR.forValue(l), is("[{\"name\":\"Baz #1\",\"id\":\"5fb41ce9-e5fb-49b1-88db-4beed2486234\",\"ownerId\":\"10f07f41-9766-47c0-9ca6-13a2091105fe\"},{\"name\":\"Baz #2\",\"id\":\"67524852-5266-45fc-b7fa-47246f6fe46f\",\"ownerId\":\"10f07f41-9766-47c0-9ca6-13a2091105fe\"}]"));
            assertThat(bazNames.get(appUser), is(Arrays.asList("Baz #1", "Baz #2")));
        }


        {
            Map<String,Object> foo = readTestData("foo.json");
            final SchemaReference root = SchemaReference.newRef(createDomain(), "Foo");

            assertThat(root.getField("name").get(foo), is("Foo #1"));
            assertThat(root.getField("owner.login").get(foo), is("admin"));
            assertThat(root.getField("owner.bazes.name").get(foo), is(Arrays.asList("Baz #1", "Baz #2")));
        }

    }

