    private DocumentCheckVerificationResult executeFallbackIfDocumentFailedToVerify(
            DocumentCheckVerificationResult documentDataVerificationResult,
            DrivingPermitForm drivingPermitFormData)
            throws Exception {
        if (!documentDataVerificationResult.isVerified()
                || !documentDataVerificationResult.getContraIndicators().isEmpty()) {
            LOGGER.info(
                    "Document has been marked unverified during fallback window. Executing request with Direct connection");
            documentDataVerificationResult = executeFallbackRequest(drivingPermitFormData);
            if (documentDataVerificationResult.isVerified()) {
                eventProbe.counterMetric(DL_VERIFICATION_FALLBACK_DEVIATION);
                LOGGER.warn(
                        "Document has been verified using DCS that failed verification using Direct connection");
            }
        }
        return documentDataVerificationResult;
    }

    public APIGatewayProxyResponseEvent handleRequest(
            APIGatewayProxyRequestEvent input, Context context) {

        try {
            LOGGER.info(
                    "Initiating lambda {} version {}",
                    context.getFunctionName(),
                    context.getFunctionVersion());
            Map<String, String> headers = input.getHeaders();
            final String sessionId = headers.get("session_id");
            LOGGER.info("Extracting session from header ID {}", sessionId);
            var sessionItem = sessionService.validateSessionId(sessionId);

            // Attempt Start
            sessionItem.setAttemptCount(sessionItem.getAttemptCount() + 1);

            LOGGER.info("Attempt Number {}", sessionItem.getAttemptCount());

            // Attempt Start
            final int MAX_ATTEMPTS = configurationService.getMaxAttempts();

            // Stop being called more than MAX_ATTEMPTS
            if (sessionItem.getAttemptCount() > MAX_ATTEMPTS) {

                LOGGER.error(
                        "Attempt count {} is over the max of {}",
                        sessionItem.getAttemptCount(),
                        MAX_ATTEMPTS);

                // Driving Permit Lambda Completed with an Error
                eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_COMPLETED_ERROR);

                // TODO change this to a redirect onwards
                return ApiGatewayResponseGenerator.proxyJsonResponse(
                        HttpStatusCode.INTERNAL_SERVER_ERROR, TOO_MANY_RETRY_ATTEMPTS);
            }

            DrivingPermitForm drivingPermitFormData =
                    parseDrivingPermitFormRequest(input.getBody());

            ThirdPartyAPIService thirdPartyAPIService =
                    selectThirdPartyAPIService(
                            configurationService.getDvaDirectEnabled(),
                            configurationService.getDvlaDirectEnabled(),
                            headers.get(HEADER_DOCUMENT_CHECKING_ROUTE),
                            drivingPermitFormData.getLicenceIssuer());

            LOGGER.info(
                    "Verifying document details using {}", thirdPartyAPIService.getServiceName());

            DocumentCheckVerificationResult result = null;

            boolean thirdPartyIsDcs =
                    thirdPartyAPIService
                            .getServiceName()
                            .equals(DcsThirdPartyDocumentGateway.class.getSimpleName());

            boolean thirdPartyIsDva =
                    thirdPartyAPIService
                            .getServiceName()
                            .equals(DvaThirdPartyDocumentGateway.class.getSimpleName());

            try {
                result =
                        identityVerificationService.verifyIdentity(
                                drivingPermitFormData, thirdPartyAPIService);
                if (!thirdPartyIsDcs && !thirdPartyIsDva) {
                    LOGGER.info("Checking if verification fallback is required");
                    result = executeFallbackIfDocumentFailedToVerify(result, drivingPermitFormData);
                }
            } catch (Exception e) {
                LOGGER.info("Exception {}, checking if fallback is required", e.getMessage());
                if (!thirdPartyIsDcs && !thirdPartyIsDva) {
                    LOGGER.info(
                            "Exception has occurred during fallback window. Executing request with DVAD");
                    result = executeFallbackRequest(drivingPermitFormData);
                } else {
                    throw e;
                }
            }

            result.setAttemptCount(sessionItem.getAttemptCount());

            auditService.sendAuditEvent(
                    AuditEventType.RESPONSE_RECEIVED, new AuditEventContext(headers, sessionItem));

            LOGGER.info("Sending audit event REQUEST_SENT...");
            auditService.sendAuditEvent(
                    AuditEventType.REQUEST_SENT,
                    new AuditEventContext(
                            PersonIdentityDetailedHelperMapper
                                    .drivingPermitFormDataToAuditRestrictedFormat(
                                            drivingPermitFormData),
                            input.getHeaders(),
                            sessionItem));

            saveAttempt(sessionItem, drivingPermitFormData, result);

            boolean canRetry = true;

            if (result.isExecutedSuccessfully() && result.isVerified()) {
                LOGGER.info("Document verified");
                eventProbe.counterMetric(
                        LAMBDA_DRIVING_PERMIT_CHECK_ATTEMPT_STATUS_VERIFIED_PREFIX
                                + sessionItem.getAttemptCount());

                canRetry = false;
            } else if (result.getAttemptCount() >= MAX_ATTEMPTS) {
                LOGGER.info(
                        "Ending document verification after {} attempts", result.getAttemptCount());
                eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_ATTEMPT_STATUS_UNVERIFIED);

                canRetry = false;
            } else {
                LOGGER.info("Document not verified at attempt {}", result.getAttemptCount());
                eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_ATTEMPT_STATUS_RETRY);

                canRetry = true;
            }

            LOGGER.info("CanRetry {}", canRetry);

            DocumentVerificationResponse response = new DocumentVerificationResponse();
            response.setRetry(canRetry);

            // Driving Permit Completed Normally
            eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_COMPLETED_OK);
            return ApiGatewayResponseGenerator.proxyJsonResponse(HttpStatusCode.OK, response);
        } catch (OAuthErrorResponseException e) {
            // Driving Permit Lambda Completed with an Error
            eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_COMPLETED_ERROR);

            // Debug in DEV only as Oauth errors appear in the redirect url
            // This will output the specific error message
            // Note Unit tests expect server error (correctly)
            // and will fail if this is set (during unit tests)
            if (configurationService.isDevEnvironmentOnlyEnhancedDebugSet()) {
                String customOAuth2ErrorDescription = e.getErrorReason();
                return ApiGatewayResponseGenerator.proxyJsonResponse(
                        e.getStatusCode(), // Status Code determined by throw location
                        new CommonExpressOAuthError(
                                OAuth2Error.SERVER_ERROR, customOAuth2ErrorDescription));
            }

            // Non-debug route - standard OAuth2Error.SERVER_ERROR
            return ApiGatewayResponseGenerator.proxyJsonResponse(
                    e.getStatusCode(), // Status Code determined by throw location
                    new CommonExpressOAuthError(OAuth2Error.SERVER_ERROR));
        } catch (Exception e) {
            // This is where unexpected exceptions will reach (null pointers etc)
            // Expected exceptions should be caught and thrown as
            // OAuthErrorResponseException
            // We should not log unknown exceptions, due to possibility of PII
            LOGGER.error(
                    "Unhandled Exception while handling lambda {} exception {}",
                    context.getFunctionName(),
                    e.getClass());

            LOGGER.debug(e.getMessage(), e);

            eventProbe.counterMetric(LAMBDA_DRIVING_PERMIT_CHECK_COMPLETED_ERROR);

            return ApiGatewayResponseGenerator.proxyJsonResponse(
                    HttpStatusCode.INTERNAL_SERVER_ERROR,
                    new CommonExpressOAuthError(OAuth2Error.SERVER_ERROR));
        }
    }

