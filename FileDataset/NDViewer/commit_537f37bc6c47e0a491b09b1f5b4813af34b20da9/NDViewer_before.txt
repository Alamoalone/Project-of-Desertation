   public void initializeViewerToLoaded(List<String> channelNames, JSONObject dispSettings,
           HashMap<String, Object> axisMins, HashMap<String, Object> axisMaxs) {
      displaySettings_ = new DisplaySettings(dispSettings, getPreferences());
      stringAxes_ = new ConcurrentHashMap<String, LinkedList<String>>();
      if (channelNames.size() != 0) {
         stringAxes_.put("channel", new LinkedList<String>());
         for (int c = 0; c < channelNames.size(); c++) {
            stringAxes_.get("channel").add(channelNames.get(c));
            displayWindow_.addContrastControls(channelNames.get(c));
            if (c == 0) {
               axisMins.put("channel", channelNames.get(c));
            } else if (c == channelNames.size() - 1) {
               axisMaxs.put("channel", channelNames.get(c));
            }
         }
      }
      if (!displayWindow_.contrastControlsInitialized()) {
         // no channels have been added, so make a default one for monochrome display
//         displaySettings_.addChannel("");
         displayWindow_.addContrastControls("");
      }
      //maximum scrollbar extents
      edtRunnablePool_.invokeLaterWithCoalescence(
              new NDViewer.ExpandDisplayRangeCoalescentRunnable(axisMaxs));
      edtRunnablePool_.invokeLaterWithCoalescence(
              new NDViewer.ExpandDisplayRangeCoalescentRunnable(axisMins));
   }

   public void setCompositeMode(boolean selected) {
      displaySettings_.setCompositeMode(selected);
      //select all channels if composite mode is being turned on
      if (selected) {
         for (String channel : stringAxes_.get("channel")) {
            displaySettings_.setActive(channel, true);
            displayWindow_.displaySettingsChanged();
         }
      } else {
         for (String channel : stringAxes_.get("channel")) {
            displaySettings_.setActive(channel, viewCoords_.getActiveChannel().equals(channel));
            displayWindow_.displaySettingsChanged();
         }
      }
      update();
   }

   public void newImageArrived(HashMap<String, Object> axesPositions) {
      try {
         if (isImageXYBounded()) {
            int[] newBounds = dataSource_.getBounds();
            int[] oldBounds = viewCoords_.getBounds();
            double xResize = (oldBounds[2] - oldBounds[0]) / (double) (newBounds[2] - newBounds[0]);
            double yResize = (oldBounds[3] - oldBounds[1]) / (double) (newBounds[3] - newBounds[1]);
            viewCoords_.setImageBounds(newBounds);
            if (xResize < 1 || yResize < 1) {
               zoom(1 / Math.min(xResize, yResize), null);
            }
         }

         if (axesPositions.containsKey("channel")) {
            String channelName = (String) axesPositions.get("channel");
            if (viewCoords_.getActiveChannel() == null) {
               viewCoords_.setActiveChannel(channelName);
            }

         }

         // Keep track of axes with String values
         for (String axis : axesPositions.keySet()) {
            if (stringAxes_ == null) {
               stringAxes_ = new ConcurrentHashMap<String, LinkedList<String>>();
            }
            if (!(axesPositions.get(axis) instanceof String) ) {
               continue;
            }
             if (!stringAxes_.containsKey(axis)) {
               stringAxes_.put(axis, new LinkedList<String>());
             }
             if (!stringAxes_.get(axis).contains(axesPositions.get(axis))) {
                stringAxes_.get(axis).add((String) axesPositions.get(axis));
                if (axis.equals("channel")) {
                   String channelName = (String) axesPositions.get("channel");
                   int bitDepth = dataSource_.getImageBitDepth(axesPositions);
                   //Add contrast controls and display settings
                   displaySettings_.addChannel(channelName, bitDepth);
                   displayWindow_.addContrastControls(channelName);
                }
             }
         }
         if (!displayWindow_.contrastControlsInitialized()) {
            // no channels have been added, so make a default one for monochrome display
            int bitDepth = dataSource_.getImageBitDepth(axesPositions);
            displaySettings_.addChannel("", bitDepth);
            displayWindow_.addContrastControls("");
         }

         //expand the scrollbars with new images
         edtRunnablePool_.invokeLaterWithCoalescence(
                 new NDViewer.ExpandDisplayRangeCoalescentRunnable(axesPositions));
         //move scrollbars to new position
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

