    public <ContextType extends Context<ContextType>> void prompt(IBRRequestQueue<ContextType> requestQueue)
    {
        stage.show();

        runButton.setOnAction(event ->
        {
            //stage.close();

            SpecularFitRequestParams settings = new SpecularFitRequestParams(new TextureResolution(
                    Integer.parseInt(widthTextField.getText()),
                    Integer.parseInt(heightTextField.getText())),
                modelAccess.getSettingsModel());
            settings.setGamma(modelAccess.getSettingsModel().getFloat("gamma"));

            int basisCount = Integer.parseInt(basisCountTextField.getText());
            settings.getSpecularBasisSettings().setBasisCount(basisCount);
            int microfacetDistributionResolution = Integer.parseInt(mfdResolutionTextField.getText());
            settings.getSpecularBasisSettings().setBasisResolution(microfacetDistributionResolution);

            settings.getExportSettings().setCombineWeights(true /* combineWeightsCheckbox.isSelected() */);
            settings.getExportSettings().setOpenViewerOnceComplete(openViewerOnComplete.isSelected());

            // Specular / general settings
            double convergenceTolerance = Double.parseDouble(convergenceToleranceTextField.getText());
            settings.setConvergenceTolerance(convergenceTolerance);
            double specularSmoothness = Double.parseDouble(specularSmoothnessTextField.getText());
            settings.getSpecularBasisSettings().setSpecularSmoothness(specularSmoothness);
            double metallicity = Double.parseDouble(metallicityTextField.getText());
            settings.getSpecularBasisSettings().setMetallicity(metallicity);
            settings.setShouldIncludeConstantTerm(translucencyCheckBox.isSelected());

            // Normal estimation settings
            boolean normalRefinementEnabled = normalRefinementCheckBox.isSelected();
            settings.getNormalOptimizationSettings().setNormalRefinementEnabled(normalRefinementEnabled);
            double minNormalDamping = Double.parseDouble(minNormalDampingTextField.getText());
            // Negative values shouldn't break anything here.
            settings.getNormalOptimizationSettings().setMinNormalDamping(minNormalDamping);
            int normalSmoothingIterations = Integer.parseInt(normalSmoothingIterationsTextField.getText());
            // Negative values shouldn't break anything here.
            settings.getNormalOptimizationSettings().setNormalSmoothingIterations(normalSmoothingIterations);

            // Settings which shouldn't usually need to be changed
            settings.getSpecularBasisSettings().setSmithMaskingShadowingEnabled(smithCheckBox.isSelected());
            boolean levenbergMarquardtEnabled = true;
            settings.getNormalOptimizationSettings().setLevenbergMarquardtEnabled(levenbergMarquardtEnabled);
            int unsuccessfulLMIterationsAllowed = Integer.parseInt(unsuccessfulLMIterationsTextField.getText());
            settings.getNormalOptimizationSettings().setUnsuccessfulLMIterationsAllowed(unsuccessfulLMIterationsAllowed);
            settings.getReconstructionSettings().setReconstructAll(false);

            settings.getExportSettings().setGenerateLowResTextures(exportTextureLODsCheckbox.isSelected());

            // glTF export settings
            settings.getExportSettings().setGlTFEnabled(true);
            settings.getExportSettings().setGlTFPackTextures(false);

            // Image cache settings
            settings.getImageCacheSettings().setCacheParentDirectory(ApplicationFolders.getFitCacheRootDirectory().toFile());
            settings.getImageCacheSettings().setTextureWidth(settings.getTextureResolution().width);
            settings.getImageCacheSettings().setTextureHeight(settings.getTextureResolution().height);
            settings.getImageCacheSettings().setTextureSubdiv( // TODO expose this in the interface
                (int)Math.ceil(Math.max(settings.getTextureResolution().width, settings.getTextureResolution().height) / 256.0));
            settings.getImageCacheSettings().setSampledSize(256); // TODO expose this in the interface

            SpecularFitRequest request = new SpecularFitRequest(settings, modelAccess);

//            if (priorSolutionCheckBox.isSelected() && priorSolutionField.getText() != null && !priorSolutionField.getText().isEmpty())
//            {
//                // Run as a "Graphics request" that doesn't require IBR resources to be loaded (since we're using a prior solution)
//                settings.setPriorSolutionDirectory(new File(priorSolutionField.getText()));
//                requestQueue.addGraphicsRequest(request);
//            }
//            else
//            {
                // Run as an IBR request that optimizes from scratch.
                requestQueue.addIBRRequest(request);
//            }
        });
    }







