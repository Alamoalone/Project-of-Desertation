@@ -52,7 +52,7 @@ public enum TeamColor {
     public Collection<ChessMove> validMoves(ChessPosition startPosition){
         ChessPiece piece = this.board.getPiece(startPosition);
         ChessBoard copyBoard = null;
-        if(piece == null){
+        if(piece == null || piece.getTeamColor() != this.getTeamTurn()){
             return null;
         }
         Collection<ChessMove> moves = piece.pieceMoves(this.board, startPosition);
@@ -87,11 +87,6 @@ public Collection<ChessMove> validMoves(ChessPosition startPosition){
      * @throws InvalidMoveException if move is invalid
      */
     public void makeMove(ChessMove move) throws InvalidMoveException {
-        ChessPiece piece = board.getPiece(move.getStartPosition());
-        if(piece.getTeamColor() != this.teamTurn){
-            throw new InvalidMoveException();
-        }
-
         Collection<ChessMove> validPieceMoves = this.validMoves(move.getStartPosition());
         if(validPieceMoves.contains(move)){
             if(move.getPromotionPiece() == null) {
@@ -175,6 +170,29 @@ public boolean isInCheck(TeamColor teamColor) {
             }
         }
 
+        if((this.teamTurn == TeamColor.WHITE && position.getRow() < 8) ||
+                (this.teamTurn == TeamColor.BLACK && position.getRow() > 1)) {
+            mover = new PawnMovesCalculator();
+            potentialMoves = mover.pieceMoves(this.board, position);
+
+            for (ChessMove potentialMove : potentialMoves) {
+                enemy = this.board.getPiece(potentialMove.getEndPosition());
+                if (enemy != null && (enemy.getPieceType() == ChessPiece.PieceType.PAWN)) {
+                    return true;
+                }
+            }
+        }
+
+
+        mover = new KingMovesCalculator();
+        potentialMoves = mover.pieceMoves(this.board, position);
+        for (ChessMove potentialMove : potentialMoves) {
+            enemy = this.board.getPiece(potentialMove.getEndPosition());
+            if (enemy != null && (enemy.getPieceType() == ChessPiece.PieceType.KING)) {
+                return true;
+            }
+        }
+
         return false;
     }
 
@@ -185,7 +203,20 @@ public boolean isInCheck(TeamColor teamColor) {
      * @return True if the specified team is in checkmate
      */
     public boolean isInCheckmate(TeamColor teamColor) {
-        return isInCheck(teamColor);
+        Collection<ChessMove> tester;
+        if(isInCheck(teamColor)){
+            for (int i = 1; i <= 8; i++) {
+                for (int j = 1; j <= 8; j++) {
+                    ChessPosition position = new ChessPosition(i, j);
+                    tester = this.validMoves(position);
+                    if((!(tester == null)) && !tester.isEmpty()){
+                        return false;
+                    }
+                }
+            }
+            return true;
+        }
+        return false;
     }
 
     /**
@@ -196,7 +227,18 @@ public boolean isInCheckmate(TeamColor teamColor) {
      * @return True if the specified team is in stalemate, otherwise false
      */
     public boolean isInStalemate(TeamColor teamColor) {
-        return !isInCheck(teamColor);
+        if(!isInCheck(teamColor)){
+            for (int i = 1; i < 8; i++) {
+                for (int j = 1; j < 8; j++) {
+                    ChessPosition position = new ChessPosition(i, j);
+                    if(!(this.validMoves(position) == null)){
+                        return false;
+                    }
+                }
+            }
+            return true;
+        }
+        return false;
     }
 
     /**