@@ -1,9 +1,12 @@
-//package main.java.ca.mcmaster.se2aa4.mazerunner;
 package ca.mcmaster.se2aa4.mazerunner;
 import java.io.IOException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class Path {
 
+    private static final Logger logger = LogManager.getLogger();
+
     public String user_path;
     private String[] can_path; //CREATE A METHOD TO TURN CMD LINE ARGUMENTS INTO CANONICAL PATH
     public Maze maze;
@@ -16,6 +19,7 @@ public class Path {
     public Path(String path, Maze maze){
 
         this.user_path = path;
+        this.can_path = path.split("");
         this.maze = maze; // calls the string version of the matrix
     }
 
@@ -31,7 +35,9 @@ public void status() {
             // from East -> West, go through eastern entry and end at western entry
             status_east = isPathValid("WEST", maze.getEEast(), maze.getEWest());
             
-            //if (status_east); 
+            if (status_east){System.out.println("**** Path works from East to West");}
+            else{System.out.println("**** Path failed: East to West");}
+
         } catch(IndexOutOfBoundsException e){
             //logger.info("/!\\No -p arguments given/!\\");
             System.out.println("Error: East to West path does not work.");
@@ -42,7 +48,9 @@ public void status() {
             status_west = isPathValid("EAST", maze.getEWest(), maze.getEEast());
             
         
-            //if (status_west){}
+            if (status_west){System.out.println("**** Path works from: West to East");}
+            else{System.out.println("**** Path failed: West to East");}
+
         } catch(IndexOutOfBoundsException e){
             System.out.println("Error: West to East path does not work.");
         }
@@ -57,11 +65,13 @@ public boolean isPathValid(String d, int[] entry, int[] exit) throws IndexOutOfB
         //              [x, y] location
         int[] current = start;
 
+        logger.info("**** Computing provided path");
+
         for (int i=0; i<can_path.length; i++){
 
             if (direction.equals("EAST")){
                 if (can_path[i].equals("F")){
-                    if ((maze.string_matrix)[current[0]][current[1]+1]=="PASS"){
+                    if (("PASS").equals((maze.string_matrix)[current[0]][current[1]+1])){
                         current[1] += 1;
                     }
                     else{return false;}
@@ -77,7 +87,7 @@ else if (can_path[i].equals("L")){
             }
             else if (direction.equals("SOUTH")){
                 if (can_path[i].equals("F")){
-                    if ((maze.string_matrix)[current[0]+1][current[1]]=="PASS"){
+                    if (("PASS").equals((maze.string_matrix)[current[0]+1][current[1]])){
                         current[0] += 1;
                     }
                     else{return false;}
@@ -93,7 +103,7 @@ else if (can_path[i].equals("L")){
             }
             else if (direction.equals("NORTH")){
                 if (can_path[i].equals("F")){
-                    if ((maze.string_matrix)[current[0]-1][current[1]]=="PASS"){
+                    if (("PASS").equals((maze.string_matrix)[current[0]-1][current[1]])){
                         current[0] -= 1;
                     }
                     else{return false;}
@@ -109,7 +119,7 @@ else if (can_path[i].equals("L")){
             }
             else if (direction.equals("WEST")){
                 if (can_path[i].equals("F")){
-                    if ((maze.string_matrix)[current[0]][current[1]-1]=="PASS"){
+                    if (("PASS").equals((maze.string_matrix)[current[0]][current[1]-1])){
                         current[1] -= 1;
                     }
                     else{return false;}