@@ -30,10 +30,13 @@
 import eu.openanalytics.phaedra.plateservice.service.PlateService;
 import eu.openanalytics.phaedra.plateservice.service.WellService;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.ObjectUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.graphql.data.method.annotation.Argument;
 import org.springframework.graphql.data.method.annotation.QueryMapping;
 import org.springframework.stereotype.Controller;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -53,8 +56,8 @@ public PlateGraphQLController(PlateService plateService, WellService wellService
     }
 
     @QueryMapping
-    public List<PlateDTO> getPlatesByExperimentId(@Argument long experimentId) {
-        List<PlateDTO> result = plateService.getPlatesByExperimentId(experimentId);
+    public List<PlateDTO> getPlatesByExperimentId(@Argument Long experimentId) {
+        List<PlateDTO> result = ObjectUtils.isNotEmpty(experimentId) ? plateService.getPlatesByExperimentId(experimentId) : new ArrayList<>();
         if (CollectionUtils.isNotEmpty(result)) {
             // Add tags
             result.stream().forEach(plateDTO -> {
@@ -67,7 +70,7 @@ public List<PlateDTO> getPlatesByExperimentId(@Argument long experimentId) {
 
     @QueryMapping
     public List<PlateDTO> getPlatesByBarcode(@Argument String barcode) {
-        List<PlateDTO> result = plateService.getPlatesByBarcode(barcode);
+        List<PlateDTO> result = StringUtils.isNotEmpty(barcode) ? plateService.getPlatesByBarcode(barcode) : new ArrayList<>();
         if (CollectionUtils.isNotEmpty(result)) {
             // Add tags
             result.stream().forEach(plateDTO -> {
@@ -79,8 +82,8 @@ public List<PlateDTO> getPlatesByBarcode(@Argument String barcode) {
     }
 
     @QueryMapping
-    public PlateDTO getPlateById(@Argument long plateId) {
-        PlateDTO result = plateService.getPlateById(plateId);
+    public PlateDTO getPlateById(@Argument Long plateId) {
+        PlateDTO result = ObjectUtils.isNotEmpty(plateId) ? plateService.getPlateById(plateId) : null;
         if (result != null) {
             List<TagDTO> plateTags = metadataServiceClient.getTags(ObjectClass.PLATE, result.getId());
             result.setTags(plateTags.stream().map(tagDTO -> tagDTO.getTag()).collect(Collectors.toList()));
@@ -89,17 +92,21 @@ public PlateDTO getPlateById(@Argument long plateId) {
     }
 
     @QueryMapping
-    public List<WellDTO> getPlateWells(@Argument long plateId) {
-        List<WellDTO> result = wellService.getWellsByPlateId(plateId);
+    public List<WellDTO> getPlateWells(@Argument Long plateId) {
+        List<WellDTO> result = ObjectUtils.isNotEmpty(plateId) ? wellService.getWellsByPlateId(plateId) : new ArrayList<>();
         return result;
     }
 
     @QueryMapping
-    public List<PlateMeasurementDTO> getPlateMeasurements(@Argument long plateId, @Argument boolean active) {
-        if (active) {
-            return List.of(plateMeasurementService.getActivePlateMeasurement(plateId));
-        } else {
-            return plateMeasurementService.getPlateMeasurements(plateId);
+    public List<PlateMeasurementDTO> getPlateMeasurements(@Argument Long plateId, @Argument boolean active) {
+        List<PlateMeasurementDTO> result = new ArrayList<>();
+        if (ObjectUtils.isNotEmpty(plateId)) {
+            if (active) {
+                result.add(plateMeasurementService.getActivePlateMeasurement(plateId));
+            } else {
+                result.addAll(plateMeasurementService.getPlateMeasurements(plateId));
+            }
         }
+        return result;
     }
 }