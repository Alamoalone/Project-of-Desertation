@@ -22,20 +22,19 @@ public class NotesController {
     @PostMapping("/add")
     public ResponseEntity<?> createNote(@RequestBody Notes note) throws Exception {
         Loggers.info("NOTE CREATED");
-        System.out.println(note);
         Notes notes = notesService.createNote(note);
         if (notes == null) {
-            return ResponseEntity.status(500).header("msg", "SOMETHING WENT WRONG").build();
+            return ResponseEntity.status(200).header("msg", "FIELDS ARE EMPTY").build();
         }
-        return ResponseEntity.ok(notesService.createNote(note));
+        return ResponseEntity.ok(notes);
     }
 
     @GetMapping("/getAll")
-    public ResponseEntity<?> getAllNotes() {
+    public ResponseEntity<?> getAllNotes() throws NullPointerException {
         Loggers.info("ALL NOTE FETCHED");
         List<Notes> notesList = notesService.notesList();
         if(notesList.isEmpty()){
-            return ResponseEntity.status(204).header("msg", "NOTES LIST IS EMPTY").build();
+            return ResponseEntity.noContent().header("msg", "NO NOTE FOUND").build();
         }
         return ResponseEntity.ok(notesList);
     }
@@ -46,34 +45,40 @@ public ResponseEntity<?> getNoteById(@PathVariable Integer id) {
         Loggers.info("NOTE WITH ID " + id + " REQUESTED");
         Notes note = notesService.findByNoteId(id);
         if(note == null){
-            return ResponseEntity.status(204).header("msg", "NO NOTE FOUND WITH THIS ID").build();
+            return ResponseEntity.noContent().header("msg", "NO NOTE FOUND WITH THIS ID").build();
         }
-        return ResponseEntity.ok(notesService.findByNoteId(id));
+        return ResponseEntity.ok(note);
     }
 
     @PutMapping("/noteId/{id}")
     public ResponseEntity<?> updateNoteById(@PathVariable Integer id, @RequestBody Notes notes) {
         Loggers.info("NOTE WITH ID " + id + " UPDATED");
-        if(notesService.updateNoteById(id, notes) == null){
+        Notes note = notesService.updateNoteById(id, notes);
+        if(note == null){
             return ResponseEntity.status(400).header("msg", "BAD REQUEST").build();
         }
-        return ResponseEntity.ok(notesService.updateNoteById(id, notes));
+        return ResponseEntity.ok(note);
     }
 
     @DeleteMapping("/delete/{id}")
     public ResponseEntity<?> deleteById(@PathVariable Integer id) {
         Loggers.info("NOTE WITH ID " + id + " DELETED");
+        Notes note = notesService.findByNoteId(id);
+        if(note == null){
+            return ResponseEntity.noContent().header("msg", "NO CONTENT DELETED BECAUSE IT DOESN'T EXIST").build();
+        }
         notesService.deleteById(id);
         return ResponseEntity.ok().build();
     }
 
     @GetMapping("/getByTitle/{title}")
     public ResponseEntity<?> findByTitle(@PathVariable String title) {
         Loggers.info("NOTE WITH TITLE " + title + " REQUESTED");
-        if (notesService.findByTitle(title) == null) {
+        List<Notes> notesList = notesService.findByTitle(title);
+        if (notesList == null) {
             return ResponseEntity.status(204).header("msg", "NO NOTES FOUND WITH THIS TITLE").build();
         }
-        return ResponseEntity.ok(notesService.findByTitle(title));
+        return ResponseEntity.ok(notesList);
     }
 
     @GetMapping("/userId/{id}")