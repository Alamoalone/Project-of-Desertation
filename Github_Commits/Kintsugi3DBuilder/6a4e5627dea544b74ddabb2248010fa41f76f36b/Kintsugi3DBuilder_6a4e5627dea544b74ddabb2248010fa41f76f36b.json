{
    "sha": "6a4e5627dea544b74ddabb2248010fa41f76f36b",
    "node_id": "C_kwDODEE_ndoAKDZhNGU1NjI3ZGVhNTQ0Yjc0ZGRhYmIyMjQ4MDEwZmE0MWY3NmYzNmI",
    "commit": {
        "author": {
            "name": "Michael Tetzlaff",
            "email": "michaelt919@gmail.com",
            "date": "2023-07-11T04:49:30Z"
        },
        "committer": {
            "name": "Michael Tetzlaff",
            "email": "michaelt919@gmail.com",
            "date": "2023-07-11T04:49:30Z"
        },
        "message": "Pulled out ViewSetReader from ViewSet\n\nAlso fixed bugs (null pointer exceptions) with loading from Agisoft Metashape XML",
        "tree": {
            "sha": "38508b908cb2f8f9cbe8972943815542304ba85e",
            "url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/git/trees/38508b908cb2f8f9cbe8972943815542304ba85e"
        },
        "url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/git/commits/6a4e5627dea544b74ddabb2248010fa41f76f36b",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
        }
    },
    "url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/commits/6a4e5627dea544b74ddabb2248010fa41f76f36b",
    "html_url": "https://github.com/michaelt919/Kintsugi3DBuilder/commit/6a4e5627dea544b74ddabb2248010fa41f76f36b",
    "comments_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/commits/6a4e5627dea544b74ddabb2248010fa41f76f36b/comments",
    "author": {
        "login": "michaelt919",
        "id": 4734191,
        "node_id": "MDQ6VXNlcjQ3MzQxOTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4734191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelt919",
        "html_url": "https://github.com/michaelt919",
        "followers_url": "https://api.github.com/users/michaelt919/followers",
        "following_url": "https://api.github.com/users/michaelt919/following{/other_user}",
        "gists_url": "https://api.github.com/users/michaelt919/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/michaelt919/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/michaelt919/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelt919/orgs",
        "repos_url": "https://api.github.com/users/michaelt919/repos",
        "events_url": "https://api.github.com/users/michaelt919/events{/privacy}",
        "received_events_url": "https://api.github.com/users/michaelt919/received_events",
        "type": "User",
        "site_admin": false
    },
    "committer": {
        "login": "michaelt919",
        "id": 4734191,
        "node_id": "MDQ6VXNlcjQ3MzQxOTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4734191?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelt919",
        "html_url": "https://github.com/michaelt919",
        "followers_url": "https://api.github.com/users/michaelt919/followers",
        "following_url": "https://api.github.com/users/michaelt919/following{/other_user}",
        "gists_url": "https://api.github.com/users/michaelt919/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/michaelt919/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/michaelt919/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelt919/orgs",
        "repos_url": "https://api.github.com/users/michaelt919/repos",
        "events_url": "https://api.github.com/users/michaelt919/events{/privacy}",
        "received_events_url": "https://api.github.com/users/michaelt919/received_events",
        "type": "User",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "bbecfcee766828b15017f95d55dec7b8306556ff",
            "url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/commits/bbecfcee766828b15017f95d55dec7b8306556ff",
            "html_url": "https://github.com/michaelt919/Kintsugi3DBuilder/commit/bbecfcee766828b15017f95d55dec7b8306556ff"
        }
    ],
    "stats": {
        "total": 576,
        "additions": 351,
        "deletions": 225
    },
    "files": [
        {
            "sha": "5e2a65e130ca12f9ee7179f3a43d96f02dc1011d",
            "filename": "src/tetzlaff/ibrelight/core/ReadonlyViewSet.java",
            "status": "modified",
            "additions": 3,
            "deletions": 6,
            "changes": 9,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fcore%2FReadonlyViewSet.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fcore%2FReadonlyViewSet.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fcore%2FReadonlyViewSet.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -18,8 +18,6 @@\n \n import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.OutputStream;\n-import java.nio.file.Path;\n import java.util.Collection;\n \n public interface ReadonlyViewSet\n@@ -40,10 +38,6 @@ public interface ReadonlyViewSet\n \n     ViewSet copy();\n \n-    void writeVSETFileToStream(OutputStream outputStream);\n-\n-    void writeVSETFileToStream(OutputStream outputStream, Path parentDirectory);\n-\n     /**\n      * Gets the camera pose defining the transformation from object space to camera space for a particular view.\n      * @param poseIndex The index of the camera pose to retrieve.\n@@ -184,6 +178,9 @@ public interface ReadonlyViewSet\n \n     SampledLuminanceEncoding getLuminanceEncoding();\n \n+    double[] getLinearLuminanceValues();\n+    byte[] getEncodedLuminanceValues();\n+\n     boolean areLightSourcesInfinite();\n \n     /**"
        },
        {
            "sha": "78162a96bdcc9a9bda258aece36320817d839d3f",
            "filename": "src/tetzlaff/ibrelight/core/ViewSet.java",
            "status": "modified",
            "additions": 128,
            "deletions": 188,
            "changes": 316,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fcore%2FViewSet.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fcore%2FViewSet.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fcore%2FViewSet.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -14,25 +14,21 @@\n import java.io.*;\n import java.nio.file.Path;\n import java.util.*;\n-import javax.xml.stream.XMLInputFactory;\n-import javax.xml.stream.XMLStreamConstants;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamReader;\n \n import tetzlaff.gl.nativebuffer.NativeDataType;\n import tetzlaff.gl.nativebuffer.NativeVectorBuffer;\n import tetzlaff.gl.nativebuffer.NativeVectorBufferFactory;\n import tetzlaff.gl.nativebuffer.ReadonlyNativeVectorBuffer;\n-import tetzlaff.gl.vecmath.Matrix3;\n import tetzlaff.gl.vecmath.Matrix4;\n import tetzlaff.gl.vecmath.Vector3;\n-import tetzlaff.gl.vecmath.Vector4;\n+import tetzlaff.ibrelight.io.ViewSetWriterToVSET;\n import tetzlaff.util.ImageFinder;\n \n /**\n  * A class representing a collection of photographs, or views.\n  * @author Michael Tetzlaff\n  */\n+@SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\")\n public final class ViewSet implements ReadonlyViewSet\n {\n     /**\n@@ -99,7 +95,7 @@ public final class ViewSet implements ReadonlyViewSet\n     /**\n      * The relative file path to be used for loading images.\n      */\n-    private String relativeImagePath;\n+    private String relativeImagePathName;\n \n     /**\n      * The relative name of the mesh file.\n@@ -193,7 +189,11 @@ public List<String> getImageFileNames()\n     public ReadonlyNativeVectorBuffer getCameraPoseData()\n     {\n         // Store the poses in a uniform buffer\n-        if (!cameraPoseList.isEmpty())\n+        if (cameraPoseList.isEmpty())\n+        {\n+            return null;\n+        }\n+        else\n         {\n             // Flatten the camera pose matrices into 16-component vectors and store them in the vertex list data structure.\n             NativeVectorBuffer cameraPoseData = NativeVectorBufferFactory.getInstance().createEmpty(NativeDataType.FLOAT, 16, cameraPoseList.size());\n@@ -213,17 +213,17 @@ public ReadonlyNativeVectorBuffer getCameraPoseData()\n \n             return cameraPoseData;\n         }\n-        else\n-        {\n-            return null;\n-        }\n     }\n \n     @Override\n     public ReadonlyNativeVectorBuffer getCameraProjectionData()\n     {\n         // Store the camera projections in a uniform buffer\n-        if (!cameraProjectionList.isEmpty())\n+        if (cameraProjectionList.isEmpty())\n+        {\n+            return null;\n+        }\n+        else\n         {\n             // Flatten the camera projection matrices into 16-component vectors and store them in the vertex list data structure.\n             NativeVectorBuffer cameraProjectionData = NativeVectorBufferFactory.getInstance().createEmpty(NativeDataType.FLOAT, 16, cameraProjectionList.size());\n@@ -243,36 +243,33 @@ public ReadonlyNativeVectorBuffer getCameraProjectionData()\n             }\n             return cameraProjectionData;\n         }\n-        else\n-        {\n-            return null;\n-        }\n     }\n \n     @Override\n     public ReadonlyNativeVectorBuffer getCameraProjectionIndexData()\n     {\n         // Store the camera projection indices in a uniform buffer\n-        if (!cameraProjectionIndexList.isEmpty())\n+        if (cameraProjectionIndexList.isEmpty())\n         {\n-            int[] indexArray = new int[cameraProjectionIndexList.size()];\n-            for (int i = 0; i < indexArray.length; i++)\n-            {\n-                indexArray[i] = cameraProjectionIndexList.get(i);\n-            }\n-            return NativeVectorBufferFactory.getInstance().createFromIntArray(false, 1, cameraProjectionIndexList.size(), indexArray);\n+            return null;\n         }\n         else\n         {\n-            return null;\n+            int[] indexArray = new int[cameraProjectionIndexList.size()];\n+            Arrays.setAll(indexArray, cameraProjectionIndexList::get);\n+            return NativeVectorBufferFactory.getInstance().createFromIntArray(false, 1, cameraProjectionIndexList.size(), indexArray);\n         }\n     }\n \n     @Override\n     public ReadonlyNativeVectorBuffer getLightPositionData()\n     {\n         // Store the light positions in a uniform buffer\n-        if (!lightPositionList.isEmpty())\n+        if (lightPositionList.isEmpty())\n+        {\n+            return null;\n+        }\n+        else\n         {\n             NativeVectorBuffer lightPositionData = NativeVectorBufferFactory.getInstance().createEmpty(NativeDataType.FLOAT, 4, lightPositionList.size());\n             for (int k = 0; k < lightPositionList.size(); k++)\n@@ -285,17 +282,17 @@ public ReadonlyNativeVectorBuffer getLightPositionData()\n \n             return lightPositionData;\n         }\n-        else\n-        {\n-            return null;\n-        }\n     }\n \n     @Override\n     public ReadonlyNativeVectorBuffer getLightIntensityData()\n     {\n         // Store the light positions in a uniform buffer\n-        if (!lightIntensityList.isEmpty())\n+        if (lightIntensityList.isEmpty())\n+        {\n+            return null;\n+        }\n+        else\n         {\n             NativeVectorBuffer lightIntensityData = NativeVectorBufferFactory.getInstance().createEmpty(NativeDataType.FLOAT, 4, lightIntensityList.size());\n             for (int k = 0; k < lightPositionList.size(); k++)\n@@ -307,28 +304,21 @@ public ReadonlyNativeVectorBuffer getLightIntensityData()\n             }\n             return lightIntensityData;\n         }\n-        else\n-        {\n-            return null;\n-        }\n     }\n \n     @Override\n     public ReadonlyNativeVectorBuffer getLightIndexData()\n     {\n         // Store the light indices in a uniform buffer\n-        if (!lightIndexList.isEmpty())\n+        if (lightIndexList.isEmpty())\n         {\n-            int[] indexArray = new int[lightIndexList.size()];\n-            for (int i = 0; i < indexArray.length; i++)\n-            {\n-                indexArray[i] = lightIndexList.get(i);\n-            }\n-            return NativeVectorBufferFactory.getInstance().createFromIntArray(false, 1, lightIndexList.size(), indexArray);\n+            return null;\n         }\n         else\n         {\n-            return null;\n+            int[] indexArray = new int[lightIndexList.size()];\n+            Arrays.setAll(indexArray, lightIndexList::get);\n+            return NativeVectorBufferFactory.getInstance().createFromIntArray(false, 1, lightIndexList.size(), indexArray);\n         }\n     }\n \n@@ -339,28 +329,31 @@ public ReadonlyViewSet createPermutation(Collection<Integer> permutationIndices)\n \n         for (int i : permutationIndices)\n         {\n-            result.getCameraPoseList().add(this.cameraPoseList.get(i));\n-            result.getCameraPoseInvList().add(this.cameraPoseInvList.get(i));\n-            result.getCameraProjectionIndexList().add(this.cameraProjectionIndexList.get(i));\n-            result.getLightIndexList().add(this.lightIndexList.get(i));\n-            result.getImageFileNames().add(this.imageFileNames.get(i));\n+            result.cameraPoseList.add(this.cameraPoseList.get(i));\n+            result.cameraPoseInvList.add(this.cameraPoseInvList.get(i));\n+            result.cameraProjectionIndexList.add(this.cameraProjectionIndexList.get(i));\n+            result.lightIndexList.add(this.lightIndexList.get(i));\n+            result.imageFileNames.add(this.imageFileNames.get(i));\n         }\n \n-        result.getCameraProjectionList().addAll(this.cameraProjectionList);\n-        result.getLightIntensityList().addAll(this.lightIntensityList);\n-        result.getLightPositionList().addAll(this.lightPositionList);\n+        result.cameraProjectionList.addAll(this.cameraProjectionList);\n+        result.lightIntensityList.addAll(this.lightIntensityList);\n+        result.lightPositionList.addAll(this.lightPositionList);\n \n-        result.setTonemapping(this.gamma,\n-            Arrays.copyOf(this.linearLuminanceValues, this.linearLuminanceValues.length),\n-            Arrays.copyOf(this.encodedLuminanceValues, this.encodedLuminanceValues.length));\n+        if (this.linearLuminanceValues != null && this.encodedLuminanceValues != null)\n+        {\n+            result.setTonemapping(this.gamma,\n+                Arrays.copyOf(this.linearLuminanceValues, this.linearLuminanceValues.length),\n+                Arrays.copyOf(this.encodedLuminanceValues, this.encodedLuminanceValues.length));\n+        }\n \n-        result.setRootDirectory(this.rootDirectory);\n-        result.setRelativeImagePathName(this.relativeImagePath);\n-        result.setGeometryFileName(this.geometryFileName);\n-        result.setInfiniteLightSources(this.infiniteLightSources);\n-        result.setRecommendedNearPlane(this.recommendedNearPlane);\n-        result.setRecommendedFarPlane(this.recommendedFarPlane);\n-        result.setPrimaryView(primaryViewIndex);\n+        result.rootDirectory = this.rootDirectory;\n+        result.relativeImagePathName = this.relativeImagePathName;\n+        result.geometryFileName = this.geometryFileName;\n+        result.infiniteLightSources = this.infiniteLightSources;\n+        result.recommendedNearPlane = this.recommendedNearPlane;\n+        result.recommendedFarPlane = this.recommendedFarPlane;\n+        result.primaryViewIndex = primaryViewIndex;\n \n         return result;\n     }\n@@ -370,26 +363,29 @@ public ViewSet copy()\n     {\n         ViewSet result = new ViewSet(this.getCameraPoseCount());\n \n-        result.getCameraPoseList().addAll(this.cameraPoseList);\n-        result.getCameraPoseInvList().addAll(this.cameraPoseInvList);\n-        result.getCameraProjectionList().addAll(this.cameraProjectionList);\n-        result.getCameraProjectionIndexList().addAll(this.cameraProjectionIndexList);\n-        result.getLightPositionList().addAll(this.lightPositionList);\n-        result.getLightIntensityList().addAll(this.lightIntensityList);\n-        result.getLightIndexList().addAll(this.lightIndexList);\n-        result.getImageFileNames().addAll(this.imageFileNames);\n-\n-        result.setTonemapping(this.gamma,\n-            Arrays.copyOf(this.linearLuminanceValues, this.linearLuminanceValues.length),\n-            Arrays.copyOf(this.encodedLuminanceValues, this.encodedLuminanceValues.length));\n-\n-        result.setRootDirectory(this.rootDirectory);\n-        result.setRelativeImagePathName(this.relativeImagePath);\n-        result.setGeometryFileName(this.geometryFileName);\n-        result.setInfiniteLightSources(this.infiniteLightSources);\n-        result.setRecommendedNearPlane(this.recommendedNearPlane);\n-        result.setRecommendedFarPlane(this.recommendedFarPlane);\n-        result.setPrimaryView(primaryViewIndex);\n+        result.cameraPoseList.addAll(this.cameraPoseList);\n+        result.cameraPoseInvList.addAll(this.cameraPoseInvList);\n+        result.cameraProjectionList.addAll(this.cameraProjectionList);\n+        result.cameraProjectionIndexList.addAll(this.cameraProjectionIndexList);\n+        result.lightPositionList.addAll(this.lightPositionList);\n+        result.lightIntensityList.addAll(this.lightIntensityList);\n+        result.lightIndexList.addAll(this.lightIndexList);\n+        result.imageFileNames.addAll(this.imageFileNames);\n+\n+        if (this.linearLuminanceValues != null && this.encodedLuminanceValues != null)\n+        {\n+            result.setTonemapping(this.gamma,\n+                Arrays.copyOf(this.linearLuminanceValues, this.linearLuminanceValues.length),\n+                Arrays.copyOf(this.encodedLuminanceValues, this.encodedLuminanceValues.length));\n+        }\n+\n+        result.rootDirectory = this.rootDirectory;\n+        result.relativeImagePathName = this.relativeImagePathName;\n+        result.geometryFileName = this.geometryFileName;\n+        result.infiniteLightSources = this.infiniteLightSources;\n+        result.recommendedNearPlane = this.recommendedNearPlane;\n+        result.recommendedFarPlane = this.recommendedFarPlane;\n+        result.primaryViewIndex = primaryViewIndex;\n \n         return result;\n     }\n@@ -399,120 +395,29 @@ public static ReadonlyViewSet createFromLookAt(List<Vector3> viewDir, Vector3 ce\n     {\n         ViewSet result = new ViewSet(viewDir.size());\n \n-        result.getCameraProjectionList().add(new DistortionProjection(sensorWidth, sensorWidth / aspect, focalLength));\n+        result.cameraProjectionList.add(new DistortionProjection(sensorWidth, sensorWidth / aspect, focalLength));\n \n-        result.setRecommendedNearPlane(nearPlane);\n-        result.setRecommendedFarPlane(2 * distance - nearPlane);\n+        result.recommendedNearPlane = nearPlane;\n+        result.recommendedFarPlane = 2 * distance - nearPlane;\n \n-        result.getLightIntensityList().add(new Vector3(distance * distance));\n-        result.getLightPositionList().add(Vector3.ZERO);\n+        result.lightIntensityList.add(new Vector3(distance * distance));\n+        result.lightPositionList.add(Vector3.ZERO);\n \n         for (int i = 0; i < viewDir.size(); i++)\n         {\n-            result.getCameraProjectionIndexList().add(0);\n-            result.getLightIndexList().add(0);\n-            result.getImageFileNames().add(String.format(\"%04d.png\", i + 1));\n+            result.cameraProjectionIndexList.add(0);\n+            result.lightIndexList.add(0);\n+            result.imageFileNames.add(String.format(\"%04d.png\", i + 1));\n \n             Matrix4 cameraPose = Matrix4.lookAt(viewDir.get(i).times(-distance).plus(center), center, up);\n \n-            result.getCameraPoseList().add(cameraPose);\n-            result.getCameraPoseInvList().add(cameraPose.quickInverse(0.001f));\n+            result.cameraPoseList.add(cameraPose);\n+            result.cameraPoseInvList.add(cameraPose.quickInverse(0.001f));\n         }\n \n         return result;\n     }\n \n-    @Override\n-    public void writeVSETFileToStream(OutputStream outputStream)\n-    {\n-        writeVSETFileToStream(outputStream, null);\n-    }\n-\n-    @Override\n-    public void writeVSETFileToStream(OutputStream outputStream, Path parentDirectory)\n-    {\n-        PrintStream out = new PrintStream(outputStream);\n-        out.println(\"# Created by IBRelight\");\n-\n-        if (getGeometryFile() != null)\n-        {\n-            out.println(\"\\n# Geometry file name (mesh)\");\n-            out.println(\"m \" + (parentDirectory == null ? geometryFileName : parentDirectory.relativize(getGeometryFile().toPath())));\n-        }\n-\n-        out.println(\"\\n# Image file path\");\n-        out.println(\"i \" + (parentDirectory == null ? relativeImagePath : parentDirectory.relativize(getImageFilePath().toPath())));\n-\n-        out.println(\"\\n# Estimated near and far planes\");\n-        out.printf(\"c\\t%.8f\\t%.8f\\n\", recommendedNearPlane, recommendedFarPlane);\n-\n-        out.println(\"\\n# \" + cameraProjectionList.size() + (cameraProjectionList.size()==1?\" Sensor\":\" Sensors\"));\n-        for (Projection proj : cameraProjectionList)\n-        {\n-            out.println(proj.toVSETString());\n-        }\n-\n-        if (linearLuminanceValues != null && encodedLuminanceValues != null)\n-        {\n-            out.println(\"\\n# Luminance encoding: Munsell 2/3.5/5.6.5/8/9.5\");\n-            out.println(\"#\\tCIE-Y/100\\tEncoded\");\n-            for(int i = 0; i < linearLuminanceValues.length && i < encodedLuminanceValues.length; i++)\n-            {\n-                out.printf(\"e\\t%.8f\\t\\t%3d\\n\", linearLuminanceValues[i], 0x00FF & encodedLuminanceValues[i]);\n-            }\n-        }\n-\n-        out.println(\"\\n# \" + cameraPoseList.size() + (cameraPoseList.size()==1?\" Camera\":\" Cameras\"));\n-        for (Matrix4 pose : cameraPoseList)\n-        {\n-            // TODO validate quaternion computation\n-//            Matrix3 rot = new Matrix3(pose);\n-//            if (rot.determinant() == 1.0f)\n-//            {\n-//                // No scale - use quaternion\n-//                Vector4 quat = rot.toQuaternion();\n-//                Vector4 loc = pose.getColumn(3);\n-//                out.printf(\"p\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\n\",\n-//                            loc.x, loc.y, loc.z, quat.x, quat.y, quat.z, quat.w);\n-//            }\n-//            else\n-            //{\n-                // Write a general 4x4 matrix\n-                out.printf(\"P\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\n\",\n-                        pose.get(0, 0), pose.get(0, 1), pose.get(0, 2), pose.get(0, 3),\n-                        pose.get(1, 0), pose.get(1, 1), pose.get(1, 2), pose.get(1, 3),\n-                        pose.get(2, 0), pose.get(2, 1), pose.get(2, 2), pose.get(2, 3),\n-                        pose.get(3, 0), pose.get(3, 1), pose.get(3, 2), pose.get(3, 3));\n-            //}\n-        }\n-\n-        if(!lightPositionList.isEmpty())\n-        {\n-            out.println(\"\\n# \" + lightPositionList.size() + (lightPositionList.size()==1?\" Light\":\" Lights\"));\n-            for (int ID=0; ID < lightPositionList.size(); ID++)\n-            {\n-                Vector3 pos = lightPositionList.get(ID);\n-                Vector3 intensity = lightIntensityList.get(ID);\n-                out.printf(\"l\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\n\", pos.x, pos.y, pos.z, intensity.x, intensity.y, intensity.z);\n-            }\n-        }\n-\n-        out.println(\"\\n# \" + cameraPoseList.size() + (cameraPoseList.size()==1?\" View\":\" Views\"));\n-\n-        // Primary view first (so that next time the view set is loaded it will be index 0)\n-        out.printf(\"v\\t%d\\t%d\\t%d\\t%s\\n\", primaryViewIndex,  cameraProjectionIndexList.get(primaryViewIndex), lightIndexList.get(primaryViewIndex), imageFileNames.get(primaryViewIndex));\n-        for (int ID=0; ID<cameraPoseList.size(); ID++)\n-        {\n-            if (ID != primaryViewIndex)\n-            {\n-                out.printf(\"v\\t%d\\t%d\\t%d\\t%s\\n\", ID,  cameraProjectionIndexList.get(ID), lightIndexList.get(ID), imageFileNames.get(ID));\n-            }\n-        }\n-\n-        out.close();\n-    }\n-\n-\n \n     @Override\n     public Matrix4 getCameraPose(int poseIndex)\n@@ -533,14 +438,37 @@ public File getRootDirectory()\n     }\n \n     /**\n-     * Sets the root directory for this view set.\n+     * Sets the root directory for this view set, while leaving other file paths unmodified.\n      * @param rootDirectory The root directory.\n      */\n     public void setRootDirectory(File rootDirectory)\n     {\n         this.rootDirectory = rootDirectory;\n     }\n \n+    /**\n+     * Changes the root directory while adjusting other file paths to still reference the original files.\n+     * @param newRootDirectory The new root directory.\n+     */\n+    public void moveRootDirectory(Path newRootDirectory)\n+    {\n+        //noinspection VariableNotUsedInsideIf\n+        if (this.rootDirectory != null)\n+        {\n+            if (this.getGeometryFile() != null)\n+            {\n+                this.geometryFileName = newRootDirectory.relativize(getGeometryFile().toPath()).toString();\n+            }\n+\n+            if (this.getImageFilePath() != null)\n+            {\n+                this.relativeImagePathName = newRootDirectory.relativize(getImageFilePath().toPath()).toString();\n+            }\n+        }\n+\n+        this.rootDirectory = newRootDirectory.toFile();\n+    }\n+\n     @Override\n     public String getGeometryFileName()\n     {\n@@ -565,13 +493,13 @@ public File getGeometryFile()\n     @Override\n     public File getImageFilePath()\n     {\n-        return this.relativeImagePath == null ? this.rootDirectory : new File(this.rootDirectory, relativeImagePath);\n+        return this.relativeImagePathName == null ? this.rootDirectory : new File(this.rootDirectory, relativeImagePathName);\n     }\n \n     @Override\n     public String getRelativeImagePathName()\n     {\n-        return this.relativeImagePath;\n+        return this.relativeImagePathName;\n     }\n \n     /**\n@@ -580,7 +508,7 @@ public String getRelativeImagePathName()\n      */\n     public void setRelativeImagePathName(String relativeImagePath)\n     {\n-        this.relativeImagePath = relativeImagePath;\n+        this.relativeImagePathName = relativeImagePath;\n     }\n \n     @Override\n@@ -601,7 +529,7 @@ public int getPrimaryViewIndex()\n         return this.primaryViewIndex;\n     }\n \n-    public void setPrimaryView(int poseIndex)\n+    public void setPrimaryViewIndex(int poseIndex)\n     {\n         this.primaryViewIndex = poseIndex;\n     }\n@@ -721,6 +649,18 @@ public SampledLuminanceEncoding getLuminanceEncoding()\n         }\n     }\n \n+    @Override\n+    public double[] getLinearLuminanceValues()\n+    {\n+        return Arrays.copyOf(this.linearLuminanceValues, this.linearLuminanceValues.length);\n+    }\n+\n+    @Override\n+    public byte[] getEncodedLuminanceValues()\n+    {\n+        return Arrays.copyOf(this.encodedLuminanceValues, this.encodedLuminanceValues.length);\n+    }\n+\n     public void setTonemapping(float gamma, double[] linearLuminanceValues, byte[] encodedLuminanceValues)\n     {\n         this.gamma = gamma;\n@@ -748,6 +688,6 @@ public File findImageFile(int index) throws FileNotFoundException\n     @Override\n     public File findPrimaryImageFile() throws FileNotFoundException\n     {\n-        return findImageFile(getPrimaryViewIndex());\n+        return findImageFile(primaryViewIndex);\n     }\n }"
        },
        {
            "sha": "e6281a21ba166452048298aaeaa8e2c358e9c206",
            "filename": "src/tetzlaff/ibrelight/export/general/MultiviewRetargetRenderRequest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fgeneral%2FMultiviewRetargetRenderRequest.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fgeneral%2FMultiviewRetargetRenderRequest.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fgeneral%2FMultiviewRetargetRenderRequest.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -12,15 +12,14 @@\n package tetzlaff.ibrelight.export.general;\n \n import java.io.File;\n-import java.io.IOException;\n import java.util.function.Consumer;\n \n import tetzlaff.gl.core.Context;\n import tetzlaff.gl.core.Drawable;\n import tetzlaff.gl.core.FramebufferObject;\n import tetzlaff.gl.core.Program;\n import tetzlaff.ibrelight.core.*;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromVSET;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromVSET;\n import tetzlaff.ibrelight.rendering.resources.IBRResourcesImageSpace;\n import tetzlaff.models.ReadonlySettingsModel;\n "
        },
        {
            "sha": "f81742dc4d6cc82fc289b5026884c392b42e14c1",
            "filename": "src/tetzlaff/ibrelight/export/resample/ResampleRequest.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fresample%2FResampleRequest.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fresample%2FResampleRequest.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fresample%2FResampleRequest.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -12,7 +12,6 @@\n package tetzlaff.ibrelight.export.resample;\n \n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.StandardCopyOption;\n import java.util.Arrays;\n@@ -22,7 +21,7 @@\n import tetzlaff.gl.core.Context;\n import tetzlaff.gl.core.FramebufferObject;\n import tetzlaff.ibrelight.core.*;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromVSET;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromVSET;\n \n public class ResampleRequest<ContextType extends Context<ContextType>> implements IBRRequest<ContextType>\n {"
        },
        {
            "sha": "ff4b18db7342f691f416bb6b93c93735cd286ccc",
            "filename": "src/tetzlaff/ibrelight/export/specularfit/SpecularFitRequestUI.java",
            "status": "modified",
            "additions": 1,
            "deletions": 2,
            "changes": 3,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fspecularfit%2FSpecularFitRequestUI.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fspecularfit%2FSpecularFitRequestUI.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fexport%2Fspecularfit%2FSpecularFitRequestUI.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -12,7 +12,6 @@\n package tetzlaff.ibrelight.export.specularfit;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.net.URL;\n \n@@ -31,7 +30,7 @@\n import javafx.stage.Window;\n import tetzlaff.gl.core.Context;\n import tetzlaff.ibrelight.core.*;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromVSET;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromVSET;\n \n public class SpecularFitRequestUI implements IBRRequestUI\n {"
        },
        {
            "sha": "1f6a4eeb1c7486e08ee20481ae928fd055c026dd",
            "filename": "src/tetzlaff/ibrelight/io/ViewSetReader.java",
            "status": "renamed",
            "additions": 2,
            "deletions": 2,
            "changes": 4,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReader.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReader.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReader.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -10,7 +10,7 @@\n  *\n  */\n \n-package tetzlaff.ibrelight.loaders;\n+package tetzlaff.ibrelight.io;\n \n import tetzlaff.ibrelight.core.ViewSet;\n \n@@ -20,6 +20,7 @@\n  * Abstracts the idea of loading a view set from a file as a factory object.\n  * Typically, an implementation would support just one file format, but that format is not specified by this interface.\n  */\n+@FunctionalInterface\n public interface ViewSetReader\n {\n     /**\n@@ -44,6 +45,5 @@ default ViewSet readFromFile(File file) throws Exception\n             result.setRootDirectory(file.getParentFile());\n             return result;\n         }\n-\n     }\n }",
            "previous_filename": "src/tetzlaff/ibrelight/loaders/ViewSetReader.java"
        },
        {
            "sha": "5e0a2e678533809ea1cb81b33b0843505a4ab11f",
            "filename": "src/tetzlaff/ibrelight/io/ViewSetReaderFromAgisoftXML.java",
            "status": "renamed",
            "additions": 4,
            "deletions": 4,
            "changes": 8,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromAgisoftXML.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromAgisoftXML.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromAgisoftXML.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -10,7 +10,7 @@\n  *\n  */\n \n-package tetzlaff.ibrelight.loaders;\n+package tetzlaff.ibrelight.io;\n \n import tetzlaff.gl.vecmath.Matrix3;\n import tetzlaff.gl.vecmath.Matrix4;\n@@ -29,9 +29,9 @@\n /**\n  * Handles loading view sets from a camera definition file exported in XML format from Agisoft PhotoScan.\n  */\n-public class ViewSetReaderFromAgisoftXML implements ViewSetReader\n+public final class ViewSetReaderFromAgisoftXML implements ViewSetReader\n {\n-    private static ViewSetReaderFromAgisoftXML INSTANCE = new ViewSetReaderFromAgisoftXML();\n+    private static final ViewSetReader INSTANCE = new ViewSetReaderFromAgisoftXML();\n \n     public static ViewSetReader getInstance()\n     {\n@@ -652,7 +652,7 @@ else if (Objects.equals(reader.getAttributeValue(null, \"name\"), \"pixel_height\"))\n             }\n         }\n \n-        result.setPrimaryView(primaryViewIndex);\n+        result.setPrimaryViewIndex(primaryViewIndex);\n \n         return result;\n     }",
            "previous_filename": "src/tetzlaff/ibrelight/loaders/ViewSetReaderFromAgisoftXML.java"
        },
        {
            "sha": "ee68b61b7288b2d12d7fb0881c9960e8bb648ba0",
            "filename": "src/tetzlaff/ibrelight/io/ViewSetReaderFromVSET.java",
            "status": "renamed",
            "additions": 3,
            "deletions": 3,
            "changes": 6,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromVSET.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromVSET.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetReaderFromVSET.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -10,7 +10,7 @@\n  *\n  */\n \n-package tetzlaff.ibrelight.loaders;\n+package tetzlaff.ibrelight.io;\n \n import tetzlaff.gl.vecmath.Matrix3;\n import tetzlaff.gl.vecmath.Matrix4;\n@@ -26,9 +26,9 @@\n /**\n  * Handles loading view sets from the VSET text file format\n  */\n-public class ViewSetReaderFromVSET implements ViewSetReader\n+public final class ViewSetReaderFromVSET implements ViewSetReader\n {\n-    private static ViewSetReaderFromVSET INSTANCE = new ViewSetReaderFromVSET();\n+    private static final ViewSetReader INSTANCE = new ViewSetReaderFromVSET();\n \n     public static ViewSetReader getInstance()\n     {",
            "previous_filename": "src/tetzlaff/ibrelight/loaders/ViewSetReaderFromVSET.java"
        },
        {
            "sha": "87d9475b874e004d4c6f9a04f10a3bbcdbe630bd",
            "filename": "src/tetzlaff/ibrelight/io/ViewSetWriter.java",
            "status": "added",
            "additions": 55,
            "deletions": 0,
            "changes": 55,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriter.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriter.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriter.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) Michael Tetzlaff 2023\n+ *\n+ *  Licensed under GPLv3\n+ *  ( http://www.gnu.org/licenses/gpl-3.0.html )\n+ *\n+ *  This code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n+ */\n+\n+package tetzlaff.ibrelight.io;\n+\n+import java.io.*;\n+import java.util.Objects;\n+\n+import tetzlaff.ibrelight.core.ReadonlyViewSet;\n+import tetzlaff.ibrelight.core.ViewSet;\n+\n+@FunctionalInterface\n+public interface ViewSetWriter\n+{\n+    /**\n+     * Saves a view set to an output stream of bytes\n+     * @param viewSet The view set\n+     * @param outputStream The output stream\n+     * @throws Exception If any errors occur while saving the file.\n+     */\n+    void writeToStream(ReadonlyViewSet viewSet, OutputStream outputStream);\n+\n+    /**\n+     * Saves a view set to an output file.\n+     * The view set's root directory will be set to the parent directory of the specified file.\n+     * @param viewSet The view set\n+     * @param file The file to save\n+     * @throws Exception If any errors occur while saving the file.\n+     */\n+    default void writeToFile(ReadonlyViewSet viewSet, File file) throws IOException\n+    {\n+        try (OutputStream stream = new FileOutputStream(file))\n+        {\n+            if (Objects.equals(viewSet.getRootDirectory(), file.getParentFile()))\n+            {\n+                // Same root directory; use the view set unmodified.\n+                writeToStream(viewSet, stream);\n+            }\n+            else\n+            {\n+                ViewSet copy = viewSet.copy();\n+                copy.moveRootDirectory(file.getParentFile().toPath());\n+                writeToStream(copy, stream);\n+            }\n+        }\n+    }\n+}"
        },
        {
            "sha": "8e49f0a292e7ec98dd49735cbcdc7975be66199f",
            "filename": "src/tetzlaff/ibrelight/io/ViewSetWriterToVSET.java",
            "status": "added",
            "additions": 143,
            "deletions": 0,
            "changes": 143,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriterToVSET.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriterToVSET.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fio%2FViewSetWriterToVSET.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -0,0 +1,143 @@\n+/*\n+ *  Copyright (c) Michael Tetzlaff 2023\n+ *\n+ *  Licensed under GPLv3\n+ *  ( http://www.gnu.org/licenses/gpl-3.0.html )\n+ *\n+ *  This code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n+ */\n+\n+package tetzlaff.ibrelight.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+import tetzlaff.gl.vecmath.Matrix4;\n+import tetzlaff.gl.vecmath.Vector3;\n+import tetzlaff.ibrelight.core.ReadonlyViewSet;\n+\n+public final class ViewSetWriterToVSET implements ViewSetWriter\n+{\n+    private static final ViewSetWriter INSTANCE = new ViewSetWriterToVSET();\n+\n+    public static ViewSetWriter getInstance()\n+    {\n+        return INSTANCE;\n+    }\n+\n+    private ViewSetWriterToVSET()\n+    {\n+    }\n+\n+    @Override\n+    public void writeToStream(ReadonlyViewSet viewSet, OutputStream outputStream)\n+    {\n+\n+        PrintStream out = new PrintStream(outputStream);\n+        out.println(\"# Created by IBRelight\");\n+\n+        if (viewSet.getGeometryFileName() != null)\n+        {\n+            out.println();\n+            out.println(\"# Geometry file name (mesh)\");\n+            out.println(\"m \" + viewSet.getGeometryFileName());\n+        }\n+\n+        out.println();\n+        out.println(\"# Image file path\");\n+        out.println(\"i \" + viewSet.getRelativeImagePathName());\n+\n+        out.println();\n+        out.println(\"# Estimated near and far planes\");\n+        out.printf(\"c\\t%.8f\\t%.8f\", viewSet.getRecommendedNearPlane(), viewSet.getRecommendedFarPlane());\n+        out.println();\n+\n+        out.println();\n+        out.println(\"# \" + viewSet.getCameraProjectionCount() + (viewSet.getCameraProjectionCount() == 1 ? \" Sensor\" : \" Sensors\"));\n+        for (int i = 0; i < viewSet.getCameraProjectionCount(); i++)\n+        {\n+            out.println(viewSet.getCameraProjection(i).toVSETString());\n+        }\n+\n+        if (viewSet.hasCustomLuminanceEncoding())\n+        {\n+            out.println();\n+            out.println(\"# Luminance encoding: Munsell 2/3.5/5.6.5/8/9.5\");\n+            out.println(\"#\\tCIE-Y/100\\tEncoded\");\n+\n+            double[] linearLuminanceValues = viewSet.getLinearLuminanceValues();\n+            byte[] encodedLuminanceValues = viewSet.getEncodedLuminanceValues();\n+\n+            for(int i = 0; i < linearLuminanceValues.length && i < encodedLuminanceValues.length; i++)\n+            {\n+                out.printf(\"e\\t%.8f\\t\\t%3d\", linearLuminanceValues[i], 0x00FF & encodedLuminanceValues[i]);\n+                out.println();\n+            }\n+        }\n+\n+        out.println();\n+        out.println(\"# \" + viewSet.getCameraPoseCount() + (viewSet.getCameraPoseCount() == 1 ? \" Camera\" : \" Cameras\"));\n+        for (int i = 0; i < viewSet.getCameraPoseCount(); i++)\n+        {\n+            Matrix4 pose = viewSet.getCameraPose(i);\n+\n+            // TODO validate quaternion computation\n+//            Matrix3 rot = new Matrix3(pose);\n+//            if (rot.determinant() == 1.0f)\n+//            {\n+//                // No scale - use quaternion\n+//                Vector4 quat = rot.toQuaternion();\n+//                Vector4 loc = pose.getColumn(3);\n+//                out.printf(\"p\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\n\",\n+//                            loc.x, loc.y, loc.z, quat.x, quat.y, quat.z, quat.w);\n+//            }\n+//            else\n+            //{\n+            // Write a general 4x4 matrix\n+            out.printf(\"P\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\",\n+                pose.get(0, 0), pose.get(0, 1), pose.get(0, 2), pose.get(0, 3),\n+                pose.get(1, 0), pose.get(1, 1), pose.get(1, 2), pose.get(1, 3),\n+                pose.get(2, 0), pose.get(2, 1), pose.get(2, 2), pose.get(2, 3),\n+                pose.get(3, 0), pose.get(3, 1), pose.get(3, 2), pose.get(3, 3));\n+            //}\n+            out.println();\n+        }\n+\n+        if(viewSet.getLightCount() > 0)\n+        {\n+            out.println();\n+            out.println(\"# \" + viewSet.getLightCount() + (viewSet.getLightCount() == 1 ? \" Light\" : \" Lights\"));\n+            for (int id = 0; id < viewSet.getLightCount(); id++)\n+            {\n+                Vector3 pos = viewSet.getLightPosition(id);\n+                Vector3 intensity = viewSet.getLightIntensity(id);\n+                out.printf(\"l\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\\t%.8f\", pos.x, pos.y, pos.z, intensity.x, intensity.y, intensity.z);\n+                out.println();\n+            }\n+        }\n+\n+        out.println();\n+        out.println(\"# \" + viewSet.getCameraPoseCount() + (viewSet.getCameraPoseCount() == 1 ? \" View\" : \" Views\"));\n+\n+        // Primary view first (so that next time the view set is loaded it will be index 0)\n+        out.printf(\"v\\t%d\\t%d\\t%d\\t%s\", viewSet.getPrimaryViewIndex(),\n+            viewSet.getCameraProjectionIndex(viewSet.getPrimaryViewIndex()),\n+            viewSet.getLightIndex(viewSet.getPrimaryViewIndex()),\n+            viewSet.getImageFileName(viewSet.getPrimaryViewIndex()));\n+        out.println();\n+\n+        for (int id = 0; id < viewSet.getCameraPoseCount(); id++)\n+        {\n+            if (id != viewSet.getPrimaryViewIndex())\n+            {\n+                out.printf(\"v\\t%d\\t%d\\t%d\\t%s\", id,  viewSet.getCameraProjectionIndex(id), viewSet.getLightIndex(id), viewSet.getImageFileName(id));\n+                out.println();\n+            }\n+        }\n+\n+        out.close();\n+    }\n+}"
        },
        {
            "sha": "37be4913e166d1cc66f39a3a697ba093eb3409d0",
            "filename": "src/tetzlaff/ibrelight/javafx/controllers/menubar/LoaderController.java",
            "status": "modified",
            "additions": 1,
            "deletions": 4,
            "changes": 5,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fjavafx%2Fcontrollers%2Fmenubar%2FLoaderController.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Fjavafx%2Fcontrollers%2Fmenubar%2FLoaderController.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Fjavafx%2Fcontrollers%2Fmenubar%2FLoaderController.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -12,11 +12,9 @@\n package tetzlaff.ibrelight.javafx.controllers.menubar;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.net.URL;\n import java.util.Comparator;\n import java.util.ResourceBundle;\n-import javax.xml.stream.XMLStreamException;\n \n import javafx.fxml.FXML;\n import javafx.fxml.Initializable;\n@@ -29,9 +27,8 @@\n import javafx.stage.*;\n import javafx.stage.FileChooser.ExtensionFilter;\n import tetzlaff.ibrelight.core.ReadonlyViewSet;\n-import tetzlaff.ibrelight.core.ViewSet;\n import tetzlaff.ibrelight.javafx.MultithreadModels;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromAgisoftXML;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromAgisoftXML;\n \n public class LoaderController implements Initializable\n {"
        },
        {
            "sha": "788f9f0a45f5bafc70701ad86a89067bd5920899",
            "filename": "src/tetzlaff/ibrelight/rendering/IBRInstanceManager.java",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2FIBRInstanceManager.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2FIBRInstanceManager.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Frendering%2FIBRInstanceManager.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -23,6 +23,7 @@\n import tetzlaff.gl.vecmath.Vector2;\n import tetzlaff.gl.vecmath.Vector3;\n import tetzlaff.ibrelight.core.*;\n+import tetzlaff.ibrelight.io.ViewSetWriterToVSET;\n import tetzlaff.ibrelight.rendering.resources.IBRResourcesImageSpace;\n import tetzlaff.interactive.InitializationException;\n import tetzlaff.models.ReadonlyCameraModel;\n@@ -319,10 +320,7 @@ public void loadBackplate(File backplateFile) throws FileNotFoundException\n     @Override\n     public void saveToVSETFile(File vsetFile) throws IOException\n     {\n-        try (OutputStream stream = new FileOutputStream(vsetFile))\n-        {\n-            ibrInstance.getActiveViewSet().writeVSETFileToStream(stream, vsetFile.getParentFile().toPath());\n-        }\n+        ViewSetWriterToVSET.getInstance().writeToFile(ibrInstance.getActiveViewSet(), vsetFile);\n     }\n \n     @Override"
        },
        {
            "sha": "3a6492354a818d3019fc0ddfaf6c2716488d4967",
            "filename": "src/tetzlaff/ibrelight/rendering/resources/IBRResourcesImageSpace.java",
            "status": "modified",
            "additions": 2,
            "deletions": 4,
            "changes": 6,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRResourcesImageSpace.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRResourcesImageSpace.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRResourcesImageSpace.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -16,13 +16,11 @@\n import java.util.Arrays;\n import java.util.Date;\n import javax.imageio.ImageIO;\n-import javax.xml.stream.XMLStreamException;\n \n import tetzlaff.gl.builders.ColorTextureBuilder;\n import tetzlaff.gl.builders.ProgramBuilder;\n import tetzlaff.gl.core.*;\n import tetzlaff.gl.geometry.GeometryMode;\n-import tetzlaff.gl.geometry.ReadonlyVertexGeometry;\n import tetzlaff.gl.material.TextureLoadOptions;\n import tetzlaff.gl.nativebuffer.NativeDataType;\n import tetzlaff.gl.nativebuffer.NativeVectorBuffer;\n@@ -31,8 +29,8 @@\n import tetzlaff.gl.vecmath.Matrix4;\n import tetzlaff.gl.vecmath.Vector3;\n import tetzlaff.ibrelight.core.*;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromAgisoftXML;\n-import tetzlaff.ibrelight.loaders.ViewSetReaderFromVSET;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromAgisoftXML;\n+import tetzlaff.ibrelight.io.ViewSetReaderFromVSET;\n \n /**\n  * A class that encapsulates all of the GPU resources like vertex buffers, uniform buffers, and textures for a given"
        },
        {
            "sha": "a51e60d42f7ccc8d6052077fbaaca0de046d57ae",
            "filename": "src/tetzlaff/ibrelight/rendering/resources/IBRSharedResources.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRSharedResources.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRSharedResources.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FIBRSharedResources.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -133,7 +133,7 @@ public IBRSharedResources(ContextType context, ViewSet viewSet, VertexGeometry g\n         }\n         else\n         {\n-            luminanceMapResources = null;\n+            luminanceMapResources = LuminanceMapResources.createNull(context);\n         }\n \n         if (geometry != null)"
        },
        {
            "sha": "b77856e0f74af4467eed6b3cb38ef46d61ea0f81",
            "filename": "src/tetzlaff/ibrelight/rendering/resources/LuminanceMapResources.java",
            "status": "modified",
            "additions": 1,
            "deletions": 1,
            "changes": 2,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FLuminanceMapResources.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FLuminanceMapResources.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Fibrelight%2Frendering%2Fresources%2FLuminanceMapResources.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -15,7 +15,7 @@\n import tetzlaff.gl.core.*;\n import tetzlaff.ibrelight.core.SampledLuminanceEncoding;\n \n-public class LuminanceMapResources<ContextType extends Context<ContextType>> implements Resource\n+public final class LuminanceMapResources<ContextType extends Context<ContextType>> implements Resource\n {\n     private final ContextType context;\n "
        },
        {
            "sha": "2db483c215956ff3b01703ae374c700349a21753",
            "filename": "src/tetzlaff/util/MakeViewSet.java",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/michaelt919/Kintsugi3DBuilder/blob/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Futil%2FMakeViewSet.java",
            "raw_url": "https://github.com/michaelt919/Kintsugi3DBuilder/raw/6a4e5627dea544b74ddabb2248010fa41f76f36b/src%2Ftetzlaff%2Futil%2FMakeViewSet.java",
            "contents_url": "https://api.github.com/repos/michaelt919/Kintsugi3DBuilder/contents/src%2Ftetzlaff%2Futil%2FMakeViewSet.java?ref=6a4e5627dea544b74ddabb2248010fa41f76f36b",
            "patch": "@@ -19,6 +19,7 @@\n import tetzlaff.gl.vecmath.Vector3;\n import tetzlaff.ibrelight.core.ReadonlyViewSet;\n import tetzlaff.ibrelight.core.ViewSet;\n+import tetzlaff.ibrelight.io.ViewSetWriterToVSET;\n \n public final class MakeViewSet\n {\n@@ -57,9 +58,9 @@ public static void main(String[] args)\n             Float.parseFloat(args[2]), Float.parseFloat(args[3]), Float.parseFloat(args[4]), Float.parseFloat(args[5]));\n         try (PrintStream out = new PrintStream(String.format(args[6], viewSet.getCameraPoseCount())))\n         {\n-            viewSet.writeVSETFileToStream(out);\n+            ViewSetWriterToVSET.getInstance().writeToStream(viewSet, out);\n         }\n-        catch (FileNotFoundException e)\n+        catch (Exception e)\n         {\n             e.printStackTrace();\n         }"
        }
    ]
}