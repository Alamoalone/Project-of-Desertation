@@ -44,8 +44,6 @@ public List<AddTodoResDTO> addTodo(String userId, AddTodoReqDTO todoInfoReqDTO)
         List<AddTodoResDTO> response = new ArrayList<>();
         RepeatType repeatType = todoInfoReqDTO.getRepeatInfo().getRepeatType();
         List<Integer> repeatData = todoInfoReqDTO.getRepeatInfo().getRepeatData();
-        LocalDate repeatStartDate = todoInfoReqDTO.getRepeatInfo().getRepeatStartDate();
-        LocalDate repeatEndDate = todoInfoReqDTO.getRepeatInfo().getRepeatEndDate();
 
         StringBuilder repeatCode = new StringBuilder();
         Random rnd = new Random();
@@ -68,44 +66,34 @@ public List<AddTodoResDTO> addTodo(String userId, AddTodoReqDTO todoInfoReqDTO)
                 throw new CustomException(ErrorCode.WRONG_CATEGORY_ID);
             };
 
-            Todo todo;
-
-            if (req.getEndedAtDate() == null) {
-                todo = Todo.builder().id(UlidCreator.getUlid().toString())
-                    .content(req.getContent())
-                    .startedAtDate(LocalDate.parse(req.getStartedAtDate()))
-                    .startedAtTime(LocalTime.parse(req.getStartedAtTime()))
-                    .receiveAlert(req.isReceiveAlert()).clearYN(false)
-                    .getExperiencePointOrNot(false).markOnTheCalenderOrNot(req.isMarkOnTheCalenderOrNot())
-                    .alertAt(req.getAlertAt())
-                    .alertType(req.getAlertType())
-                    .repeatType(repeatType)
-                    .repeatData(repeatData)
-                    .repeatCode(repeatCode.toString())
-                    .repeatStartDate(repeatStartDate)
-                    .repeatEndDate(repeatEndDate)
-                    .build();
-            } else {
-                todo = Todo.builder().id(UlidCreator.getUlid().toString())
-                    .content(req.getContent())
-                    .startedAtDate(LocalDate.parse(req.getStartedAtDate()))
-                    .startedAtTime(LocalTime.parse(req.getStartedAtTime()))
-                    .endedAtDate(LocalDate.parse(req.getEndedAtDate()))
-                    .endedAtTime(LocalTime.parse(req.getEndedAtTime()))
-                    .receiveAlert(req.isReceiveAlert()).clearYN(false)
-                    .getExperiencePointOrNot(false).markOnTheCalenderOrNot(req.isMarkOnTheCalenderOrNot())
-                    .alertAt(req.getAlertAt())
-                    .alertType(req.getAlertType())
-                    .repeatType(repeatType)
-                    .repeatData(repeatData)
-                    .repeatCode(repeatCode.toString())
-                    .repeatStartDate(repeatStartDate)
-                    .repeatEndDate(repeatEndDate)
-                    .build();
+            Todo.TodoBuilder todoBuilder = Todo.builder().id(UlidCreator.getUlid().toString())
+                .content(req.getContent())
+                .startedAtDate(LocalDate.parse(req.getStartedAtDate()))
+                .receiveAlert(req.isReceiveAlert()).clearYN(false)
+                .getExperiencePointOrNot(false).markOnTheCalenderOrNot(req.isMarkOnTheCalenderOrNot())
+                .alertAt(req.getAlertAt())
+                .alertType(req.getAlertType())
+                .repeatType(repeatType)
+                .repeatData(repeatData)
+                .repeatCode(repeatCode.toString());
+
+            if (req.getStartedAtTime() != null) {
+                todoBuilder.startedAtTime(LocalTime.parse(req.getStartedAtTime()));
+            }
+            if (req.getEndedAtTime() != null) {
+                todoBuilder.endedAtDate(LocalDate.parse(req.getEndedAtDate()))
+                        .endedAtTime(LocalTime.parse(req.getEndedAtTime()));
+            }
+            if (todoInfoReqDTO.getRepeatInfo().getRepeatEndDate() != null) {
+                todoBuilder.repeatStartDate(todoInfoReqDTO.getRepeatInfo().getRepeatEndDate());
+            }
+            if (todoInfoReqDTO.getRepeatInfo().getRepeatStartDate() != null) {
+                todoBuilder.repeatEndDate(todoInfoReqDTO.getRepeatInfo().getRepeatStartDate());
             }
 
-            String todoId = todoRepository.save(todo).getId();
+            Todo todo = todoBuilder.build();
 
+            String todoId = todoRepository.save(todo).getId();
 
             includeRepository.createIncludeRelationshipBetweenCategoryAndTodo(todoId, req.getCategoryId());
             response.add(AddTodoResDTO.builder().todoId(todoId).build());