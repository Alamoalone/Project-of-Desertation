@@ -87,13 +87,16 @@ public void givenContactPersonObject_whenClean_thenReturnCleanedContactPersonObj
 
     }
 
-    @DisplayName("JUnit test for clean contact method")
+    @DisplayName("JUnit test for clean contact method (all fields field)")
     @Test
     public void givenContactObject_whenTrim_thenReturnCleanedContactObject() {
         //given - precondition or setup
         Contact contact = Contact.builder()
                 .title(" DK Chotom贸w  ")
                 .description("   Opis  ")
+                .webPage(" https://www.google.com/search ")
+                .phone(" +48938475970 ")
+                .email(" abc@.gmail.com")
                 .build();
 
         //when - action or the behavior that we are going to test
@@ -103,8 +106,26 @@ public void givenContactObject_whenTrim_thenReturnCleanedContactObject() {
         //then - verify the output
         assertEquals("DK Chotom贸w", cleanedContact.getTitle());
         assertEquals("Opis", cleanedContact.getDescription());
-
+        assertEquals("+48938475970", cleanedContact.getPhone());
+        assertEquals("https://www.google.com/search", cleanedContact.getWebPage());
+        assertEquals("abc@.gmail.com", cleanedContact.getEmail());
     }
 
 
+    @DisplayName("JUnit test for clean contact method (only title)")
+    @Test
+    public void givenContactObjectWithTitleOnly_whenTrim_thenReturnCleanedContactObject() {
+        //given - precondition or setup
+        Contact contact = Contact.builder()
+                .title(" DK Chotom贸w  ")
+                .build();
+
+        //when - action or the behavior that we are going to test
+        Contact cleanedContact = inputCleaner.clean(contact);
+
+        //then - verify the output
+        assertNotNull(cleanedContact);
+        assertEquals("DK Chotom贸w", cleanedContact.getTitle());
+    }
+
 }
\ No newline at end of file