{
    "sha": "89d519a7beb74d8630c0b1673b34ea1da508f972",
    "node_id": "C_kwDOKSdJR9oAKDg5ZDUxOWE3YmViNzRkODYzMGMwYjE2NzNiMzRlYTFkYTUwOGY5NzI",
    "commit": {
        "author": {
            "name": "lyoubo",
            "email": "295967709@qq.com",
            "date": "2023-12-21T02:47:00Z"
        },
        "committer": {
            "name": "lyoubo",
            "email": "295967709@qq.com",
            "date": "2023-12-21T02:47:00Z"
        },
        "message": "Fix some null pointer exception",
        "tree": {
            "sha": "a448030f4ac4a478e6500996cd1d610506d48b75",
            "url": "https://api.github.com/repos/lyoubo/ReExtractor/git/trees/a448030f4ac4a478e6500996cd1d610506d48b75"
        },
        "url": "https://api.github.com/repos/lyoubo/ReExtractor/git/commits/89d519a7beb74d8630c0b1673b34ea1da508f972",
        "comment_count": 0,
        "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
        }
    },
    "url": "https://api.github.com/repos/lyoubo/ReExtractor/commits/89d519a7beb74d8630c0b1673b34ea1da508f972",
    "html_url": "https://github.com/lyoubo/ReExtractor/commit/89d519a7beb74d8630c0b1673b34ea1da508f972",
    "comments_url": "https://api.github.com/repos/lyoubo/ReExtractor/commits/89d519a7beb74d8630c0b1673b34ea1da508f972/comments",
    "author": {
        "login": "lyoubo",
        "id": 38977445,
        "node_id": "MDQ6VXNlcjM4OTc3NDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/38977445?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lyoubo",
        "html_url": "https://github.com/lyoubo",
        "followers_url": "https://api.github.com/users/lyoubo/followers",
        "following_url": "https://api.github.com/users/lyoubo/following{/other_user}",
        "gists_url": "https://api.github.com/users/lyoubo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lyoubo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lyoubo/subscriptions",
        "organizations_url": "https://api.github.com/users/lyoubo/orgs",
        "repos_url": "https://api.github.com/users/lyoubo/repos",
        "events_url": "https://api.github.com/users/lyoubo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lyoubo/received_events",
        "type": "User",
        "site_admin": false
    },
    "committer": {
        "login": "lyoubo",
        "id": 38977445,
        "node_id": "MDQ6VXNlcjM4OTc3NDQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/38977445?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lyoubo",
        "html_url": "https://github.com/lyoubo",
        "followers_url": "https://api.github.com/users/lyoubo/followers",
        "following_url": "https://api.github.com/users/lyoubo/following{/other_user}",
        "gists_url": "https://api.github.com/users/lyoubo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lyoubo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lyoubo/subscriptions",
        "organizations_url": "https://api.github.com/users/lyoubo/orgs",
        "repos_url": "https://api.github.com/users/lyoubo/repos",
        "events_url": "https://api.github.com/users/lyoubo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lyoubo/received_events",
        "type": "User",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "959260f888dcc8b535b8de32ade41f51b2d9b562",
            "url": "https://api.github.com/repos/lyoubo/ReExtractor/commits/959260f888dcc8b535b8de32ade41f51b2d9b562",
            "html_url": "https://github.com/lyoubo/ReExtractor/commit/959260f888dcc8b535b8de32ade41f51b2d9b562"
        }
    ],
    "stats": {
        "total": 150,
        "additions": 91,
        "deletions": 59
    },
    "files": [
        {
            "sha": "cef170d9a1d340534c5375cf392bbc5cf91dd6b5",
            "filename": "src/main/java/org/reextractor/service/RefactoringExtractorServiceImpl.java",
            "status": "modified",
            "additions": 91,
            "deletions": 59,
            "changes": 150,
            "blob_url": "https://github.com/lyoubo/ReExtractor/blob/89d519a7beb74d8630c0b1673b34ea1da508f972/src%2Fmain%2Fjava%2Forg%2Freextractor%2Fservice%2FRefactoringExtractorServiceImpl.java",
            "raw_url": "https://github.com/lyoubo/ReExtractor/raw/89d519a7beb74d8630c0b1673b34ea1da508f972/src%2Fmain%2Fjava%2Forg%2Freextractor%2Fservice%2FRefactoringExtractorServiceImpl.java",
            "contents_url": "https://api.github.com/repos/lyoubo/ReExtractor/contents/src%2Fmain%2Fjava%2Forg%2Freextractor%2Fservice%2FRefactoringExtractorServiceImpl.java?ref=89d519a7beb74d8630c0b1673b34ea1da508f972",
            "patch": "@@ -1,6 +1,5 @@\n package org.reextractor.service;\n \n-import com.google.gson.stream.JsonToken;\n import org.apache.commons.lang3.tuple.Pair;\n import org.eclipse.jdt.core.Flags;\n import org.eclipse.jdt.core.dom.*;\n@@ -162,8 +161,8 @@ private void detectRefactoringsInMatchedEntities(Set<Pair<DeclarationNodeTree, D\n         }\n     }\n \n-    private void processOperations(boolean isMove, Set<Pair<DeclarationNodeTree, DeclarationNodeTree>> matchedEntities, DeclarationNodeTree oldEntity, DeclarationNodeTree newEntity,\n-                                   List<Refactoring> refactorings) {\n+    private void processOperations(boolean isMove, Set<Pair<DeclarationNodeTree, DeclarationNodeTree>> matchedEntities,\n+                                   DeclarationNodeTree oldEntity, DeclarationNodeTree newEntity, List<Refactoring> refactorings) {\n         MethodDeclaration removedOperation = (MethodDeclaration) oldEntity.getDeclaration();\n         MethodDeclaration addedOperation = (MethodDeclaration) newEntity.getDeclaration();\n         if (isMove) {\n@@ -455,7 +454,8 @@ private void checkForThrownExceptionTypeChanges(DeclarationNodeTree oldEntity, D\n         }\n     }\n \n-    private void checkForOperationParameterChanges(DeclarationNodeTree oldEntity, DeclarationNodeTree newEntity, List<Refactoring> refactorings) {\n+    private void checkForOperationParameterChanges(DeclarationNodeTree oldEntity, DeclarationNodeTree newEntity,\n+                                                   List<Refactoring> refactorings) {\n         MethodDeclaration removedOperation = (MethodDeclaration) oldEntity.getDeclaration();\n         MethodDeclaration addedOperation = (MethodDeclaration) newEntity.getDeclaration();\n         List<SingleVariableDeclaration> addedParameters = new ArrayList<>();\n@@ -568,6 +568,28 @@ private void checkForOperationParameterChanges(DeclarationNodeTree oldEntity, De\n                 }\n             }\n         }\n+\n+        //fourth round match parameters with the same type\n+        if (removedParameters.size() == addedParameters.size()) {\n+            boolean sameType = true;\n+            for (int i = 0; i < removedParameters.size(); i++) {\n+                SingleVariableDeclaration removedParameter = removedParameters.get(i);\n+                SingleVariableDeclaration addedParameter = addedParameters.get(i);\n+                if (!removedParameter.getType().toString().equals(addedParameter.getType().toString())) {\n+                    sameType = false;\n+                    break;\n+                }\n+            }\n+            if (sameType) {\n+                for (int i = 0; i < removedParameters.size(); i++) {\n+                    SingleVariableDeclaration removedParameter = removedParameters.get(i);\n+                    SingleVariableDeclaration addedParameter = addedParameters.get(i);\n+                    parameterDiffList.add(Pair.of(removedParameter, addedParameter));\n+                }\n+                removedParameters.clear();\n+                addedParameters.clear();\n+            }\n+        }\n         getParameterRefactorings(parameterDiffList, addedParameters, removedParameters, oldEntity, newEntity, refactorings);\n     }\n \n@@ -888,10 +910,10 @@ private void detectRefactoringsBetweenMatchedAndExtractedEntities(Set<Pair<Decla\n                 Set<DeclarationNodeTree> subclassSetBefore = new LinkedHashSet<>();\n                 Set<DeclarationNodeTree> subclassSetAfter = new LinkedHashSet<>();\n                 for (Pair<DeclarationNodeTree, DeclarationNodeTree> pair : matchedEntities) {\n-                    if (addedEntity.getType() == EntityType.CLASS || addedEntity.getType() == EntityType.INTERFACE) {\n-                        DeclarationNodeTree oldEntity = pair.getLeft();\n-                        if (mapping.contains(oldEntity)) {\n-                            DeclarationNodeTree newEntity = pair.getRight();\n+                    DeclarationNodeTree oldEntity = pair.getLeft();\n+                    if (mapping.contains(oldEntity)) {\n+                        DeclarationNodeTree newEntity = pair.getRight();\n+                        if (newEntity.getType() == EntityType.CLASS || newEntity.getType() == EntityType.INTERFACE) {\n                             TypeDeclaration newClass = (TypeDeclaration) newEntity.getDeclaration();\n                             TypeDeclaration addedClass = (TypeDeclaration) addedEntity.getDeclaration();\n                             if (!isSubTypeOf(newClass, addedClass) && !isSubTypeOf(addedClass, newClass)) {\n@@ -969,14 +991,20 @@ private DeclarationNodeTree findMatchedEntity(Set<Pair<DeclarationNodeTree, Decl\n     }\n \n     private boolean isSubTypeOf(Set<Pair<DeclarationNodeTree, DeclarationNodeTree>> matchedEntities, DeclarationNodeTree oldEntity, DeclarationNodeTree newEntity) {\n-        TypeDeclaration removedClass = (TypeDeclaration) oldEntity.getParent().getDeclaration();\n-        DeclarationNodeTree matchedAddedEntity = findMatchedEntity(matchedEntities, newEntity.getParent());\n-        TypeDeclaration matchedAddedClass = matchedAddedEntity == null ? null : (TypeDeclaration) (matchedAddedEntity.getDeclaration());\n-        TypeDeclaration addedClass = (TypeDeclaration) newEntity.getParent().getDeclaration();\n-        DeclarationNodeTree matchedDeletedEntity = findMatchedEntity(matchedEntities, oldEntity.getParent());\n-        TypeDeclaration matchedDeletedClass = matchedDeletedEntity == null ? null : (TypeDeclaration) (matchedDeletedEntity.getDeclaration());\n-        return (matchedAddedClass != null && isSubTypeOf(removedClass, matchedAddedClass))\n-                || (matchedDeletedClass != null && isSubTypeOf(matchedDeletedClass, addedClass));\n+        DeclarationNodeTree oldParent = oldEntity.getParent();\n+        DeclarationNodeTree newParent = newEntity.getParent();\n+        if ((oldParent.getType() == EntityType.CLASS || oldParent.getType() == EntityType.INTERFACE) &&\n+                (newParent.getType() == EntityType.CLASS || newParent.getType() == EntityType.INTERFACE)) {\n+            TypeDeclaration removedClass = (TypeDeclaration) oldParent.getDeclaration();\n+            TypeDeclaration addedClass = (TypeDeclaration) newParent.getDeclaration();\n+            DeclarationNodeTree matchedAddedEntity = findMatchedEntity(matchedEntities, newParent);\n+            TypeDeclaration matchedAddedClass = matchedAddedEntity == null ? null : (TypeDeclaration) (matchedAddedEntity.getDeclaration());\n+            DeclarationNodeTree matchedDeletedEntity = findMatchedEntity(matchedEntities, oldParent);\n+            TypeDeclaration matchedDeletedClass = matchedDeletedEntity == null ? null : (TypeDeclaration) (matchedDeletedEntity.getDeclaration());\n+            return (matchedAddedClass != null && isSubTypeOf(removedClass, matchedAddedClass))\n+                    || (matchedDeletedClass != null && isSubTypeOf(matchedDeletedClass, addedClass));\n+        }\n+        return false;\n     }\n \n     private boolean isSubTypeOf(TypeDeclaration removedClass, TypeDeclaration addedClass) {\n@@ -1332,50 +1360,54 @@ private void processTryStatement(StatementNodeTree oldStatement, StatementNodeTr\n                                      DeclarationNodeTree newEntity, List<Refactoring> refactorings) {\n         TryStatement statement1 = (TryStatement) oldStatement.getStatement();\n         TryStatement statement2 = (TryStatement) newStatement.getStatement();\n-        List<VariableDeclarationExpression> resources1 = statement1.resources();\n-        List<VariableDeclarationExpression> resources2 = statement2.resources();\n+        List<Object> resources1 = statement1.resources();\n+        List<Object> resources2 = statement2.resources();\n         for (int i = 0; i < Math.min(resources1.size(), resources2.size()); i++) {\n-            VariableDeclarationExpression expression1 = resources1.get(i);\n-            VariableDeclarationExpression expression2 = resources2.get(i);\n-            List<VariableDeclarationFragment> fragments1 = expression1.fragments();\n-            List<VariableDeclarationFragment> fragments2 = expression2.fragments();\n-            Type type1 = expression1.getType();\n-            Type type2 = expression2.getType();\n-            for (int j = 0; j < Math.min(fragments1.size(), fragments2.size()); j++) {\n-                VariableDeclarationFragment fragment1 = fragments1.get(j);\n-                VariableDeclarationFragment fragment2 = fragments2.get(j);\n-                if (!fragment1.getName().getIdentifier().equals(fragment2.getName().getIdentifier())) {\n-                    RenameVariableRefactoring refactoring = new RenameVariableRefactoring(fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                if (!type1.toString().equals(type2.toString())) {\n-                    ChangeVariableTypeRefactoring refactoring = new ChangeVariableTypeRefactoring(fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                List<IExtendedModifier> modifiers1 = expression1.modifiers();\n-                List<IExtendedModifier> modifiers2 = expression2.modifiers();\n-                AnnotationListDiff annotationListDiff = new AnnotationListDiff(modifiers1, modifiers2);\n-                for (Annotation annotation : annotationListDiff.getAddedAnnotations()) {\n-                    AddVariableAnnotationRefactoring refactoring = new AddVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                for (Annotation annotation : annotationListDiff.getRemovedAnnotations()) {\n-                    RemoveVariableAnnotationRefactoring refactoring = new RemoveVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                for (Pair<Annotation, Annotation> annotationDiff : annotationListDiff.getAnnotationDiffs()) {\n-                    ModifyVariableAnnotationRefactoring refactoring = new ModifyVariableAnnotationRefactoring(annotationDiff.getLeft(), annotationDiff.getRight(), fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                int variableModifiers1 = expression1.getModifiers();\n-                int variableModifiers2 = expression2.getModifiers();\n-                if (!Flags.isFinal(variableModifiers1) && Flags.isFinal(variableModifiers2)) {\n-                    AddVariableModifierRefactoring refactoring = new AddVariableModifierRefactoring(\"final\", fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n-                }\n-                if (Flags.isFinal(variableModifiers1) && !Flags.isFinal(variableModifiers2)) {\n-                    RemoveVariableModifierRefactoring refactoring = new RemoveVariableModifierRefactoring(\"final\", fragment1, fragment2, oldEntity, newEntity);\n-                    refactorings.add(refactoring);\n+            Object resource1 = resources1.get(i);\n+            Object resource2 = resources2.get(i);\n+            if (resource1 instanceof VariableDeclarationExpression && resource2 instanceof VariableDeclarationExpression) {\n+                VariableDeclarationExpression expression1 = (VariableDeclarationExpression) resource1;\n+                VariableDeclarationExpression expression2 = (VariableDeclarationExpression) resource2;\n+                List<VariableDeclarationFragment> fragments1 = expression1.fragments();\n+                List<VariableDeclarationFragment> fragments2 = expression2.fragments();\n+                Type type1 = expression1.getType();\n+                Type type2 = expression2.getType();\n+                for (int j = 0; j < Math.min(fragments1.size(), fragments2.size()); j++) {\n+                    VariableDeclarationFragment fragment1 = fragments1.get(j);\n+                    VariableDeclarationFragment fragment2 = fragments2.get(j);\n+                    if (!fragment1.getName().getIdentifier().equals(fragment2.getName().getIdentifier())) {\n+                        RenameVariableRefactoring refactoring = new RenameVariableRefactoring(fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    if (!type1.toString().equals(type2.toString())) {\n+                        ChangeVariableTypeRefactoring refactoring = new ChangeVariableTypeRefactoring(fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    List<IExtendedModifier> modifiers1 = expression1.modifiers();\n+                    List<IExtendedModifier> modifiers2 = expression2.modifiers();\n+                    AnnotationListDiff annotationListDiff = new AnnotationListDiff(modifiers1, modifiers2);\n+                    for (Annotation annotation : annotationListDiff.getAddedAnnotations()) {\n+                        AddVariableAnnotationRefactoring refactoring = new AddVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    for (Annotation annotation : annotationListDiff.getRemovedAnnotations()) {\n+                        RemoveVariableAnnotationRefactoring refactoring = new RemoveVariableAnnotationRefactoring(annotation, fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    for (Pair<Annotation, Annotation> annotationDiff : annotationListDiff.getAnnotationDiffs()) {\n+                        ModifyVariableAnnotationRefactoring refactoring = new ModifyVariableAnnotationRefactoring(annotationDiff.getLeft(), annotationDiff.getRight(), fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    int variableModifiers1 = expression1.getModifiers();\n+                    int variableModifiers2 = expression2.getModifiers();\n+                    if (!Flags.isFinal(variableModifiers1) && Flags.isFinal(variableModifiers2)) {\n+                        AddVariableModifierRefactoring refactoring = new AddVariableModifierRefactoring(\"final\", fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n+                    if (Flags.isFinal(variableModifiers1) && !Flags.isFinal(variableModifiers2)) {\n+                        RemoveVariableModifierRefactoring refactoring = new RemoveVariableModifierRefactoring(\"final\", fragment1, fragment2, oldEntity, newEntity);\n+                        refactorings.add(refactoring);\n+                    }\n                 }\n             }\n         }"
        }
    ]
}