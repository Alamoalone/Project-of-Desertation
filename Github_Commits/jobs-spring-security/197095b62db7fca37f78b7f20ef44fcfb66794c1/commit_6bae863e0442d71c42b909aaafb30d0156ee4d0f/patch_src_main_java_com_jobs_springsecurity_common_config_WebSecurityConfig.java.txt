@@ -50,20 +50,33 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
                 .formLogin(Customizer.withDefaults())
                 .httpBasic(Customizer.withDefaults());
         */
-
-        http.csrf().disable()
+        http
+                .csrf().disable()
                 .authorizeHttpRequests()
                 .antMatchers("/", "/signup/**").permitAll() // permitAll을 한다고 해서 전체 필터가 제외되는 것은 아님, 전체 필터 제외는 web ignoring
                 .antMatchers("/user/**").hasAuthority("USER") // hasAuthority
                 .antMatchers("/admin/**").hasAuthority("ADMIN") // hasAuthority
                 //.antMatchers("/user/**").hasRole("USER") // hasRole에서는 DB저장 시 ROLE_ prefix 붙여서 저장
-                .anyRequest().authenticated()
-                .and()
+                .anyRequest().authenticated();
+
+        http
                 .authenticationManager(authenticationManager())
-                .exceptionHandling().accessDeniedPage("/access-denied")
-                .and()
+                .exceptionHandling().accessDeniedPage("/access-denied");
+
+        http
                 .formLogin(Customizer.withDefaults())
+                /*.formLogin(httpSecurityFormLoginConfigurer -> {
+                    httpSecurityFormLoginConfigurer
+                            .loginPage("")
+                            .passwordParameter("")
+                            .usernameParameter("")
+                            .defaultSuccessUrl("", false)
+                            .successForwardUrl("")
+                            .failureForwardUrl("")
+                            .loginProcessingUrl("");
+                })*/
                 .httpBasic(Customizer.withDefaults());
+
         return http.build();
     }
 