@@ -387,63 +387,66 @@ public void read(Json json, JsonValue jsonMap) {
     } catch (IllegalArgumentException e) {
       type = null;
     }
-    switch (type) {
-      case Tractor:
-        jsonMap = jsonMap.get("components").get("TractorActions");
-        TractorActions tractorActions = new TractorActions();
-        // Update the tractor 'muted' variable based on the info in the json file
-        tractorActions.setMuted(jsonMap.getBoolean("isMuted"));
-        this.addComponent(tractorActions);
-        break;
-      case Tile:
-        jsonMap = jsonMap.get("components").get("CropTileComponent");
-        CropTileComponent c = new CropTileComponent(jsonMap.getFloat("waterContent"), jsonMap.getFloat("soilQuality"));
-        c.setFertilised(jsonMap.getBoolean("isFertilised"));
-        JsonValue plantData = jsonMap.get("plant");
-        if (plantData.get("Entity") != null) {
-          // Has a plant
-          plantData = plantData.get("components").get("PlantComponent");
-          c.setPlant(
-              new Entity().addComponent(new PlantComponent(plantData.getInt("health"), plantData.getString("name"),
-                  "bleh", "bleh", 1f, 999, 999, this.getComponent(CropTileComponent.class))));
-          c.getPlant().getComponent(PlantComponent.class).setCurrentAge(plantData.getFloat("age"));
-          c.getPlant().getComponent(PlantComponent.class).setGrowthStage(plantData.getInt("growth"));
-        }
-        this.addComponent(c);
-        break;
-      case Cow:
-      case Astrolotl:
-      case Chicken:
-        jsonMap = jsonMap.get("components").get("TamableComponent");
-        // Does not need actual values here as it is just used to store the tamed value;
-        Entity emptyPlayer = new Entity(); // empty player, as the real player is not needed for reading in the
-                                           // component
-        TamableComponent tamableComponent = new TamableComponent(emptyPlayer, 1, 1, null);
-        tamableComponent.setTame(jsonMap.getBoolean("Tamed"));
-        this.addComponent(tamableComponent);
-        break;
-      case Player:
-        InventoryComponent inventoryComponent = new InventoryComponent(null);
-        HashMap<Entity, Integer> items = new HashMap<>();
-        HashMap<Entity, Point> itemPositions = new HashMap<>();
-        ArrayList inventory = new ArrayList();
-        JsonValue inv = jsonMap.get("components").get("InventoryComponent").get("inventory");
-        inv.forEach(jsonValue -> {
-          Entity item = FactoryService.getItemFactories().get(jsonValue.getString("name")).get();
-          ItemType itemType = item.getComponent(ItemComponent.class).getItemType();
-          switch (itemType) {
-            case WATERING_CAN ->
-              item.getComponent(WateringCanLevelComponent.class).setCurrentLevel(jsonValue.getFloat("level"));
+
+    if (type != null) { // Line 388 may break the switch statement otherwise
+      switch (type) {
+        case Tractor:
+          jsonMap = jsonMap.get("components").get("TractorActions");
+          TractorActions tractorActions = new TractorActions();
+          // Update the tractor 'muted' variable based on the info in the json file
+          tractorActions.setMuted(jsonMap.getBoolean("isMuted"));
+          this.addComponent(tractorActions);
+          break;
+        case Tile:
+          jsonMap = jsonMap.get("components").get("CropTileComponent");
+          CropTileComponent c = new CropTileComponent(jsonMap.getFloat("waterContent"), jsonMap.getFloat("soilQuality"));
+          c.setFertilised(jsonMap.getBoolean("isFertilised"));
+          JsonValue plantData = jsonMap.get("plant");
+          if (plantData.get("Entity") != null) {
+            // Has a plant
+            plantData = plantData.get("components").get("PlantComponent");
+            c.setPlant(
+                new Entity().addComponent(new PlantComponent(plantData.getInt("health"), plantData.getString("name"),
+                    "bleh", "bleh", 1f, 999, 999, this.getComponent(CropTileComponent.class))));
+            c.getPlant().getComponent(PlantComponent.class).setCurrentAge(plantData.getFloat("age"));
+            c.getPlant().getComponent(PlantComponent.class).setGrowthStage(plantData.getInt("growth"));
           }
-          items.put(item, jsonValue.getInt("count"));
-          itemPositions.put(item, new Point(jsonValue.getInt("X"), jsonValue.getInt("Y")));
-          inventory.add(item);
-        });
-        inventoryComponent.setInventory(items, itemPositions, inventory);
-        this.addComponent(inventoryComponent);
-
-      default:
-        // Nothing
+          this.addComponent(c);
+          break;
+        case Cow:
+        case Astrolotl:
+        case Chicken:
+          jsonMap = jsonMap.get("components").get("TamableComponent");
+          // Does not need actual values here as it is just used to store the tamed value;
+          Entity emptyPlayer = new Entity(); // empty player, as the real player is not needed for reading in the
+                                             // component
+          TamableComponent tamableComponent = new TamableComponent(emptyPlayer, 1, 1, null);
+          tamableComponent.setTame(jsonMap.getBoolean("Tamed"));
+          this.addComponent(tamableComponent);
+          break;
+        case Player:
+          InventoryComponent inventoryComponent = new InventoryComponent(null);
+          HashMap<Entity, Integer> items = new HashMap<>();
+          HashMap<Entity, Point> itemPositions = new HashMap<>();
+          ArrayList inventory = new ArrayList();
+          JsonValue inv = jsonMap.get("components").get("InventoryComponent").get("inventory");
+          inv.forEach(jsonValue -> {
+            Entity item = FactoryService.getItemFactories().get(jsonValue.getString("name")).get();
+            ItemType itemType = item.getComponent(ItemComponent.class).getItemType();
+            switch (itemType) {
+              case WATERING_CAN ->
+                item.getComponent(WateringCanLevelComponent.class).setCurrentLevel(jsonValue.getFloat("level"));
+            }
+            items.put(item, jsonValue.getInt("count"));
+            itemPositions.put(item, new Point(jsonValue.getInt("X"), jsonValue.getInt("Y")));
+            inventory.add(item);
+          });
+          inventoryComponent.setInventory(items, itemPositions, inventory);
+          this.addComponent(inventoryComponent);
+
+        default:
+          // Nothing
+      }
     }
   }
 